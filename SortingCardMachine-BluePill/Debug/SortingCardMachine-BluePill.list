
SortingCardMachine-BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080056f8  080056f8  000066f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005738  08005738  00007014  2**0
                  CONTENTS
  4 .ARM          00000000  08005738  08005738  00007014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005738  08005738  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005738  08005738  00006738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800573c  0800573c  0000673c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005740  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b4  20000014  08005754  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c8  08005754  000070c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a91  00000000  00000000  0000703d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aee  00000000  00000000  00017ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0001a5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c94  00000000  00000000  0001b5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bc3  00000000  00000000  0001c274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121e4  00000000  00000000  00033e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091813  00000000  00000000  0004601b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d782e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042bc  00000000  00000000  000d7874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  000dbb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	080056e0 	.word	0x080056e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	080056e0 	.word	0x080056e0

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000030 	.word	0x20000030
 800017c:	20000084 	.word	0x20000084

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  xQueueUART = xQueueCreate( 2, sizeof(uint8_t) ); // For 16 bits messege multiple the sizeof() by 2
 8000186:	2200      	movs	r2, #0
 8000188:	2101      	movs	r1, #1
 800018a:	2002      	movs	r0, #2
 800018c:	f003 fbba 	bl	8003904 <xQueueGenericCreate>
 8000190:	4603      	mov	r3, r0
 8000192:	4a1f      	ldr	r2, [pc, #124]	@ (8000210 <main+0x90>)
 8000194:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fd77 	bl	8000c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f845 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f93d 	bl	800041c <MX_GPIO_Init>
  MX_TIM2_Init();
 80001a2:	f000 f887 	bl	80002b4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001a6:	f000 f909 	bl	80003bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	TIM2->CCR1 = 512;
 80001aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80001b2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2->CCR2 = 256;
 80001b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80001bc:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001be:	2100      	movs	r1, #0
 80001c0:	4814      	ldr	r0, [pc, #80]	@ (8000214 <main+0x94>)
 80001c2:	f001 fe2d 	bl	8001e20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001c6:	2104      	movs	r1, #4
 80001c8:	4812      	ldr	r0, [pc, #72]	@ (8000214 <main+0x94>)
 80001ca:	f001 fe29 	bl	8001e20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80001ce:	2100      	movs	r1, #0
 80001d0:	4810      	ldr	r0, [pc, #64]	@ (8000214 <main+0x94>)
 80001d2:	f001 fec7 	bl	8001f64 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80001d6:	2104      	movs	r1, #4
 80001d8:	480e      	ldr	r0, [pc, #56]	@ (8000214 <main+0x94>)
 80001da:	f001 fec3 	bl	8001f64 <HAL_TIM_PWM_Stop>


  /****************************** FreeRTOS *******************************/
  xReturned = xTaskCreate( StartDefaultTask,       /* Function that implements the task. */
 80001de:	4b0e      	ldr	r3, [pc, #56]	@ (8000218 <main+0x98>)
 80001e0:	9301      	str	r3, [sp, #4]
 80001e2:	2301      	movs	r3, #1
 80001e4:	9300      	str	r3, [sp, #0]
 80001e6:	2301      	movs	r3, #1
 80001e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80001ec:	490b      	ldr	r1, [pc, #44]	@ (800021c <main+0x9c>)
 80001ee:	480c      	ldr	r0, [pc, #48]	@ (8000220 <main+0xa0>)
 80001f0:	f003 febb 	bl	8003f6a <xTaskCreate>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000224 <main+0xa4>)
 80001f8:	6013      	str	r3, [r2, #0]
                      256,      /* Stack size in words, not bytes. */
                      ( void * ) 1,    /* Parameter passed into the task. */
                      1,/* Priority at which the task is created. */
					  &xHandleMainTask ); // * &xHandle );   if I need to add handle to use later

    if( xReturned == pdFAIL) {
 80001fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000224 <main+0xa4>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d101      	bne.n	8000206 <main+0x86>
      //Print something or say someting
      HAL_NVIC_SystemReset();
 8000202:	f000 fe68 	bl	8000ed6 <HAL_NVIC_SystemReset>
    }


    vTaskStartScheduler();
 8000206:	f004 f943 	bl	8004490 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020a:	bf00      	nop
 800020c:	e7fd      	b.n	800020a <main+0x8a>
 800020e:	bf00      	nop
 8000210:	20000318 	.word	0x20000318
 8000214:	20000284 	.word	0x20000284
 8000218:	20000314 	.word	0x20000314
 800021c:	080056f8 	.word	0x080056f8
 8000220:	0800084d 	.word	0x0800084d
 8000224:	2000032c 	.word	0x2000032c

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	@ 0x40
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	2228      	movs	r2, #40	@ 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f005 fa18 	bl	800566c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024a:	2301      	movs	r3, #1
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000252:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025c:	2302      	movs	r3, #2
 800025e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000260:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000264:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000266:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800026a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0318 	add.w	r3, r7, #24
 8000270:	4618      	mov	r0, r3
 8000272:	f001 f89b 	bl	80013ac <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800027c:	f000 fb4e 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	230f      	movs	r3, #15
 8000282:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000284:	2302      	movs	r3, #2
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2102      	movs	r1, #2
 800029a:	4618      	mov	r0, r3
 800029c:	f001 fb08 	bl	80018b0 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002a6:	f000 fb39 	bl	800091c <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3740      	adds	r7, #64	@ 0x40
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b08e      	sub	sp, #56	@ 0x38
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c8:	f107 0320 	add.w	r3, r7, #32
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
 80002e0:	615a      	str	r2, [r3, #20]
 80002e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002e4:	4b34      	ldr	r3, [pc, #208]	@ (80003b8 <MX_TIM2_Init+0x104>)
 80002e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002ec:	4b32      	ldr	r3, [pc, #200]	@ (80003b8 <MX_TIM2_Init+0x104>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f2:	4b31      	ldr	r3, [pc, #196]	@ (80003b8 <MX_TIM2_Init+0x104>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1023;
 80002f8:	4b2f      	ldr	r3, [pc, #188]	@ (80003b8 <MX_TIM2_Init+0x104>)
 80002fa:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80002fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000300:	4b2d      	ldr	r3, [pc, #180]	@ (80003b8 <MX_TIM2_Init+0x104>)
 8000302:	2200      	movs	r2, #0
 8000304:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000306:	4b2c      	ldr	r3, [pc, #176]	@ (80003b8 <MX_TIM2_Init+0x104>)
 8000308:	2200      	movs	r2, #0
 800030a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800030c:	482a      	ldr	r0, [pc, #168]	@ (80003b8 <MX_TIM2_Init+0x104>)
 800030e:	f001 fc8d 	bl	8001c2c <HAL_TIM_Base_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000318:	f000 fb00 	bl	800091c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800031c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000320:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000322:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000326:	4619      	mov	r1, r3
 8000328:	4823      	ldr	r0, [pc, #140]	@ (80003b8 <MX_TIM2_Init+0x104>)
 800032a:	f002 f849 	bl	80023c0 <HAL_TIM_ConfigClockSource>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000334:	f000 faf2 	bl	800091c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000338:	481f      	ldr	r0, [pc, #124]	@ (80003b8 <MX_TIM2_Init+0x104>)
 800033a:	f001 fd19 	bl	8001d70 <HAL_TIM_PWM_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000344:	f000 faea 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000348:	2300      	movs	r3, #0
 800034a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800034c:	2300      	movs	r3, #0
 800034e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000350:	f107 0320 	add.w	r3, r7, #32
 8000354:	4619      	mov	r1, r3
 8000356:	4818      	ldr	r0, [pc, #96]	@ (80003b8 <MX_TIM2_Init+0x104>)
 8000358:	f002 fbc2 	bl	8002ae0 <HAL_TIMEx_MasterConfigSynchronization>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000362:	f000 fadb 	bl	800091c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000366:	2360      	movs	r3, #96	@ 0x60
 8000368:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 512;
 800036a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800036e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2200      	movs	r2, #0
 800037c:	4619      	mov	r1, r3
 800037e:	480e      	ldr	r0, [pc, #56]	@ (80003b8 <MX_TIM2_Init+0x104>)
 8000380:	f001 ff5c 	bl	800223c <HAL_TIM_PWM_ConfigChannel>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800038a:	f000 fac7 	bl	800091c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2204      	movs	r2, #4
 8000396:	4619      	mov	r1, r3
 8000398:	4807      	ldr	r0, [pc, #28]	@ (80003b8 <MX_TIM2_Init+0x104>)
 800039a:	f001 ff4f 	bl	800223c <HAL_TIM_PWM_ConfigChannel>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 80003a4:	f000 faba 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003a8:	4803      	ldr	r0, [pc, #12]	@ (80003b8 <MX_TIM2_Init+0x104>)
 80003aa:	f000 fb11 	bl	80009d0 <HAL_TIM_MspPostInit>

}
 80003ae:	bf00      	nop
 80003b0:	3738      	adds	r7, #56	@ 0x38
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000284 	.word	0x20000284

080003bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c0:	4b13      	ldr	r3, [pc, #76]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003c2:	4a14      	ldr	r2, [pc, #80]	@ (8000414 <MX_USART1_UART_Init+0x58>)
 80003c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003c6:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80003cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ce:	4b10      	ldr	r3, [pc, #64]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003da:	4b0d      	ldr	r3, [pc, #52]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003e2:	220c      	movs	r2, #12
 80003e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ec:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003f2:	4807      	ldr	r0, [pc, #28]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003f4:	f002 fbe4 	bl	8002bc0 <HAL_UART_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003fe:	f000 fa8d 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, rxBuffer, RX_BUFFER_SIZE);
 8000402:	2202      	movs	r2, #2
 8000404:	4904      	ldr	r1, [pc, #16]	@ (8000418 <MX_USART1_UART_Init+0x5c>)
 8000406:	4802      	ldr	r0, [pc, #8]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 8000408:	f002 fc2a 	bl	8002c60 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	200002cc 	.word	0x200002cc
 8000414:	40013800 	.word	0x40013800
 8000418:	2000031c 	.word	0x2000031c

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000430:	4b34      	ldr	r3, [pc, #208]	@ (8000504 <MX_GPIO_Init+0xe8>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a33      	ldr	r2, [pc, #204]	@ (8000504 <MX_GPIO_Init+0xe8>)
 8000436:	f043 0310 	orr.w	r3, r3, #16
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b31      	ldr	r3, [pc, #196]	@ (8000504 <MX_GPIO_Init+0xe8>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0310 	and.w	r3, r3, #16
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000448:	4b2e      	ldr	r3, [pc, #184]	@ (8000504 <MX_GPIO_Init+0xe8>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a2d      	ldr	r2, [pc, #180]	@ (8000504 <MX_GPIO_Init+0xe8>)
 800044e:	f043 0320 	orr.w	r3, r3, #32
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b2b      	ldr	r3, [pc, #172]	@ (8000504 <MX_GPIO_Init+0xe8>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0320 	and.w	r3, r3, #32
 800045c:	60bb      	str	r3, [r7, #8]
 800045e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	4b28      	ldr	r3, [pc, #160]	@ (8000504 <MX_GPIO_Init+0xe8>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a27      	ldr	r2, [pc, #156]	@ (8000504 <MX_GPIO_Init+0xe8>)
 8000466:	f043 0304 	orr.w	r3, r3, #4
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b25      	ldr	r3, [pc, #148]	@ (8000504 <MX_GPIO_Init+0xe8>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0304 	and.w	r3, r3, #4
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000478:	4b22      	ldr	r3, [pc, #136]	@ (8000504 <MX_GPIO_Init+0xe8>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a21      	ldr	r2, [pc, #132]	@ (8000504 <MX_GPIO_Init+0xe8>)
 800047e:	f043 0308 	orr.w	r3, r3, #8
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b1f      	ldr	r3, [pc, #124]	@ (8000504 <MX_GPIO_Init+0xe8>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0308 	and.w	r3, r3, #8
 800048c:	603b      	str	r3, [r7, #0]
 800048e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000496:	481c      	ldr	r0, [pc, #112]	@ (8000508 <MX_GPIO_Init+0xec>)
 8000498:	f000 ff6f 	bl	800137a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|STEPPER1_DIR_Pin|STEPPER1_STEP_Pin|STEPPER2_DIR_Pin
 800049c:	2200      	movs	r2, #0
 800049e:	21f1      	movs	r1, #241	@ 0xf1
 80004a0:	481a      	ldr	r0, [pc, #104]	@ (800050c <MX_GPIO_Init+0xf0>)
 80004a2:	f000 ff6a 	bl	800137a <HAL_GPIO_WritePin>
                          |STEPPER2_STEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ac:	2301      	movs	r3, #1
 80004ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b4:	2302      	movs	r3, #2
 80004b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	4619      	mov	r1, r3
 80004be:	4812      	ldr	r0, [pc, #72]	@ (8000508 <MX_GPIO_Init+0xec>)
 80004c0:	f000 fdc0 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 STEPPER1_DIR_Pin STEPPER1_STEP_Pin STEPPER2_DIR_Pin
                           STEPPER2_STEP_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|STEPPER1_DIR_Pin|STEPPER1_STEP_Pin|STEPPER2_DIR_Pin
 80004c4:	23f1      	movs	r3, #241	@ 0xf1
 80004c6:	613b      	str	r3, [r7, #16]
                          |STEPPER2_STEP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c8:	2301      	movs	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d0:	2302      	movs	r3, #2
 80004d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	480c      	ldr	r0, [pc, #48]	@ (800050c <MX_GPIO_Init+0xf0>)
 80004dc:	f000 fdb2 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : switch1_Pin switch2_Pin */
  GPIO_InitStruct.Pin = switch1_Pin|switch2_Pin;
 80004e0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80004e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4619      	mov	r1, r3
 80004f4:	4805      	ldr	r0, [pc, #20]	@ (800050c <MX_GPIO_Init+0xf0>)
 80004f6:	f000 fda5 	bl	8001044 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004fa:	bf00      	nop
 80004fc:	3720      	adds	r7, #32
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000
 8000508:	40011000 	.word	0x40011000
 800050c:	40010c00 	.word	0x40010c00

08000510 <HAL_UART_RxCpltCallback>:
/**
  * @brief  This function starting when messege is starting to arrive. Then the function pushing the messege to xQueueUART
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a12      	ldr	r2, [pc, #72]	@ (8000568 <HAL_UART_RxCpltCallback+0x58>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d106      	bne.n	8000530 <HAL_UART_RxCpltCallback+0x20>
   if(xQueueSendFromISR(xQueueUART, rxBuffer, NULL) == errQUEUE_FULL){
 8000522:	4b12      	ldr	r3, [pc, #72]	@ (800056c <HAL_UART_RxCpltCallback+0x5c>)
 8000524:	6818      	ldr	r0, [r3, #0]
 8000526:	2300      	movs	r3, #0
 8000528:	2200      	movs	r2, #0
 800052a:	4911      	ldr	r1, [pc, #68]	@ (8000570 <HAL_UART_RxCpltCallback+0x60>)
 800052c:	f003 fa48 	bl	80039c0 <xQueueGenericSendFromISR>

    The place for the interpertation can be when the program pull it from the Queue
    */

  }
  if( !taskSuspendFlag ){
 8000530:	4b10      	ldr	r3, [pc, #64]	@ (8000574 <HAL_UART_RxCpltCallback+0x64>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d10e      	bne.n	8000556 <HAL_UART_RxCpltCallback+0x46>
	  vTaskResume(xHandleMainTask);
 8000538:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <HAL_UART_RxCpltCallback+0x68>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f003 ff49 	bl	80043d4 <vTaskResume>
	  taskSuspendFlag = !taskSuspendFlag;
 8000542:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <HAL_UART_RxCpltCallback+0x64>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	bf0c      	ite	eq
 800054a:	2301      	moveq	r3, #1
 800054c:	2300      	movne	r3, #0
 800054e:	b2db      	uxtb	r3, r3
 8000550:	461a      	mov	r2, r3
 8000552:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <HAL_UART_RxCpltCallback+0x64>)
 8000554:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Receive_IT(huart, rxBuffer, RX_BUFFER_SIZE);
 8000556:	2202      	movs	r2, #2
 8000558:	4905      	ldr	r1, [pc, #20]	@ (8000570 <HAL_UART_RxCpltCallback+0x60>)
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f002 fb80 	bl	8002c60 <HAL_UART_Receive_IT>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40013800 	.word	0x40013800
 800056c:	20000318 	.word	0x20000318
 8000570:	2000031c 	.word	0x2000031c
 8000574:	20000000 	.word	0x20000000
 8000578:	20000314 	.word	0x20000314

0800057c <callibration>:
/** 
  *@brief function moves the Sorting tray until the switch is close
  *@note the function changes the trayPosition global variable
  *@retval int status: 1 OK, 0 Error
*/
void callibration(){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

  int switchFlag = HAL_GPIO_ReadPin(switch1_GPIO_Port, switch1_Pin);
 8000582:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000586:	481a      	ldr	r0, [pc, #104]	@ (80005f0 <callibration+0x74>)
 8000588:	f000 fee0 	bl	800134c <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(STEPPER1_DIR_GPIO_Port, STEPPER1_DIR_Pin, BACKWARDS); // UP to the top position
 8000590:	2200      	movs	r2, #0
 8000592:	2110      	movs	r1, #16
 8000594:	4816      	ldr	r0, [pc, #88]	@ (80005f0 <callibration+0x74>)
 8000596:	f000 fef0 	bl	800137a <HAL_GPIO_WritePin>
  
  for (uint16_t i = 0; i < MAX_STEPS && switchFlag; i++)
 800059a:	2300      	movs	r3, #0
 800059c:	807b      	strh	r3, [r7, #2]
 800059e:	e019      	b.n	80005d4 <callibration+0x58>
  {
    HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2120      	movs	r1, #32
 80005a4:	4812      	ldr	r0, [pc, #72]	@ (80005f0 <callibration+0x74>)
 80005a6:	f000 fee8 	bl	800137a <HAL_GPIO_WritePin>
    vTaskDelay(pdMS_TO_TICKS(STEP_DELAY_MS)); // Delay to allow stepper driver to register step
 80005aa:	200a      	movs	r0, #10
 80005ac:	f003 fe0c 	bl	80041c8 <vTaskDelay>
    HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2120      	movs	r1, #32
 80005b4:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <callibration+0x74>)
 80005b6:	f000 fee0 	bl	800137a <HAL_GPIO_WritePin>
    vTaskDelay(pdMS_TO_TICKS(STEP_DELAY_MS)); // Delay between steps
 80005ba:	200a      	movs	r0, #10
 80005bc:	f003 fe04 	bl	80041c8 <vTaskDelay>
    switchFlag = HAL_GPIO_ReadPin(switch1_GPIO_Port, switch1_Pin);
 80005c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005c4:	480a      	ldr	r0, [pc, #40]	@ (80005f0 <callibration+0x74>)
 80005c6:	f000 fec1 	bl	800134c <HAL_GPIO_ReadPin>
 80005ca:	4603      	mov	r3, r0
 80005cc:	607b      	str	r3, [r7, #4]
  for (uint16_t i = 0; i < MAX_STEPS && switchFlag; i++)
 80005ce:	887b      	ldrh	r3, [r7, #2]
 80005d0:	3301      	adds	r3, #1
 80005d2:	807b      	strh	r3, [r7, #2]
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80005da:	d202      	bcs.n	80005e2 <callibration+0x66>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1de      	bne.n	80005a0 <callibration+0x24>
  }
  
  trayPosition = 0;
 80005e2:	4b04      	ldr	r3, [pc, #16]	@ (80005f4 <callibration+0x78>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	801a      	strh	r2, [r3, #0]
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40010c00 	.word	0x40010c00
 80005f4:	20000322 	.word	0x20000322

080005f8 <calculateStepsToLevel>:
  *@brief calculate the steps to the next level
  *@param level_to_go: The level to go to
  *@note the current level is the global trayPosition
  *@retval steps to go. positive is down, negative is up // Can be changed.
*/
int calculateStepsToLevel(int level_to_go){
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  switch (level_to_go)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3b01      	subs	r3, #1
 8000604:	2b03      	cmp	r3, #3
 8000606:	d823      	bhi.n	8000650 <calculateStepsToLevel+0x58>
 8000608:	a201      	add	r2, pc, #4	@ (adr r2, 8000610 <calculateStepsToLevel+0x18>)
 800060a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060e:	bf00      	nop
 8000610:	08000621 	.word	0x08000621
 8000614:	0800062d 	.word	0x0800062d
 8000618:	08000639 	.word	0x08000639
 800061c:	08000645 	.word	0x08000645
  {
  case 1:
    return FIRST_LEVEL_POS - trayPosition;
 8000620:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <calculateStepsToLevel+0x64>)
 8000622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000626:	f1c3 0301 	rsb	r3, r3, #1
 800062a:	e012      	b.n	8000652 <calculateStepsToLevel+0x5a>
    break;
  case 2:
    return SECOND_LEVEL_POS - trayPosition;
 800062c:	4b0b      	ldr	r3, [pc, #44]	@ (800065c <calculateStepsToLevel+0x64>)
 800062e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000632:	f1c3 0302 	rsb	r3, r3, #2
 8000636:	e00c      	b.n	8000652 <calculateStepsToLevel+0x5a>
    break;
  case 3:
    return THIRD_LEVEL_POS - trayPosition;
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <calculateStepsToLevel+0x64>)
 800063a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800063e:	f1c3 0303 	rsb	r3, r3, #3
 8000642:	e006      	b.n	8000652 <calculateStepsToLevel+0x5a>
    break;
  case 4:
    return FOURTH_LEVEL_POS - trayPosition;
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <calculateStepsToLevel+0x64>)
 8000646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800064a:	f1c3 0304 	rsb	r3, r3, #4
 800064e:	e000      	b.n	8000652 <calculateStepsToLevel+0x5a>
    break;
  
  default:
    return 0;
 8000650:	2300      	movs	r3, #0
    break;
  }
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	20000322 	.word	0x20000322

08000660 <StepperMove>:
/** 
  *@brief moving the Sorting Tray to position
  *@param stepsToDir: the number of steps to the next position.
  *@retval  None
*/
void StepperMove (int stepsToDir){
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t steps;
  uint8_t direction;
  if(stepsToDir > 0){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	dd04      	ble.n	8000678 <StepperMove+0x18>
    direction = GPIO_PIN_SET;
 800066e:	2301      	movs	r3, #1
 8000670:	74fb      	strb	r3, [r7, #19]
    steps = stepsToDir;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	e004      	b.n	8000682 <StepperMove+0x22>
  } else {
    direction = GPIO_PIN_RESET;
 8000678:	2300      	movs	r3, #0
 800067a:	74fb      	strb	r3, [r7, #19]
    steps = stepsToDir * -1;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	425b      	negs	r3, r3
 8000680:	617b      	str	r3, [r7, #20]
  }

  HAL_GPIO_WritePin(STEPPER1_DIR_GPIO_Port, STEPPER1_DIR_Pin, direction); // (direction ? GPIO_PIN_SET : GPIO_PIN_RESET)
 8000682:	7cfb      	ldrb	r3, [r7, #19]
 8000684:	461a      	mov	r2, r3
 8000686:	2110      	movs	r1, #16
 8000688:	4818      	ldr	r0, [pc, #96]	@ (80006ec <StepperMove+0x8c>)
 800068a:	f000 fe76 	bl	800137a <HAL_GPIO_WritePin>

  for (uint32_t i = 0; i < steps; i++)
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	e022      	b.n	80006da <StepperMove+0x7a>
  {
    HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2120      	movs	r1, #32
 8000698:	4814      	ldr	r0, [pc, #80]	@ (80006ec <StepperMove+0x8c>)
 800069a:	f000 fe6e 	bl	800137a <HAL_GPIO_WritePin>
    vTaskDelay(pdMS_TO_TICKS(STEP_DELAY_MS)); // Delay to allow stepper driver to register step
 800069e:	200a      	movs	r0, #10
 80006a0:	f003 fd92 	bl	80041c8 <vTaskDelay>
    HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2120      	movs	r1, #32
 80006a8:	4810      	ldr	r0, [pc, #64]	@ (80006ec <StepperMove+0x8c>)
 80006aa:	f000 fe66 	bl	800137a <HAL_GPIO_WritePin>
    vTaskDelay(pdMS_TO_TICKS(STEP_DELAY_MS)); // Delay between steps
 80006ae:	200a      	movs	r0, #10
 80006b0:	f003 fd8a 	bl	80041c8 <vTaskDelay>

    trayPosition += direction ? 1 : (-1) ;
 80006b4:	7cfb      	ldrb	r3, [r7, #19]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <StepperMove+0x5e>
 80006ba:	2201      	movs	r2, #1
 80006bc:	e001      	b.n	80006c2 <StepperMove+0x62>
 80006be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <StepperMove+0x90>)
 80006c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	4413      	add	r3, r2
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	b21a      	sxth	r2, r3
 80006d0:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <StepperMove+0x90>)
 80006d2:	801a      	strh	r2, [r3, #0]
  for (uint32_t i = 0; i < steps; i++)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d3d8      	bcc.n	8000694 <StepperMove+0x34>
  }
}
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40010c00 	.word	0x40010c00
 80006f0:	20000322 	.word	0x20000322

080006f4 <pullingHandlePush>:
/***** Pulling Handle Push Function ########################################*/
/** 
  *@brief Pushing the cards back to the Feeding Tray
  *@retval  None
*/
void pullingHandlePush(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
  int steps = 100; //! edit to the right steps number
 80006fa:	2364      	movs	r3, #100	@ 0x64
 80006fc:	607b      	str	r3, [r7, #4]
  for (uint8_t dir = 1; dir >= 0 ; dir--)
 80006fe:	2301      	movs	r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
  {
    HAL_GPIO_WritePin(STEPPER1_DIR_GPIO_Port, STEPPER1_DIR_Pin, dir); 
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	461a      	mov	r2, r3
 8000706:	2110      	movs	r1, #16
 8000708:	4810      	ldr	r0, [pc, #64]	@ (800074c <pullingHandlePush+0x58>)
 800070a:	f000 fe36 	bl	800137a <HAL_GPIO_WritePin>
    for (uint32_t i = 0; i < steps; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	e012      	b.n	800073a <pullingHandlePush+0x46>
    {
      HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2120      	movs	r1, #32
 8000718:	480c      	ldr	r0, [pc, #48]	@ (800074c <pullingHandlePush+0x58>)
 800071a:	f000 fe2e 	bl	800137a <HAL_GPIO_WritePin>
      vTaskDelay(pdMS_TO_TICKS(STEP_DELAY_MS)); // Delay to allow stepper driver to register step
 800071e:	200a      	movs	r0, #10
 8000720:	f003 fd52 	bl	80041c8 <vTaskDelay>
      HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2120      	movs	r1, #32
 8000728:	4808      	ldr	r0, [pc, #32]	@ (800074c <pullingHandlePush+0x58>)
 800072a:	f000 fe26 	bl	800137a <HAL_GPIO_WritePin>
      vTaskDelay(pdMS_TO_TICKS(STEP_DELAY_MS)); // Delay between steps
 800072e:	200a      	movs	r0, #10
 8000730:	f003 fd4a 	bl	80041c8 <vTaskDelay>
    for (uint32_t i = 0; i < steps; i++)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	3301      	adds	r3, #1
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	429a      	cmp	r2, r3
 8000740:	d3e8      	bcc.n	8000714 <pullingHandlePush+0x20>
  for (uint8_t dir = 1; dir >= 0 ; dir--)
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	3b01      	subs	r3, #1
 8000746:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(STEPPER1_DIR_GPIO_Port, STEPPER1_DIR_Pin, dir); 
 8000748:	e7db      	b.n	8000702 <pullingHandlePush+0xe>
 800074a:	bf00      	nop
 800074c:	40010c00 	.word	0x40010c00

08000750 <cardPushSpin>:

/** 
  *@brief Pushing one card from the main deck
  *@retval  None
*/
void cardPushSpin(){
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
  int switchFlag = 0; // switch is open
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
	TIM2->CCR1 = 100;
 800075a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800075e:	2264      	movs	r2, #100	@ 0x64
 8000760:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000762:	2100      	movs	r1, #0
 8000764:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <cardPushSpin+0x50>)
 8000766:	f001 fb5b 	bl	8001e20 <HAL_TIM_PWM_Start>

  for (uint8_t i = 0; i <= 255 && !switchFlag; i++)
 800076a:	2300      	movs	r3, #0
 800076c:	70fb      	strb	r3, [r7, #3]
 800076e:	e00c      	b.n	800078a <cardPushSpin+0x3a>
  {
    vTaskDelay(pdMS_TO_TICKS(10));
 8000770:	200a      	movs	r0, #10
 8000772:	f003 fd29 	bl	80041c8 <vTaskDelay>
    switchFlag = HAL_GPIO_ReadPin(switch1_GPIO_Port, switch1_Pin);
 8000776:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800077a:	480a      	ldr	r0, [pc, #40]	@ (80007a4 <cardPushSpin+0x54>)
 800077c:	f000 fde6 	bl	800134c <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i <= 255 && !switchFlag; i++)
 8000784:	78fb      	ldrb	r3, [r7, #3]
 8000786:	3301      	adds	r3, #1
 8000788:	70fb      	strb	r3, [r7, #3]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0ef      	beq.n	8000770 <cardPushSpin+0x20>
  }

  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000790:	2100      	movs	r1, #0
 8000792:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <cardPushSpin+0x50>)
 8000794:	f001 fbe6 	bl	8001f64 <HAL_TIM_PWM_Stop>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000284 	.word	0x20000284
 80007a4:	40010c00 	.word	0x40010c00

080007a8 <getMessege>:
  theMessege.Error = (buffer[0] >> 5) & 0x07;

  return theMessege;
}

BaseType_t getMessege(int numOfLoops){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  //xQueue receive
  BaseType_t res = pdFALSE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < numOfLoops && !res; i++)
 80007b4:	2300      	movs	r3, #0
 80007b6:	72fb      	strb	r3, [r7, #11]
 80007b8:	e035      	b.n	8000826 <getMessege+0x7e>
  {
    res = xQueueReceive(xQueueUART, pvBuffer, pdMS_TO_TICKS(100));
 80007ba:	4b21      	ldr	r3, [pc, #132]	@ (8000840 <getMessege+0x98>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2264      	movs	r2, #100	@ 0x64
 80007c0:	4920      	ldr	r1, [pc, #128]	@ (8000844 <getMessege+0x9c>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 f998 	bl	8003af8 <xQueueReceive>
 80007c8:	60f8      	str	r0, [r7, #12]

    if (res == pdPASS){
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d127      	bne.n	8000820 <getMessege+0x78>
      theMessege.tray = pvBuffer[0] & 0x03;
 80007d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <getMessege+0x9c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f003 0303 	and.w	r3, r3, #3
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <getMessege+0xa0>)
 80007dc:	701a      	strb	r2, [r3, #0]
      theMessege.flag_moreCards = (pvBuffer[0] >> 2) & 0x01;
 80007de:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <getMessege+0x9c>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	089b      	lsrs	r3, r3, #2
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <getMessege+0xa0>)
 80007ee:	705a      	strb	r2, [r3, #1]
      theMessege.flag_notEnd = (pvBuffer[0] >> 3) & 0x01;
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <getMessege+0x9c>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	08db      	lsrs	r3, r3, #3
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <getMessege+0xa0>)
 8000800:	709a      	strb	r2, [r3, #2]
      theMessege.flag_start = (pvBuffer[0] >> 4) & 0x01;
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <getMessege+0x9c>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	091b      	lsrs	r3, r3, #4
 8000808:	b2db      	uxtb	r3, r3
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b0d      	ldr	r3, [pc, #52]	@ (8000848 <getMessege+0xa0>)
 8000812:	70da      	strb	r2, [r3, #3]
      theMessege.Error = (pvBuffer[0] >> 5) & 0x07;
 8000814:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <getMessege+0x9c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	095b      	lsrs	r3, r3, #5
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <getMessege+0xa0>)
 800081e:	711a      	strb	r2, [r3, #4]
  for (uint8_t i = 0; i < numOfLoops && !res; i++)
 8000820:	7afb      	ldrb	r3, [r7, #11]
 8000822:	3301      	adds	r3, #1
 8000824:	72fb      	strb	r3, [r7, #11]
 8000826:	7afb      	ldrb	r3, [r7, #11]
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	429a      	cmp	r2, r3
 800082c:	dd02      	ble.n	8000834 <getMessege+0x8c>
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d0c2      	beq.n	80007ba <getMessege+0x12>
    }
  }
  return res;
 8000834:	68fb      	ldr	r3, [r7, #12]
  
}
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000318 	.word	0x20000318
 8000844:	20000320 	.word	0x20000320
 8000848:	20000324 	.word	0x20000324

0800084c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *pvParameters)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  }
  The UART interrupt will wake the function again, so everything needs to be inside.
  
  */
  
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800085a:	4822      	ldr	r0, [pc, #136]	@ (80008e4 <StartDefaultTask+0x98>)
 800085c:	f000 fd8d 	bl	800137a <HAL_GPIO_WritePin>
  callibration();
 8000860:	f7ff fe8c 	bl	800057c <callibration>
  
  // for(uint_8 i = 0; i < 15 && xQueueReceive(xQueueUART, pvBuffer, pdMS_TO_TICKS(100)) == pdFalse; i++){
  //   vTaskDelay(pdMS_TO_TICKS(100));
  // } // Order to start the process
  // getMessegeInterpret(pvBuffer);
  if (getMessege(25) == pdFAIL){
 8000864:	2019      	movs	r0, #25
 8000866:	f7ff ff9f 	bl	80007a8 <getMessege>

  
  /* Infinite loop */
  for(;;)
  {
    mainLoop1:
 800086a:	e000      	b.n	800086e <StartDefaultTask+0x22>
    TODO: If statment about what to do:
    another card will be "goto mainloop;"
    done will just continue
    */
    if(theMessege.flag_notEnd){
    	goto mainLoop1;
 800086c:	bf00      	nop
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);//Starting the PWM of the roller motor
 800086e:	2104      	movs	r1, #4
 8000870:	481d      	ldr	r0, [pc, #116]	@ (80008e8 <StartDefaultTask+0x9c>)
 8000872:	f001 fad5 	bl	8001e20 <HAL_TIM_PWM_Start>
    if (getMessege(15) == pdFAIL){
 8000876:	200f      	movs	r0, #15
 8000878:	f7ff ff96 	bl	80007a8 <getMessege>
    mainLoop2:
 800087c:	bf00      	nop
    StepperMove(calculateStepsToLevel(theMessege.tray));//move Sorting Tray to position
 800087e:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <StartDefaultTask+0xa0>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff feb8 	bl	80005f8 <calculateStepsToLevel>
 8000888:	4603      	mov	r3, r0
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fee8 	bl	8000660 <StepperMove>
    cardPushSpin();//starting one loop of the PWM of the pushing DC motor
 8000890:	f7ff ff5e 	bl	8000750 <cardPushSpin>
    vTaskDelay(pdMS_TO_TICKS(1000));// To make sure the card at the place
 8000894:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000898:	f003 fc96 	bl	80041c8 <vTaskDelay>
    if (getMessege(15) == pdFAIL){
 800089c:	200f      	movs	r0, #15
 800089e:	f7ff ff83 	bl	80007a8 <getMessege>
    if(theMessege.flag_moreCards){
 80008a2:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <StartDefaultTask+0xa0>)
 80008a4:	785b      	ldrb	r3, [r3, #1]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d000      	beq.n	80008ac <StartDefaultTask+0x60>
    	goto mainLoop2;
 80008aa:	e7e8      	b.n	800087e <StartDefaultTask+0x32>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);// Stop PWM of the DC motor of the roller
 80008ac:	2104      	movs	r1, #4
 80008ae:	480e      	ldr	r0, [pc, #56]	@ (80008e8 <StartDefaultTask+0x9c>)
 80008b0:	f001 fb58 	bl	8001f64 <HAL_TIM_PWM_Stop>
    pullingHandlePush();//pulling back cards to the Feeding tray
 80008b4:	f7ff ff1e 	bl	80006f4 <pullingHandlePush>
    if (getMessege(15) == pdFAIL){
 80008b8:	200f      	movs	r0, #15
 80008ba:	f7ff ff75 	bl	80007a8 <getMessege>
    if(theMessege.flag_notEnd){
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <StartDefaultTask+0xa0>)
 80008c0:	789b      	ldrb	r3, [r3, #2]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1d2      	bne.n	800086c <StartDefaultTask+0x20>
    }
  
  
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);//Turn on end indicator light
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008cc:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <StartDefaultTask+0x98>)
 80008ce:	f000 fd54 	bl	800137a <HAL_GPIO_WritePin>
    taskSuspendFlag = 0;
 80008d2:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <StartDefaultTask+0xa4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
    vTaskSuspend(xHandleMainTask);
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <StartDefaultTask+0xa8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fca9 	bl	8004234 <vTaskSuspend>
    mainLoop1:
 80008e2:	e7c4      	b.n	800086e <StartDefaultTask+0x22>
 80008e4:	40011000 	.word	0x40011000
 80008e8:	20000284 	.word	0x20000284
 80008ec:	20000324 	.word	0x20000324
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000314 	.word	0x20000314

080008f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a04      	ldr	r2, [pc, #16]	@ (8000918 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d101      	bne.n	800090e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800090a:	f000 f9d3 	bl	8000cb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40000800 	.word	0x40000800

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <Error_Handler+0x8>

08000928 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800092e:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <HAL_MspInit+0x68>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	4a17      	ldr	r2, [pc, #92]	@ (8000990 <HAL_MspInit+0x68>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6193      	str	r3, [r2, #24]
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <HAL_MspInit+0x68>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <HAL_MspInit+0x68>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	4a11      	ldr	r2, [pc, #68]	@ (8000990 <HAL_MspInit+0x68>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000950:	61d3      	str	r3, [r2, #28]
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <HAL_MspInit+0x68>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	210f      	movs	r1, #15
 8000962:	f06f 0001 	mvn.w	r0, #1
 8000966:	f000 fa8c 	bl	8000e82 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <HAL_MspInit+0x6c>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	4a04      	ldr	r2, [pc, #16]	@ (8000994 <HAL_MspInit+0x6c>)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	40010000 	.word	0x40010000

08000998 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009a8:	d10b      	bne.n	80009c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <HAL_TIM_Base_MspInit+0x34>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a07      	ldr	r2, [pc, #28]	@ (80009cc <HAL_TIM_Base_MspInit+0x34>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <HAL_TIM_Base_MspInit+0x34>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009ee:	d117      	bne.n	8000a20 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <HAL_TIM_MspPostInit+0x58>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000a28 <HAL_TIM_MspPostInit+0x58>)
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <HAL_TIM_MspPostInit+0x58>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0304 	and.w	r3, r3, #4
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DC_PWM1_Pin|DC_PWM2_Pin;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <HAL_TIM_MspPostInit+0x5c>)
 8000a1c:	f000 fb12 	bl	8001044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40010800 	.word	0x40010800

08000a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a20      	ldr	r2, [pc, #128]	@ (8000acc <HAL_UART_MspInit+0x9c>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d139      	bne.n	8000ac4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <HAL_UART_MspInit+0xa0>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad0 <HAL_UART_MspInit+0xa0>)
 8000a56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <HAL_UART_MspInit+0xa0>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <HAL_UART_MspInit+0xa0>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a18      	ldr	r2, [pc, #96]	@ (8000ad0 <HAL_UART_MspInit+0xa0>)
 8000a6e:	f043 0304 	orr.w	r3, r3, #4
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <HAL_UART_MspInit+0xa0>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f003 0304 	and.w	r3, r3, #4
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4619      	mov	r1, r3
 8000a94:	480f      	ldr	r0, [pc, #60]	@ (8000ad4 <HAL_UART_MspInit+0xa4>)
 8000a96:	f000 fad5 	bl	8001044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4619      	mov	r1, r3
 8000aae:	4809      	ldr	r0, [pc, #36]	@ (8000ad4 <HAL_UART_MspInit+0xa4>)
 8000ab0:	f000 fac8 	bl	8001044 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2105      	movs	r1, #5
 8000ab8:	2025      	movs	r0, #37	@ 0x25
 8000aba:	f000 f9e2 	bl	8000e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000abe:	2025      	movs	r0, #37	@ 0x25
 8000ac0:	f000 f9fb 	bl	8000eba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3720      	adds	r7, #32
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40013800 	.word	0x40013800
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40010800 	.word	0x40010800

08000ad8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08e      	sub	sp, #56	@ 0x38
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000aee:	4b34      	ldr	r3, [pc, #208]	@ (8000bc0 <HAL_InitTick+0xe8>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	4a33      	ldr	r2, [pc, #204]	@ (8000bc0 <HAL_InitTick+0xe8>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	61d3      	str	r3, [r2, #28]
 8000afa:	4b31      	ldr	r3, [pc, #196]	@ (8000bc0 <HAL_InitTick+0xe8>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b06:	f107 0210 	add.w	r2, r7, #16
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 f83d 	bl	8001b90 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b16:	6a3b      	ldr	r3, [r7, #32]
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d103      	bne.n	8000b28 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b20:	f001 f80e 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 8000b24:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b26:	e004      	b.n	8000b32 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b28:	f001 f80a 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b34:	4a23      	ldr	r2, [pc, #140]	@ (8000bc4 <HAL_InitTick+0xec>)
 8000b36:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3a:	0c9b      	lsrs	r3, r3, #18
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000b40:	4b21      	ldr	r3, [pc, #132]	@ (8000bc8 <HAL_InitTick+0xf0>)
 8000b42:	4a22      	ldr	r2, [pc, #136]	@ (8000bcc <HAL_InitTick+0xf4>)
 8000b44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000b46:	4b20      	ldr	r3, [pc, #128]	@ (8000bc8 <HAL_InitTick+0xf0>)
 8000b48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b4c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc8 <HAL_InitTick+0xf0>)
 8000b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b52:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000b54:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc8 <HAL_InitTick+0xf0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc8 <HAL_InitTick+0xf0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b60:	4b19      	ldr	r3, [pc, #100]	@ (8000bc8 <HAL_InitTick+0xf0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000b66:	4818      	ldr	r0, [pc, #96]	@ (8000bc8 <HAL_InitTick+0xf0>)
 8000b68:	f001 f860 	bl	8001c2c <HAL_TIM_Base_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b72:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d11b      	bne.n	8000bb2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000b7a:	4813      	ldr	r0, [pc, #76]	@ (8000bc8 <HAL_InitTick+0xf0>)
 8000b7c:	f001 f8a6 	bl	8001ccc <HAL_TIM_Base_Start_IT>
 8000b80:	4603      	mov	r3, r0
 8000b82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d111      	bne.n	8000bb2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b8e:	201e      	movs	r0, #30
 8000b90:	f000 f993 	bl	8000eba <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b0f      	cmp	r3, #15
 8000b98:	d808      	bhi.n	8000bac <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	201e      	movs	r0, #30
 8000ba0:	f000 f96f 	bl	8000e82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <HAL_InitTick+0xf8>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	e002      	b.n	8000bb2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bb2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3738      	adds	r7, #56	@ 0x38
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	431bde83 	.word	0x431bde83
 8000bc8:	20000330 	.word	0x20000330
 8000bcc:	40000800 	.word	0x40000800
 8000bd0:	20000008 	.word	0x20000008

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <NMI_Handler+0x4>

08000bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <MemManage_Handler+0x4>

08000bec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c0c:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <TIM4_IRQHandler+0x10>)
 8000c0e:	f001 fa0d 	bl	800202c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000330 	.word	0x20000330

08000c1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c20:	4802      	ldr	r0, [pc, #8]	@ (8000c2c <USART1_IRQHandler+0x10>)
 8000c22:	f002 f843 	bl	8002cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200002cc 	.word	0x200002cc

08000c30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c3c:	f7ff fff8 	bl	8000c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c40:	480b      	ldr	r0, [pc, #44]	@ (8000c70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c42:	490c      	ldr	r1, [pc, #48]	@ (8000c74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c44:	4a0c      	ldr	r2, [pc, #48]	@ (8000c78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a09      	ldr	r2, [pc, #36]	@ (8000c7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c58:	4c09      	ldr	r4, [pc, #36]	@ (8000c80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c66:	f004 fd09 	bl	800567c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c6a:	f7ff fa89 	bl	8000180 <main>
  bx lr
 8000c6e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c78:	08005740 	.word	0x08005740
  ldr r2, =_sbss
 8000c7c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c80:	200010c8 	.word	0x200010c8

08000c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC1_2_IRQHandler>
	...

08000c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <HAL_Init+0x28>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a07      	ldr	r2, [pc, #28]	@ (8000cb0 <HAL_Init+0x28>)
 8000c92:	f043 0310 	orr.w	r3, r3, #16
 8000c96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 f8e7 	bl	8000e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9e:	200f      	movs	r0, #15
 8000ca0:	f7ff ff1a 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff fe40 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40022000 	.word	0x40022000

08000cb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb8:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <HAL_IncTick+0x1c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <HAL_IncTick+0x20>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a03      	ldr	r2, [pc, #12]	@ (8000cd4 <HAL_IncTick+0x20>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	2000000c 	.word	0x2000000c
 8000cd4:	20000378 	.word	0x20000378

08000cd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b02      	ldr	r3, [pc, #8]	@ (8000ce8 <HAL_GetTick+0x10>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	20000378 	.word	0x20000378

08000cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1e:	4a04      	ldr	r2, [pc, #16]	@ (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	60d3      	str	r3, [r2, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d38:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <__NVIC_GetPriorityGrouping+0x18>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	f003 0307 	and.w	r3, r3, #7
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db0b      	blt.n	8000d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f003 021f 	and.w	r2, r3, #31
 8000d68:	4906      	ldr	r1, [pc, #24]	@ (8000d84 <__NVIC_EnableIRQ+0x34>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	095b      	lsrs	r3, r3, #5
 8000d70:	2001      	movs	r0, #1
 8000d72:	fa00 f202 	lsl.w	r2, r0, r2
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	@ (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	@ (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	@ 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	@ 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e44:	f3bf 8f4f 	dsb	sy
}
 8000e48:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <__NVIC_SystemReset+0x24>)
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000e52:	4904      	ldr	r1, [pc, #16]	@ (8000e64 <__NVIC_SystemReset+0x24>)
 8000e54:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <__NVIC_SystemReset+0x28>)
 8000e56:	4313      	orrs	r3, r2
 8000e58:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e5a:	f3bf 8f4f 	dsb	sy
}
 8000e5e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <__NVIC_SystemReset+0x20>
 8000e64:	e000ed00 	.word	0xe000ed00
 8000e68:	05fa0004 	.word	0x05fa0004

08000e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ff39 	bl	8000cec <__NVIC_SetPriorityGrouping>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b086      	sub	sp, #24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
 8000e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e94:	f7ff ff4e 	bl	8000d34 <__NVIC_GetPriorityGrouping>
 8000e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	68b9      	ldr	r1, [r7, #8]
 8000e9e:	6978      	ldr	r0, [r7, #20]
 8000ea0:	f7ff ff9c 	bl	8000ddc <NVIC_EncodePriority>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff6b 	bl	8000d88 <__NVIC_SetPriority>
}
 8000eb2:	bf00      	nop
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff41 	bl	8000d50 <__NVIC_EnableIRQ>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000eda:	f7ff ffb1 	bl	8000e40 <__NVIC_SystemReset>

08000ede <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b085      	sub	sp, #20
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d008      	beq.n	8000f08 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2204      	movs	r2, #4
 8000efa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e020      	b.n	8000f4a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 020e 	bic.w	r2, r2, #14
 8000f16:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0201 	bic.w	r2, r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f30:	2101      	movs	r1, #1
 8000f32:	fa01 f202 	lsl.w	r2, r1, r2
 8000f36:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d005      	beq.n	8000f78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2204      	movs	r2, #4
 8000f70:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e051      	b.n	800101c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 020e 	bic.w	r2, r2, #14
 8000f86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0201 	bic.w	r2, r2, #1
 8000f96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a22      	ldr	r2, [pc, #136]	@ (8001028 <HAL_DMA_Abort_IT+0xd4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d029      	beq.n	8000ff6 <HAL_DMA_Abort_IT+0xa2>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a21      	ldr	r2, [pc, #132]	@ (800102c <HAL_DMA_Abort_IT+0xd8>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d022      	beq.n	8000ff2 <HAL_DMA_Abort_IT+0x9e>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8001030 <HAL_DMA_Abort_IT+0xdc>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d01a      	beq.n	8000fec <HAL_DMA_Abort_IT+0x98>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a1e      	ldr	r2, [pc, #120]	@ (8001034 <HAL_DMA_Abort_IT+0xe0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d012      	beq.n	8000fe6 <HAL_DMA_Abort_IT+0x92>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8001038 <HAL_DMA_Abort_IT+0xe4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00a      	beq.n	8000fe0 <HAL_DMA_Abort_IT+0x8c>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a1b      	ldr	r2, [pc, #108]	@ (800103c <HAL_DMA_Abort_IT+0xe8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d102      	bne.n	8000fda <HAL_DMA_Abort_IT+0x86>
 8000fd4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000fd8:	e00e      	b.n	8000ff8 <HAL_DMA_Abort_IT+0xa4>
 8000fda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000fde:	e00b      	b.n	8000ff8 <HAL_DMA_Abort_IT+0xa4>
 8000fe0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fe4:	e008      	b.n	8000ff8 <HAL_DMA_Abort_IT+0xa4>
 8000fe6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fea:	e005      	b.n	8000ff8 <HAL_DMA_Abort_IT+0xa4>
 8000fec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ff0:	e002      	b.n	8000ff8 <HAL_DMA_Abort_IT+0xa4>
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	e000      	b.n	8000ff8 <HAL_DMA_Abort_IT+0xa4>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	4a11      	ldr	r2, [pc, #68]	@ (8001040 <HAL_DMA_Abort_IT+0xec>)
 8000ffa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	4798      	blx	r3
    } 
  }
  return status;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40020008 	.word	0x40020008
 800102c:	4002001c 	.word	0x4002001c
 8001030:	40020030 	.word	0x40020030
 8001034:	40020044 	.word	0x40020044
 8001038:	40020058 	.word	0x40020058
 800103c:	4002006c 	.word	0x4002006c
 8001040:	40020000 	.word	0x40020000

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b08b      	sub	sp, #44	@ 0x2c
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001056:	e169      	b.n	800132c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001058:	2201      	movs	r2, #1
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	69fa      	ldr	r2, [r7, #28]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 8158 	bne.w	8001326 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	4a9a      	ldr	r2, [pc, #616]	@ (80012e4 <HAL_GPIO_Init+0x2a0>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d05e      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 8001080:	4a98      	ldr	r2, [pc, #608]	@ (80012e4 <HAL_GPIO_Init+0x2a0>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d875      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 8001086:	4a98      	ldr	r2, [pc, #608]	@ (80012e8 <HAL_GPIO_Init+0x2a4>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d058      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 800108c:	4a96      	ldr	r2, [pc, #600]	@ (80012e8 <HAL_GPIO_Init+0x2a4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d86f      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 8001092:	4a96      	ldr	r2, [pc, #600]	@ (80012ec <HAL_GPIO_Init+0x2a8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d052      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 8001098:	4a94      	ldr	r2, [pc, #592]	@ (80012ec <HAL_GPIO_Init+0x2a8>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d869      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 800109e:	4a94      	ldr	r2, [pc, #592]	@ (80012f0 <HAL_GPIO_Init+0x2ac>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d04c      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 80010a4:	4a92      	ldr	r2, [pc, #584]	@ (80012f0 <HAL_GPIO_Init+0x2ac>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d863      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 80010aa:	4a92      	ldr	r2, [pc, #584]	@ (80012f4 <HAL_GPIO_Init+0x2b0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d046      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 80010b0:	4a90      	ldr	r2, [pc, #576]	@ (80012f4 <HAL_GPIO_Init+0x2b0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d85d      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 80010b6:	2b12      	cmp	r3, #18
 80010b8:	d82a      	bhi.n	8001110 <HAL_GPIO_Init+0xcc>
 80010ba:	2b12      	cmp	r3, #18
 80010bc:	d859      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 80010be:	a201      	add	r2, pc, #4	@ (adr r2, 80010c4 <HAL_GPIO_Init+0x80>)
 80010c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c4:	0800113f 	.word	0x0800113f
 80010c8:	08001119 	.word	0x08001119
 80010cc:	0800112b 	.word	0x0800112b
 80010d0:	0800116d 	.word	0x0800116d
 80010d4:	08001173 	.word	0x08001173
 80010d8:	08001173 	.word	0x08001173
 80010dc:	08001173 	.word	0x08001173
 80010e0:	08001173 	.word	0x08001173
 80010e4:	08001173 	.word	0x08001173
 80010e8:	08001173 	.word	0x08001173
 80010ec:	08001173 	.word	0x08001173
 80010f0:	08001173 	.word	0x08001173
 80010f4:	08001173 	.word	0x08001173
 80010f8:	08001173 	.word	0x08001173
 80010fc:	08001173 	.word	0x08001173
 8001100:	08001173 	.word	0x08001173
 8001104:	08001173 	.word	0x08001173
 8001108:	08001121 	.word	0x08001121
 800110c:	08001135 	.word	0x08001135
 8001110:	4a79      	ldr	r2, [pc, #484]	@ (80012f8 <HAL_GPIO_Init+0x2b4>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d013      	beq.n	800113e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001116:	e02c      	b.n	8001172 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	623b      	str	r3, [r7, #32]
          break;
 800111e:	e029      	b.n	8001174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	3304      	adds	r3, #4
 8001126:	623b      	str	r3, [r7, #32]
          break;
 8001128:	e024      	b.n	8001174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	3308      	adds	r3, #8
 8001130:	623b      	str	r3, [r7, #32]
          break;
 8001132:	e01f      	b.n	8001174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	330c      	adds	r3, #12
 800113a:	623b      	str	r3, [r7, #32]
          break;
 800113c:	e01a      	b.n	8001174 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d102      	bne.n	800114c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001146:	2304      	movs	r3, #4
 8001148:	623b      	str	r3, [r7, #32]
          break;
 800114a:	e013      	b.n	8001174 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d105      	bne.n	8001160 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001154:	2308      	movs	r3, #8
 8001156:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69fa      	ldr	r2, [r7, #28]
 800115c:	611a      	str	r2, [r3, #16]
          break;
 800115e:	e009      	b.n	8001174 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001160:	2308      	movs	r3, #8
 8001162:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	615a      	str	r2, [r3, #20]
          break;
 800116a:	e003      	b.n	8001174 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
          break;
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x130>
          break;
 8001172:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2bff      	cmp	r3, #255	@ 0xff
 8001178:	d801      	bhi.n	800117e <HAL_GPIO_Init+0x13a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	e001      	b.n	8001182 <HAL_GPIO_Init+0x13e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3304      	adds	r3, #4
 8001182:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	2bff      	cmp	r3, #255	@ 0xff
 8001188:	d802      	bhi.n	8001190 <HAL_GPIO_Init+0x14c>
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	e002      	b.n	8001196 <HAL_GPIO_Init+0x152>
 8001190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001192:	3b08      	subs	r3, #8
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	210f      	movs	r1, #15
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	401a      	ands	r2, r3
 80011a8:	6a39      	ldr	r1, [r7, #32]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	fa01 f303 	lsl.w	r3, r1, r3
 80011b0:	431a      	orrs	r2, r3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 80b1 	beq.w	8001326 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011c4:	4b4d      	ldr	r3, [pc, #308]	@ (80012fc <HAL_GPIO_Init+0x2b8>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a4c      	ldr	r2, [pc, #304]	@ (80012fc <HAL_GPIO_Init+0x2b8>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b4a      	ldr	r3, [pc, #296]	@ (80012fc <HAL_GPIO_Init+0x2b8>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011dc:	4a48      	ldr	r2, [pc, #288]	@ (8001300 <HAL_GPIO_Init+0x2bc>)
 80011de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	3302      	adds	r3, #2
 80011e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	220f      	movs	r2, #15
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	4013      	ands	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a40      	ldr	r2, [pc, #256]	@ (8001304 <HAL_GPIO_Init+0x2c0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d013      	beq.n	8001230 <HAL_GPIO_Init+0x1ec>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a3f      	ldr	r2, [pc, #252]	@ (8001308 <HAL_GPIO_Init+0x2c4>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d00d      	beq.n	800122c <HAL_GPIO_Init+0x1e8>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a3e      	ldr	r2, [pc, #248]	@ (800130c <HAL_GPIO_Init+0x2c8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d007      	beq.n	8001228 <HAL_GPIO_Init+0x1e4>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a3d      	ldr	r2, [pc, #244]	@ (8001310 <HAL_GPIO_Init+0x2cc>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d101      	bne.n	8001224 <HAL_GPIO_Init+0x1e0>
 8001220:	2303      	movs	r3, #3
 8001222:	e006      	b.n	8001232 <HAL_GPIO_Init+0x1ee>
 8001224:	2304      	movs	r3, #4
 8001226:	e004      	b.n	8001232 <HAL_GPIO_Init+0x1ee>
 8001228:	2302      	movs	r3, #2
 800122a:	e002      	b.n	8001232 <HAL_GPIO_Init+0x1ee>
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <HAL_GPIO_Init+0x1ee>
 8001230:	2300      	movs	r3, #0
 8001232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001234:	f002 0203 	and.w	r2, r2, #3
 8001238:	0092      	lsls	r2, r2, #2
 800123a:	4093      	lsls	r3, r2
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001242:	492f      	ldr	r1, [pc, #188]	@ (8001300 <HAL_GPIO_Init+0x2bc>)
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3302      	adds	r3, #2
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d006      	beq.n	800126a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800125c:	4b2d      	ldr	r3, [pc, #180]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	492c      	ldr	r1, [pc, #176]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	608b      	str	r3, [r1, #8]
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800126a:	4b2a      	ldr	r3, [pc, #168]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	43db      	mvns	r3, r3
 8001272:	4928      	ldr	r1, [pc, #160]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 8001274:	4013      	ands	r3, r2
 8001276:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d006      	beq.n	8001292 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001284:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	4922      	ldr	r1, [pc, #136]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	60cb      	str	r3, [r1, #12]
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001292:	4b20      	ldr	r3, [pc, #128]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	43db      	mvns	r3, r3
 800129a:	491e      	ldr	r1, [pc, #120]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 800129c:	4013      	ands	r3, r2
 800129e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012ac:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4918      	ldr	r1, [pc, #96]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
 80012b8:	e006      	b.n	80012c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ba:	4b16      	ldr	r3, [pc, #88]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	4914      	ldr	r1, [pc, #80]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d021      	beq.n	8001318 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	490e      	ldr	r1, [pc, #56]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
 80012e0:	e021      	b.n	8001326 <HAL_GPIO_Init+0x2e2>
 80012e2:	bf00      	nop
 80012e4:	10320000 	.word	0x10320000
 80012e8:	10310000 	.word	0x10310000
 80012ec:	10220000 	.word	0x10220000
 80012f0:	10210000 	.word	0x10210000
 80012f4:	10120000 	.word	0x10120000
 80012f8:	10110000 	.word	0x10110000
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010000 	.word	0x40010000
 8001304:	40010800 	.word	0x40010800
 8001308:	40010c00 	.word	0x40010c00
 800130c:	40011000 	.word	0x40011000
 8001310:	40011400 	.word	0x40011400
 8001314:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001318:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <HAL_GPIO_Init+0x304>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	43db      	mvns	r3, r3
 8001320:	4909      	ldr	r1, [pc, #36]	@ (8001348 <HAL_GPIO_Init+0x304>)
 8001322:	4013      	ands	r3, r2
 8001324:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001328:	3301      	adds	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001332:	fa22 f303 	lsr.w	r3, r2, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	f47f ae8e 	bne.w	8001058 <HAL_GPIO_Init+0x14>
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	372c      	adds	r7, #44	@ 0x2c
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	40010400 	.word	0x40010400

0800134c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e001      	b.n	800136e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	460b      	mov	r3, r1
 8001384:	807b      	strh	r3, [r7, #2]
 8001386:	4613      	mov	r3, r2
 8001388:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800138a:	787b      	ldrb	r3, [r7, #1]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001390:	887a      	ldrh	r2, [r7, #2]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001396:	e003      	b.n	80013a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	041a      	lsls	r2, r3, #16
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	611a      	str	r2, [r3, #16]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
	...

080013ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e272      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 8087 	beq.w	80014da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013cc:	4b92      	ldr	r3, [pc, #584]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d00c      	beq.n	80013f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013d8:	4b8f      	ldr	r3, [pc, #572]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 030c 	and.w	r3, r3, #12
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d112      	bne.n	800140a <HAL_RCC_OscConfig+0x5e>
 80013e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013f0:	d10b      	bne.n	800140a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f2:	4b89      	ldr	r3, [pc, #548]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d06c      	beq.n	80014d8 <HAL_RCC_OscConfig+0x12c>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d168      	bne.n	80014d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e24c      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001412:	d106      	bne.n	8001422 <HAL_RCC_OscConfig+0x76>
 8001414:	4b80      	ldr	r3, [pc, #512]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a7f      	ldr	r2, [pc, #508]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800141a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	e02e      	b.n	8001480 <HAL_RCC_OscConfig+0xd4>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10c      	bne.n	8001444 <HAL_RCC_OscConfig+0x98>
 800142a:	4b7b      	ldr	r3, [pc, #492]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a7a      	ldr	r2, [pc, #488]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b78      	ldr	r3, [pc, #480]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a77      	ldr	r2, [pc, #476]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800143c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e01d      	b.n	8001480 <HAL_RCC_OscConfig+0xd4>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0xbc>
 800144e:	4b72      	ldr	r3, [pc, #456]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a71      	ldr	r2, [pc, #452]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b6f      	ldr	r3, [pc, #444]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a6e      	ldr	r2, [pc, #440]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e00b      	b.n	8001480 <HAL_RCC_OscConfig+0xd4>
 8001468:	4b6b      	ldr	r3, [pc, #428]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a6a      	ldr	r2, [pc, #424]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800146e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b68      	ldr	r3, [pc, #416]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a67      	ldr	r2, [pc, #412]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800147e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d013      	beq.n	80014b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fc26 	bl	8000cd8 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fc22 	bl	8000cd8 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	@ 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e200      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0xe4>
 80014ae:	e014      	b.n	80014da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fc12 	bl	8000cd8 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fc0e 	bl	8000cd8 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	@ 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e1ec      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	4b53      	ldr	r3, [pc, #332]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x10c>
 80014d6:	e000      	b.n	80014da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d063      	beq.n	80015ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014f2:	4b49      	ldr	r3, [pc, #292]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d11c      	bne.n	8001538 <HAL_RCC_OscConfig+0x18c>
 80014fe:	4b46      	ldr	r3, [pc, #280]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d116      	bne.n	8001538 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	4b43      	ldr	r3, [pc, #268]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x176>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d001      	beq.n	8001522 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e1c0      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b3d      	ldr	r3, [pc, #244]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4939      	ldr	r1, [pc, #228]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001536:	e03a      	b.n	80015ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d020      	beq.n	8001582 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001540:	4b36      	ldr	r3, [pc, #216]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001546:	f7ff fbc7 	bl	8000cd8 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154e:	f7ff fbc3 	bl	8000cd8 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e1a1      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001560:	4b2d      	ldr	r3, [pc, #180]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4927      	ldr	r1, [pc, #156]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
 8001580:	e015      	b.n	80015ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001582:	4b26      	ldr	r3, [pc, #152]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fba6 	bl	8000cd8 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fba2 	bl	8000cd8 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e180      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d03a      	beq.n	8001630 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d019      	beq.n	80015f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c2:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <HAL_RCC_OscConfig+0x274>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c8:	f7ff fb86 	bl	8000cd8 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fb82 	bl	8000cd8 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e160      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f000 fafe 	bl	8001bf0 <RCC_Delay>
 80015f4:	e01c      	b.n	8001630 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_RCC_OscConfig+0x274>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fb6c 	bl	8000cd8 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001602:	e00f      	b.n	8001624 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff fb68 	bl	8000cd8 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d908      	bls.n	8001624 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e146      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	42420000 	.word	0x42420000
 8001620:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001624:	4b92      	ldr	r3, [pc, #584]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1e9      	bne.n	8001604 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80a6 	beq.w	800178a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001642:	4b8b      	ldr	r3, [pc, #556]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10d      	bne.n	800166a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b88      	ldr	r3, [pc, #544]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a87      	ldr	r2, [pc, #540]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b85      	ldr	r3, [pc, #532]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001666:	2301      	movs	r3, #1
 8001668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166a:	4b82      	ldr	r3, [pc, #520]	@ (8001874 <HAL_RCC_OscConfig+0x4c8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d118      	bne.n	80016a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001676:	4b7f      	ldr	r3, [pc, #508]	@ (8001874 <HAL_RCC_OscConfig+0x4c8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a7e      	ldr	r2, [pc, #504]	@ (8001874 <HAL_RCC_OscConfig+0x4c8>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001682:	f7ff fb29 	bl	8000cd8 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168a:	f7ff fb25 	bl	8000cd8 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b64      	cmp	r3, #100	@ 0x64
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e103      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	4b75      	ldr	r3, [pc, #468]	@ (8001874 <HAL_RCC_OscConfig+0x4c8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d106      	bne.n	80016be <HAL_RCC_OscConfig+0x312>
 80016b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4a6e      	ldr	r2, [pc, #440]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6213      	str	r3, [r2, #32]
 80016bc:	e02d      	b.n	800171a <HAL_RCC_OscConfig+0x36e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x334>
 80016c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a69      	ldr	r2, [pc, #420]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	6213      	str	r3, [r2, #32]
 80016d2:	4b67      	ldr	r3, [pc, #412]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4a66      	ldr	r2, [pc, #408]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	f023 0304 	bic.w	r3, r3, #4
 80016dc:	6213      	str	r3, [r2, #32]
 80016de:	e01c      	b.n	800171a <HAL_RCC_OscConfig+0x36e>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d10c      	bne.n	8001702 <HAL_RCC_OscConfig+0x356>
 80016e8:	4b61      	ldr	r3, [pc, #388]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4a60      	ldr	r2, [pc, #384]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6213      	str	r3, [r2, #32]
 80016f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4a5d      	ldr	r2, [pc, #372]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6213      	str	r3, [r2, #32]
 8001700:	e00b      	b.n	800171a <HAL_RCC_OscConfig+0x36e>
 8001702:	4b5b      	ldr	r3, [pc, #364]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	4a5a      	ldr	r2, [pc, #360]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6213      	str	r3, [r2, #32]
 800170e:	4b58      	ldr	r3, [pc, #352]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4a57      	ldr	r2, [pc, #348]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	f023 0304 	bic.w	r3, r3, #4
 8001718:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d015      	beq.n	800174e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7ff fad9 	bl	8000cd8 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001728:	e00a      	b.n	8001740 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7ff fad5 	bl	8000cd8 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e0b1      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001740:	4b4b      	ldr	r3, [pc, #300]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0ee      	beq.n	800172a <HAL_RCC_OscConfig+0x37e>
 800174c:	e014      	b.n	8001778 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174e:	f7ff fac3 	bl	8000cd8 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff fabf 	bl	8000cd8 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e09b      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176c:	4b40      	ldr	r3, [pc, #256]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1ee      	bne.n	8001756 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d105      	bne.n	800178a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177e:	4b3c      	ldr	r3, [pc, #240]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4a3b      	ldr	r2, [pc, #236]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001788:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8087 	beq.w	80018a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001794:	4b36      	ldr	r3, [pc, #216]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d061      	beq.n	8001864 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d146      	bne.n	8001836 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a8:	4b33      	ldr	r3, [pc, #204]	@ (8001878 <HAL_RCC_OscConfig+0x4cc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ae:	f7ff fa93 	bl	8000cd8 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b6:	f7ff fa8f 	bl	8000cd8 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e06d      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c8:	4b29      	ldr	r3, [pc, #164]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f0      	bne.n	80017b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017dc:	d108      	bne.n	80017f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017de:	4b24      	ldr	r3, [pc, #144]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	4921      	ldr	r1, [pc, #132]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a19      	ldr	r1, [r3, #32]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	430b      	orrs	r3, r1
 8001802:	491b      	ldr	r1, [pc, #108]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001808:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <HAL_RCC_OscConfig+0x4cc>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff fa63 	bl	8000cd8 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001816:	f7ff fa5f 	bl	8000cd8 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e03d      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001828:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x46a>
 8001834:	e035      	b.n	80018a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001836:	4b10      	ldr	r3, [pc, #64]	@ (8001878 <HAL_RCC_OscConfig+0x4cc>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fa4c 	bl	8000cd8 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff fa48 	bl	8000cd8 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e026      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x498>
 8001862:	e01e      	b.n	80018a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d107      	bne.n	800187c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e019      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
 8001870:	40021000 	.word	0x40021000
 8001874:	40007000 	.word	0x40007000
 8001878:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800187c:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <HAL_RCC_OscConfig+0x500>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	429a      	cmp	r2, r3
 800188e:	d106      	bne.n	800189e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d001      	beq.n	80018a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40021000 	.word	0x40021000

080018b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0d0      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d910      	bls.n	80018f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b67      	ldr	r3, [pc, #412]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 0207 	bic.w	r2, r3, #7
 80018da:	4965      	ldr	r1, [pc, #404]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b63      	ldr	r3, [pc, #396]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0b8      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d020      	beq.n	8001942 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800190c:	4b59      	ldr	r3, [pc, #356]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4a58      	ldr	r2, [pc, #352]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001916:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001924:	4b53      	ldr	r3, [pc, #332]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4a52      	ldr	r2, [pc, #328]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800192e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001930:	4b50      	ldr	r3, [pc, #320]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	494d      	ldr	r1, [pc, #308]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	4313      	orrs	r3, r2
 8001940:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d040      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	4b47      	ldr	r3, [pc, #284]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d115      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e07f      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196e:	4b41      	ldr	r3, [pc, #260]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e073      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e06b      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198e:	4b39      	ldr	r3, [pc, #228]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f023 0203 	bic.w	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a0:	f7ff f99a 	bl	8000cd8 <HAL_GetTick>
 80019a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	e00a      	b.n	80019be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a8:	f7ff f996 	bl	8000cd8 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e053      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	4b2d      	ldr	r3, [pc, #180]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 020c 	and.w	r2, r3, #12
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d1eb      	bne.n	80019a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d0:	4b27      	ldr	r3, [pc, #156]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d210      	bcs.n	8001a00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b24      	ldr	r3, [pc, #144]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 0207 	bic.w	r2, r3, #7
 80019e6:	4922      	ldr	r1, [pc, #136]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ee:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e032      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d008      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a0c:	4b19      	ldr	r3, [pc, #100]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	4916      	ldr	r1, [pc, #88]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d009      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a2a:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	490e      	ldr	r1, [pc, #56]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a3e:	f000 f821 	bl	8001a84 <HAL_RCC_GetSysClockFreq>
 8001a42:	4602      	mov	r2, r0
 8001a44:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	490a      	ldr	r1, [pc, #40]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c8>)
 8001a50:	5ccb      	ldrb	r3, [r1, r3]
 8001a52:	fa22 f303 	lsr.w	r3, r2, r3
 8001a56:	4a09      	ldr	r2, [pc, #36]	@ (8001a7c <HAL_RCC_ClockConfig+0x1cc>)
 8001a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <HAL_RCC_ClockConfig+0x1d0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f83a 	bl	8000ad8 <HAL_InitTick>

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40022000 	.word	0x40022000
 8001a74:	40021000 	.word	0x40021000
 8001a78:	0800570c 	.word	0x0800570c
 8001a7c:	20000004 	.word	0x20000004
 8001a80:	20000008 	.word	0x20000008

08001a84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d002      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x30>
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d003      	beq.n	8001aba <HAL_RCC_GetSysClockFreq+0x36>
 8001ab2:	e027      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ab4:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ab6:	613b      	str	r3, [r7, #16]
      break;
 8001ab8:	e027      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	0c9b      	lsrs	r3, r3, #18
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	4a17      	ldr	r2, [pc, #92]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ac4:	5cd3      	ldrb	r3, [r2, r3]
 8001ac6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d010      	beq.n	8001af4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ad2:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	0c5b      	lsrs	r3, r3, #17
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	4a11      	ldr	r2, [pc, #68]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ade:	5cd3      	ldrb	r3, [r2, r3]
 8001ae0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ae6:	fb03 f202 	mul.w	r2, r3, r2
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e004      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a0c      	ldr	r2, [pc, #48]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	613b      	str	r3, [r7, #16]
      break;
 8001b02:	e002      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001b06:	613b      	str	r3, [r7, #16]
      break;
 8001b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b0a:	693b      	ldr	r3, [r7, #16]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	371c      	adds	r7, #28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	007a1200 	.word	0x007a1200
 8001b20:	08005724 	.word	0x08005724
 8001b24:	08005734 	.word	0x08005734
 8001b28:	003d0900 	.word	0x003d0900

08001b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b30:	4b02      	ldr	r3, [pc, #8]	@ (8001b3c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	20000004 	.word	0x20000004

08001b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b44:	f7ff fff2 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	0a1b      	lsrs	r3, r3, #8
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	4903      	ldr	r1, [pc, #12]	@ (8001b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000
 8001b64:	0800571c 	.word	0x0800571c

08001b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b6c:	f7ff ffde 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	0adb      	lsrs	r3, r3, #11
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4903      	ldr	r1, [pc, #12]	@ (8001b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	0800571c 	.word	0x0800571c

08001b90 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba0:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <HAL_RCC_GetClockConfig+0x58>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bac:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <HAL_RCC_GetClockConfig+0x58>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <HAL_RCC_GetClockConfig+0x58>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001bc4:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <HAL_RCC_GetClockConfig+0x58>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	08db      	lsrs	r3, r3, #3
 8001bca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bd2:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0207 	and.w	r2, r3, #7
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40022000 	.word	0x40022000

08001bf0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <RCC_Delay+0x34>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8001c28 <RCC_Delay+0x38>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	0a5b      	lsrs	r3, r3, #9
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	fb02 f303 	mul.w	r3, r2, r3
 8001c0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c0c:	bf00      	nop
  }
  while (Delay --);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1e5a      	subs	r2, r3, #1
 8001c12:	60fa      	str	r2, [r7, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f9      	bne.n	8001c0c <RCC_Delay+0x1c>
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	20000004 	.word	0x20000004
 8001c28:	10624dd3 	.word	0x10624dd3

08001c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e041      	b.n	8001cc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7fe fea0 	bl	8000998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3304      	adds	r3, #4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	f000 fc94 	bl	8002598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d001      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e03a      	b.n	8001d5a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a18      	ldr	r2, [pc, #96]	@ (8001d64 <HAL_TIM_Base_Start_IT+0x98>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00e      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x58>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d0e:	d009      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x58>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a14      	ldr	r2, [pc, #80]	@ (8001d68 <HAL_TIM_Base_Start_IT+0x9c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d004      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x58>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a13      	ldr	r2, [pc, #76]	@ (8001d6c <HAL_TIM_Base_Start_IT+0xa0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d111      	bne.n	8001d48 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d010      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0201 	orr.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d46:	e007      	b.n	8001d58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	40012c00 	.word	0x40012c00
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	40000800 	.word	0x40000800

08001d70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e041      	b.n	8001e06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d106      	bne.n	8001d9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f839 	bl	8001e0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3304      	adds	r3, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 fbf2 	bl	8002598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <HAL_TIM_PWM_Start+0x24>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	e022      	b.n	8001e8a <HAL_TIM_PWM_Start+0x6a>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d109      	bne.n	8001e5e <HAL_TIM_PWM_Start+0x3e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	bf14      	ite	ne
 8001e56:	2301      	movne	r3, #1
 8001e58:	2300      	moveq	r3, #0
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	e015      	b.n	8001e8a <HAL_TIM_PWM_Start+0x6a>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d109      	bne.n	8001e78 <HAL_TIM_PWM_Start+0x58>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	e008      	b.n	8001e8a <HAL_TIM_PWM_Start+0x6a>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	bf14      	ite	ne
 8001e84:	2301      	movne	r3, #1
 8001e86:	2300      	moveq	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e05e      	b.n	8001f50 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d104      	bne.n	8001ea2 <HAL_TIM_PWM_Start+0x82>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ea0:	e013      	b.n	8001eca <HAL_TIM_PWM_Start+0xaa>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d104      	bne.n	8001eb2 <HAL_TIM_PWM_Start+0x92>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001eb0:	e00b      	b.n	8001eca <HAL_TIM_PWM_Start+0xaa>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d104      	bne.n	8001ec2 <HAL_TIM_PWM_Start+0xa2>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ec0:	e003      	b.n	8001eca <HAL_TIM_PWM_Start+0xaa>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	6839      	ldr	r1, [r7, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fde0 	bl	8002a98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1e      	ldr	r2, [pc, #120]	@ (8001f58 <HAL_TIM_PWM_Start+0x138>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d107      	bne.n	8001ef2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ef0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a18      	ldr	r2, [pc, #96]	@ (8001f58 <HAL_TIM_PWM_Start+0x138>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d00e      	beq.n	8001f1a <HAL_TIM_PWM_Start+0xfa>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f04:	d009      	beq.n	8001f1a <HAL_TIM_PWM_Start+0xfa>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a14      	ldr	r2, [pc, #80]	@ (8001f5c <HAL_TIM_PWM_Start+0x13c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d004      	beq.n	8001f1a <HAL_TIM_PWM_Start+0xfa>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a12      	ldr	r2, [pc, #72]	@ (8001f60 <HAL_TIM_PWM_Start+0x140>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d111      	bne.n	8001f3e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b06      	cmp	r3, #6
 8001f2a:	d010      	beq.n	8001f4e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3c:	e007      	b.n	8001f4e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 0201 	orr.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40012c00 	.word	0x40012c00
 8001f5c:	40000400 	.word	0x40000400
 8001f60:	40000800 	.word	0x40000800

08001f64 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2200      	movs	r2, #0
 8001f74:	6839      	ldr	r1, [r7, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fd8e 	bl	8002a98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a29      	ldr	r2, [pc, #164]	@ (8002028 <HAL_TIM_PWM_Stop+0xc4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d117      	bne.n	8001fb6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6a1a      	ldr	r2, [r3, #32]
 8001f8c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10f      	bne.n	8001fb6 <HAL_TIM_PWM_Stop+0x52>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6a1a      	ldr	r2, [r3, #32]
 8001f9c:	f240 4344 	movw	r3, #1092	@ 0x444
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d107      	bne.n	8001fb6 <HAL_TIM_PWM_Stop+0x52>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6a1a      	ldr	r2, [r3, #32]
 8001fbc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10f      	bne.n	8001fe6 <HAL_TIM_PWM_Stop+0x82>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6a1a      	ldr	r2, [r3, #32]
 8001fcc:	f240 4344 	movw	r3, #1092	@ 0x444
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d107      	bne.n	8001fe6 <HAL_TIM_PWM_Stop+0x82>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0201 	bic.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d104      	bne.n	8001ff6 <HAL_TIM_PWM_Stop+0x92>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ff4:	e013      	b.n	800201e <HAL_TIM_PWM_Stop+0xba>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d104      	bne.n	8002006 <HAL_TIM_PWM_Stop+0xa2>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002004:	e00b      	b.n	800201e <HAL_TIM_PWM_Stop+0xba>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b08      	cmp	r3, #8
 800200a:	d104      	bne.n	8002016 <HAL_TIM_PWM_Stop+0xb2>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002014:	e003      	b.n	800201e <HAL_TIM_PWM_Stop+0xba>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40012c00 	.word	0x40012c00

0800202c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b02      	cmp	r3, #2
 8002040:	d122      	bne.n	8002088 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b02      	cmp	r3, #2
 800204e:	d11b      	bne.n	8002088 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0202 	mvn.w	r2, #2
 8002058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fa76 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 8002074:	e005      	b.n	8002082 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 fa69 	bl	800254e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 fa78 	bl	8002572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b04      	cmp	r3, #4
 8002094:	d122      	bne.n	80020dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d11b      	bne.n	80020dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0204 	mvn.w	r2, #4
 80020ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2202      	movs	r2, #2
 80020b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fa4c 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 80020c8:	e005      	b.n	80020d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fa3f 	bl	800254e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 fa4e 	bl	8002572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d122      	bne.n	8002130 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d11b      	bne.n	8002130 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0208 	mvn.w	r2, #8
 8002100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2204      	movs	r2, #4
 8002106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fa22 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 800211c:	e005      	b.n	800212a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fa15 	bl	800254e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fa24 	bl	8002572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b10      	cmp	r3, #16
 800213c:	d122      	bne.n	8002184 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	2b10      	cmp	r3, #16
 800214a:	d11b      	bne.n	8002184 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0210 	mvn.w	r2, #16
 8002154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2208      	movs	r2, #8
 800215a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f9f8 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 8002170:	e005      	b.n	800217e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f9eb 	bl	800254e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f9fa 	bl	8002572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b01      	cmp	r3, #1
 8002190:	d10e      	bne.n	80021b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b01      	cmp	r3, #1
 800219e:	d107      	bne.n	80021b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f06f 0201 	mvn.w	r2, #1
 80021a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7fe fba4 	bl	80008f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ba:	2b80      	cmp	r3, #128	@ 0x80
 80021bc:	d10e      	bne.n	80021dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c8:	2b80      	cmp	r3, #128	@ 0x80
 80021ca:	d107      	bne.n	80021dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fce9 	bl	8002bae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e6:	2b40      	cmp	r3, #64	@ 0x40
 80021e8:	d10e      	bne.n	8002208 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f4:	2b40      	cmp	r3, #64	@ 0x40
 80021f6:	d107      	bne.n	8002208 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f9be 	bl	8002584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b20      	cmp	r3, #32
 8002214:	d10e      	bne.n	8002234 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0320 	and.w	r3, r3, #32
 8002220:	2b20      	cmp	r3, #32
 8002222:	d107      	bne.n	8002234 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0220 	mvn.w	r2, #32
 800222c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fcb4 	bl	8002b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002256:	2302      	movs	r3, #2
 8002258:	e0ae      	b.n	80023b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b0c      	cmp	r3, #12
 8002266:	f200 809f 	bhi.w	80023a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800226a:	a201      	add	r2, pc, #4	@ (adr r2, 8002270 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	080022a5 	.word	0x080022a5
 8002274:	080023a9 	.word	0x080023a9
 8002278:	080023a9 	.word	0x080023a9
 800227c:	080023a9 	.word	0x080023a9
 8002280:	080022e5 	.word	0x080022e5
 8002284:	080023a9 	.word	0x080023a9
 8002288:	080023a9 	.word	0x080023a9
 800228c:	080023a9 	.word	0x080023a9
 8002290:	08002327 	.word	0x08002327
 8002294:	080023a9 	.word	0x080023a9
 8002298:	080023a9 	.word	0x080023a9
 800229c:	080023a9 	.word	0x080023a9
 80022a0:	08002367 	.word	0x08002367
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f9d6 	bl	800265c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699a      	ldr	r2, [r3, #24]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0208 	orr.w	r2, r2, #8
 80022be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0204 	bic.w	r2, r2, #4
 80022ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6999      	ldr	r1, [r3, #24]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	691a      	ldr	r2, [r3, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	619a      	str	r2, [r3, #24]
      break;
 80022e2:	e064      	b.n	80023ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fa1c 	bl	8002728 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800230e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6999      	ldr	r1, [r3, #24]
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	021a      	lsls	r2, r3, #8
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	619a      	str	r2, [r3, #24]
      break;
 8002324:	e043      	b.n	80023ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68b9      	ldr	r1, [r7, #8]
 800232c:	4618      	mov	r0, r3
 800232e:	f000 fa65 	bl	80027fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	69da      	ldr	r2, [r3, #28]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 0208 	orr.w	r2, r2, #8
 8002340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69da      	ldr	r2, [r3, #28]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0204 	bic.w	r2, r2, #4
 8002350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	69d9      	ldr	r1, [r3, #28]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	61da      	str	r2, [r3, #28]
      break;
 8002364:	e023      	b.n	80023ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	4618      	mov	r0, r3
 800236e:	f000 faaf 	bl	80028d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	69da      	ldr	r2, [r3, #28]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69da      	ldr	r2, [r3, #28]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69d9      	ldr	r1, [r3, #28]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	021a      	lsls	r2, r3, #8
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	61da      	str	r2, [r3, #28]
      break;
 80023a6:	e002      	b.n	80023ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	75fb      	strb	r3, [r7, #23]
      break;
 80023ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_TIM_ConfigClockSource+0x1c>
 80023d8:	2302      	movs	r3, #2
 80023da:	e0b4      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x186>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80023fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002402:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002414:	d03e      	beq.n	8002494 <HAL_TIM_ConfigClockSource+0xd4>
 8002416:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800241a:	f200 8087 	bhi.w	800252c <HAL_TIM_ConfigClockSource+0x16c>
 800241e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002422:	f000 8086 	beq.w	8002532 <HAL_TIM_ConfigClockSource+0x172>
 8002426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800242a:	d87f      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 800242c:	2b70      	cmp	r3, #112	@ 0x70
 800242e:	d01a      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0xa6>
 8002430:	2b70      	cmp	r3, #112	@ 0x70
 8002432:	d87b      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 8002434:	2b60      	cmp	r3, #96	@ 0x60
 8002436:	d050      	beq.n	80024da <HAL_TIM_ConfigClockSource+0x11a>
 8002438:	2b60      	cmp	r3, #96	@ 0x60
 800243a:	d877      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 800243c:	2b50      	cmp	r3, #80	@ 0x50
 800243e:	d03c      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0xfa>
 8002440:	2b50      	cmp	r3, #80	@ 0x50
 8002442:	d873      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 8002444:	2b40      	cmp	r3, #64	@ 0x40
 8002446:	d058      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0x13a>
 8002448:	2b40      	cmp	r3, #64	@ 0x40
 800244a:	d86f      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 800244c:	2b30      	cmp	r3, #48	@ 0x30
 800244e:	d064      	beq.n	800251a <HAL_TIM_ConfigClockSource+0x15a>
 8002450:	2b30      	cmp	r3, #48	@ 0x30
 8002452:	d86b      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 8002454:	2b20      	cmp	r3, #32
 8002456:	d060      	beq.n	800251a <HAL_TIM_ConfigClockSource+0x15a>
 8002458:	2b20      	cmp	r3, #32
 800245a:	d867      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 800245c:	2b00      	cmp	r3, #0
 800245e:	d05c      	beq.n	800251a <HAL_TIM_ConfigClockSource+0x15a>
 8002460:	2b10      	cmp	r3, #16
 8002462:	d05a      	beq.n	800251a <HAL_TIM_ConfigClockSource+0x15a>
 8002464:	e062      	b.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002476:	f000 faf0 	bl	8002a5a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002488:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	609a      	str	r2, [r3, #8]
      break;
 8002492:	e04f      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024a4:	f000 fad9 	bl	8002a5a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024b6:	609a      	str	r2, [r3, #8]
      break;
 80024b8:	e03c      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024c6:	461a      	mov	r2, r3
 80024c8:	f000 fa50 	bl	800296c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2150      	movs	r1, #80	@ 0x50
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 faa7 	bl	8002a26 <TIM_ITRx_SetConfig>
      break;
 80024d8:	e02c      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024e6:	461a      	mov	r2, r3
 80024e8:	f000 fa6e 	bl	80029c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2160      	movs	r1, #96	@ 0x60
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fa97 	bl	8002a26 <TIM_ITRx_SetConfig>
      break;
 80024f8:	e01c      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002506:	461a      	mov	r2, r3
 8002508:	f000 fa30 	bl	800296c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2140      	movs	r1, #64	@ 0x40
 8002512:	4618      	mov	r0, r3
 8002514:	f000 fa87 	bl	8002a26 <TIM_ITRx_SetConfig>
      break;
 8002518:	e00c      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4619      	mov	r1, r3
 8002524:	4610      	mov	r0, r2
 8002526:	f000 fa7e 	bl	8002a26 <TIM_ITRx_SetConfig>
      break;
 800252a:	e003      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
      break;
 8002530:	e000      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002532:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
	...

08002598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a29      	ldr	r2, [pc, #164]	@ (8002650 <TIM_Base_SetConfig+0xb8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d00b      	beq.n	80025c8 <TIM_Base_SetConfig+0x30>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025b6:	d007      	beq.n	80025c8 <TIM_Base_SetConfig+0x30>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a26      	ldr	r2, [pc, #152]	@ (8002654 <TIM_Base_SetConfig+0xbc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d003      	beq.n	80025c8 <TIM_Base_SetConfig+0x30>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a25      	ldr	r2, [pc, #148]	@ (8002658 <TIM_Base_SetConfig+0xc0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d108      	bne.n	80025da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002650 <TIM_Base_SetConfig+0xb8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00b      	beq.n	80025fa <TIM_Base_SetConfig+0x62>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e8:	d007      	beq.n	80025fa <TIM_Base_SetConfig+0x62>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a19      	ldr	r2, [pc, #100]	@ (8002654 <TIM_Base_SetConfig+0xbc>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d003      	beq.n	80025fa <TIM_Base_SetConfig+0x62>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a18      	ldr	r2, [pc, #96]	@ (8002658 <TIM_Base_SetConfig+0xc0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d108      	bne.n	800260c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a07      	ldr	r2, [pc, #28]	@ (8002650 <TIM_Base_SetConfig+0xb8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d103      	bne.n	8002640 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	615a      	str	r2, [r3, #20]
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	40012c00 	.word	0x40012c00
 8002654:	40000400 	.word	0x40000400
 8002658:	40000800 	.word	0x40000800

0800265c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f023 0201 	bic.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800268a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f023 0303 	bic.w	r3, r3, #3
 8002692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f023 0302 	bic.w	r3, r3, #2
 80026a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002724 <TIM_OC1_SetConfig+0xc8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d10c      	bne.n	80026d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f023 0308 	bic.w	r3, r3, #8
 80026be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f023 0304 	bic.w	r3, r3, #4
 80026d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a13      	ldr	r2, [pc, #76]	@ (8002724 <TIM_OC1_SetConfig+0xc8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d111      	bne.n	80026fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	621a      	str	r2, [r3, #32]
}
 8002718:	bf00      	nop
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40012c00 	.word	0x40012c00

08002728 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f023 0210 	bic.w	r2, r3, #16
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800275e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f023 0320 	bic.w	r3, r3, #32
 8002772:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a1d      	ldr	r2, [pc, #116]	@ (80027f8 <TIM_OC2_SetConfig+0xd0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d10d      	bne.n	80027a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800278e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a14      	ldr	r2, [pc, #80]	@ (80027f8 <TIM_OC2_SetConfig+0xd0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d113      	bne.n	80027d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	621a      	str	r2, [r3, #32]
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	40012c00 	.word	0x40012c00

080027fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800282a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0303 	bic.w	r3, r3, #3
 8002832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	4313      	orrs	r3, r2
 8002850:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a1d      	ldr	r2, [pc, #116]	@ (80028cc <TIM_OC3_SetConfig+0xd0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10d      	bne.n	8002876 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002860:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a14      	ldr	r2, [pc, #80]	@ (80028cc <TIM_OC3_SetConfig+0xd0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d113      	bne.n	80028a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800288c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	621a      	str	r2, [r3, #32]
}
 80028c0:	bf00      	nop
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40012c00 	.word	0x40012c00

080028d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800291a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	031b      	lsls	r3, r3, #12
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a0f      	ldr	r2, [pc, #60]	@ (8002968 <TIM_OC4_SetConfig+0x98>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d109      	bne.n	8002944 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002936:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	019b      	lsls	r3, r3, #6
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	621a      	str	r2, [r3, #32]
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	40012c00 	.word	0x40012c00

0800296c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	f023 0201 	bic.w	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f023 030a 	bic.w	r3, r3, #10
 80029a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	621a      	str	r2, [r3, #32]
}
 80029be:	bf00      	nop
 80029c0:	371c      	adds	r7, #28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	f023 0210 	bic.w	r2, r3, #16
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80029f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	031b      	lsls	r3, r3, #12
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	621a      	str	r2, [r3, #32]
}
 8002a1c:	bf00      	nop
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b085      	sub	sp, #20
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f043 0307 	orr.w	r3, r3, #7
 8002a48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	609a      	str	r2, [r3, #8]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b087      	sub	sp, #28
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	021a      	lsls	r2, r3, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	609a      	str	r2, [r3, #8]
}
 8002a8e:	bf00      	nop
 8002a90:	371c      	adds	r7, #28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	2201      	movs	r2, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a1a      	ldr	r2, [r3, #32]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	401a      	ands	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a1a      	ldr	r2, [r3, #32]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	621a      	str	r2, [r3, #32]
}
 8002ad6:	bf00      	nop
 8002ad8:	371c      	adds	r7, #28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e046      	b.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a16      	ldr	r2, [pc, #88]	@ (8002b90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00e      	beq.n	8002b5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b44:	d009      	beq.n	8002b5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a12      	ldr	r2, [pc, #72]	@ (8002b94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d004      	beq.n	8002b5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a10      	ldr	r2, [pc, #64]	@ (8002b98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d10c      	bne.n	8002b74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr
 8002b90:	40012c00 	.word	0x40012c00
 8002b94:	40000400 	.word	0x40000400
 8002b98:	40000800 	.word	0x40000800

08002b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e042      	b.n	8002c58 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fd ff22 	bl	8000a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2224      	movs	r2, #36	@ 0x24
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fcd5 	bl	80035b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b20      	cmp	r3, #32
 8002c78:	d112      	bne.n	8002ca0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_UART_Receive_IT+0x26>
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e00b      	b.n	8002ca2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	461a      	mov	r2, r3
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fab7 	bl	800320a <UART_Start_Receive_IT>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	e000      	b.n	8002ca2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002ca0:	2302      	movs	r3, #2
  }
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b0ba      	sub	sp, #232	@ 0xe8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10f      	bne.n	8002d12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <HAL_UART_IRQHandler+0x66>
 8002cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fb93 	bl	8003436 <UART_Receive_IT>
      return;
 8002d10:	e25b      	b.n	80031ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80de 	beq.w	8002ed8 <HAL_UART_IRQHandler+0x22c>
 8002d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d106      	bne.n	8002d36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d2c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80d1 	beq.w	8002ed8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_UART_IRQHandler+0xae>
 8002d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_UART_IRQHandler+0xd2>
 8002d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	f043 0202 	orr.w	r2, r3, #2
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_UART_IRQHandler+0xf6>
 8002d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9a:	f043 0204 	orr.w	r2, r3, #4
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d011      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x126>
 8002dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d105      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	f043 0208 	orr.w	r2, r3, #8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 81f2 	beq.w	80031c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_UART_IRQHandler+0x14e>
 8002de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fb1e 	bl	8003436 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf14      	ite	ne
 8002e08:	2301      	movne	r3, #1
 8002e0a:	2300      	moveq	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d103      	bne.n	8002e26 <HAL_UART_IRQHandler+0x17a>
 8002e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d04f      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fa28 	bl	800327c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d041      	beq.n	8002ebe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3314      	adds	r3, #20
 8002e40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3314      	adds	r3, #20
 8002e62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002e72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e76:	e841 2300 	strex	r3, r2, [r1]
 8002e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1d9      	bne.n	8002e3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d013      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e92:	4a7e      	ldr	r2, [pc, #504]	@ (800308c <HAL_UART_IRQHandler+0x3e0>)
 8002e94:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe f85a 	bl	8000f54 <HAL_DMA_Abort_IT>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d016      	beq.n	8002ed4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb4:	e00e      	b.n	8002ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f993 	bl	80031e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ebc:	e00a      	b.n	8002ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f98f 	bl	80031e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec4:	e006      	b.n	8002ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f98b 	bl	80031e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002ed2:	e175      	b.n	80031c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed4:	bf00      	nop
    return;
 8002ed6:	e173      	b.n	80031c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	f040 814f 	bne.w	8003180 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8148 	beq.w	8003180 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 8141 	beq.w	8003180 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002efe:	2300      	movs	r3, #0
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80b6 	beq.w	8003090 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8145 	beq.w	80031c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f42:	429a      	cmp	r2, r3
 8002f44:	f080 813e 	bcs.w	80031c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	f000 8088 	beq.w	800306c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	330c      	adds	r3, #12
 8002f62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f6a:	e853 3f00 	ldrex	r3, [r3]
 8002f6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	330c      	adds	r3, #12
 8002f84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f88:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f90:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f94:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f98:	e841 2300 	strex	r3, r2, [r1]
 8002f9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1d9      	bne.n	8002f5c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3314      	adds	r3, #20
 8002fae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fb2:	e853 3f00 	ldrex	r3, [r3]
 8002fb6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002fb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fba:	f023 0301 	bic.w	r3, r3, #1
 8002fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3314      	adds	r3, #20
 8002fc8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fcc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002fd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002fd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002fd8:	e841 2300 	strex	r3, r2, [r1]
 8002fdc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002fde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e1      	bne.n	8002fa8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3314      	adds	r3, #20
 8002fea:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fee:	e853 3f00 	ldrex	r3, [r3]
 8002ff2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002ff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3314      	adds	r3, #20
 8003004:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003008:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800300a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800300e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003010:	e841 2300 	strex	r3, r2, [r1]
 8003014:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003016:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e3      	bne.n	8002fe4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	330c      	adds	r3, #12
 8003030:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003034:	e853 3f00 	ldrex	r3, [r3]
 8003038:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800303a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800303c:	f023 0310 	bic.w	r3, r3, #16
 8003040:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800304e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003050:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003052:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003054:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003056:	e841 2300 	strex	r3, r2, [r1]
 800305a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800305c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1e3      	bne.n	800302a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd ff39 	bl	8000ede <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800307a:	b29b      	uxth	r3, r3
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	b29b      	uxth	r3, r3
 8003080:	4619      	mov	r1, r3
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f8b6 	bl	80031f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003088:	e09c      	b.n	80031c4 <HAL_UART_IRQHandler+0x518>
 800308a:	bf00      	nop
 800308c:	08003341 	.word	0x08003341
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003098:	b29b      	uxth	r3, r3
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 808e 	beq.w	80031c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80030ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8089 	beq.w	80031c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	330c      	adds	r3, #12
 80030bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80030c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	330c      	adds	r3, #12
 80030d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80030da:	647a      	str	r2, [r7, #68]	@ 0x44
 80030dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030e2:	e841 2300 	strex	r3, r2, [r1]
 80030e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1e3      	bne.n	80030b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3314      	adds	r3, #20
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	623b      	str	r3, [r7, #32]
   return(result);
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3314      	adds	r3, #20
 800310e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003112:	633a      	str	r2, [r7, #48]	@ 0x30
 8003114:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1e3      	bne.n	80030ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	e853 3f00 	ldrex	r3, [r3]
 8003142:	60fb      	str	r3, [r7, #12]
   return(result);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0310 	bic.w	r3, r3, #16
 800314a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	330c      	adds	r3, #12
 8003154:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003158:	61fa      	str	r2, [r7, #28]
 800315a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315c:	69b9      	ldr	r1, [r7, #24]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	e841 2300 	strex	r3, r2, [r1]
 8003164:	617b      	str	r3, [r7, #20]
   return(result);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1e3      	bne.n	8003134 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003172:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003176:	4619      	mov	r1, r3
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f83b 	bl	80031f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800317e:	e023      	b.n	80031c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003188:	2b00      	cmp	r3, #0
 800318a:	d009      	beq.n	80031a0 <HAL_UART_IRQHandler+0x4f4>
 800318c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f8e5 	bl	8003368 <UART_Transmit_IT>
    return;
 800319e:	e014      	b.n	80031ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00e      	beq.n	80031ca <HAL_UART_IRQHandler+0x51e>
 80031ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f924 	bl	8003406 <UART_EndTransmit_IT>
    return;
 80031be:	e004      	b.n	80031ca <HAL_UART_IRQHandler+0x51e>
    return;
 80031c0:	bf00      	nop
 80031c2:	e002      	b.n	80031ca <HAL_UART_IRQHandler+0x51e>
      return;
 80031c4:	bf00      	nop
 80031c6:	e000      	b.n	80031ca <HAL_UART_IRQHandler+0x51e>
      return;
 80031c8:	bf00      	nop
  }
}
 80031ca:	37e8      	adds	r7, #232	@ 0xe8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr

080031e2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800320a:	b480      	push	{r7}
 800320c:	b085      	sub	sp, #20
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	4613      	mov	r3, r2
 8003216:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	88fa      	ldrh	r2, [r7, #6]
 8003222:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	88fa      	ldrh	r2, [r7, #6]
 8003228:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2222      	movs	r2, #34	@ 0x22
 8003234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d007      	beq.n	8003250 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800324e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0220 	orr.w	r2, r2, #32
 800326e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800327c:	b480      	push	{r7}
 800327e:	b095      	sub	sp, #84	@ 0x54
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800328e:	e853 3f00 	ldrex	r3, [r3]
 8003292:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003296:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800329a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	330c      	adds	r3, #12
 80032a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80032a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032ac:	e841 2300 	strex	r3, r2, [r1]
 80032b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1e5      	bne.n	8003284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3314      	adds	r3, #20
 80032be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	e853 3f00 	ldrex	r3, [r3]
 80032c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f023 0301 	bic.w	r3, r3, #1
 80032ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3314      	adds	r3, #20
 80032d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032e0:	e841 2300 	strex	r3, r2, [r1]
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e5      	bne.n	80032b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d119      	bne.n	8003328 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	330c      	adds	r3, #12
 80032fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	e853 3f00 	ldrex	r3, [r3]
 8003302:	60bb      	str	r3, [r7, #8]
   return(result);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f023 0310 	bic.w	r3, r3, #16
 800330a:	647b      	str	r3, [r7, #68]	@ 0x44
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	330c      	adds	r3, #12
 8003312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003314:	61ba      	str	r2, [r7, #24]
 8003316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003318:	6979      	ldr	r1, [r7, #20]
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	e841 2300 	strex	r3, r2, [r1]
 8003320:	613b      	str	r3, [r7, #16]
   return(result);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1e5      	bne.n	80032f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003336:	bf00      	nop
 8003338:	3754      	adds	r7, #84	@ 0x54
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f7ff ff41 	bl	80031e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003360:	bf00      	nop
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b21      	cmp	r3, #33	@ 0x21
 800337a:	d13e      	bne.n	80033fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003384:	d114      	bne.n	80033b0 <UART_Transmit_IT+0x48>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d110      	bne.n	80033b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	1c9a      	adds	r2, r3, #2
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	621a      	str	r2, [r3, #32]
 80033ae:	e008      	b.n	80033c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	1c59      	adds	r1, r3, #1
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6211      	str	r1, [r2, #32]
 80033ba:	781a      	ldrb	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	4619      	mov	r1, r3
 80033d0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10f      	bne.n	80033f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
  }
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr

08003406 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800341c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff fed2 	bl	80031d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b08c      	sub	sp, #48	@ 0x30
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b22      	cmp	r3, #34	@ 0x22
 8003448:	f040 80ae 	bne.w	80035a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003454:	d117      	bne.n	8003486 <UART_Receive_IT+0x50>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d113      	bne.n	8003486 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003466:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	b29b      	uxth	r3, r3
 8003470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003474:	b29a      	uxth	r2, r3
 8003476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003478:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347e:	1c9a      	adds	r2, r3, #2
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	629a      	str	r2, [r3, #40]	@ 0x28
 8003484:	e026      	b.n	80034d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800348c:	2300      	movs	r3, #0
 800348e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003498:	d007      	beq.n	80034aa <UART_Receive_IT+0x74>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <UART_Receive_IT+0x82>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b4:	701a      	strb	r2, [r3, #0]
 80034b6:	e008      	b.n	80034ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29b      	uxth	r3, r3
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4619      	mov	r1, r3
 80034e2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d15d      	bne.n	80035a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0220 	bic.w	r2, r2, #32
 80034f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003506:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0201 	bic.w	r2, r2, #1
 8003516:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	2b01      	cmp	r3, #1
 800352c:	d135      	bne.n	800359a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	330c      	adds	r3, #12
 800353a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	e853 3f00 	ldrex	r3, [r3]
 8003542:	613b      	str	r3, [r7, #16]
   return(result);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f023 0310 	bic.w	r3, r3, #16
 800354a:	627b      	str	r3, [r7, #36]	@ 0x24
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	330c      	adds	r3, #12
 8003552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003554:	623a      	str	r2, [r7, #32]
 8003556:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	69f9      	ldr	r1, [r7, #28]
 800355a:	6a3a      	ldr	r2, [r7, #32]
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	61bb      	str	r3, [r7, #24]
   return(result);
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e5      	bne.n	8003534 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	2b10      	cmp	r3, #16
 8003574:	d10a      	bne.n	800358c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003590:	4619      	mov	r1, r3
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff fe2e 	bl	80031f4 <HAL_UARTEx_RxEventCallback>
 8003598:	e002      	b.n	80035a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fc ffb8 	bl	8000510 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	e002      	b.n	80035aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	e000      	b.n	80035aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
  }
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3730      	adds	r7, #48	@ 0x30
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80035ee:	f023 030c 	bic.w	r3, r3, #12
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	430b      	orrs	r3, r1
 80035fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2c      	ldr	r2, [pc, #176]	@ (80036c8 <UART_SetConfig+0x114>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d103      	bne.n	8003624 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800361c:	f7fe faa4 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	e002      	b.n	800362a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003624:	f7fe fa8c 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 8003628:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	009a      	lsls	r2, r3, #2
 8003634:	441a      	add	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	4a22      	ldr	r2, [pc, #136]	@ (80036cc <UART_SetConfig+0x118>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	0119      	lsls	r1, r3, #4
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	009a      	lsls	r2, r3, #2
 8003654:	441a      	add	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003660:	4b1a      	ldr	r3, [pc, #104]	@ (80036cc <UART_SetConfig+0x118>)
 8003662:	fba3 0302 	umull	r0, r3, r3, r2
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	2064      	movs	r0, #100	@ 0x64
 800366a:	fb00 f303 	mul.w	r3, r0, r3
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	3332      	adds	r3, #50	@ 0x32
 8003674:	4a15      	ldr	r2, [pc, #84]	@ (80036cc <UART_SetConfig+0x118>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003680:	4419      	add	r1, r3
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	009a      	lsls	r2, r3, #2
 800368c:	441a      	add	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	fbb2 f2f3 	udiv	r2, r2, r3
 8003698:	4b0c      	ldr	r3, [pc, #48]	@ (80036cc <UART_SetConfig+0x118>)
 800369a:	fba3 0302 	umull	r0, r3, r3, r2
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	2064      	movs	r0, #100	@ 0x64
 80036a2:	fb00 f303 	mul.w	r3, r0, r3
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	3332      	adds	r3, #50	@ 0x32
 80036ac:	4a07      	ldr	r2, [pc, #28]	@ (80036cc <UART_SetConfig+0x118>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	f003 020f 	and.w	r2, r3, #15
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	440a      	add	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40013800 	.word	0x40013800
 80036cc:	51eb851f 	.word	0x51eb851f

080036d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f103 0208 	add.w	r2, r3, #8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f103 0208 	add.w	r2, r3, #8
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f103 0208 	add.w	r2, r3, #8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr

0800370e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr

08003726 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003726:	b480      	push	{r7}
 8003728:	b085      	sub	sp, #20
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	601a      	str	r2, [r3, #0]
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003782:	d103      	bne.n	800378c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	e00c      	b.n	80037a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3308      	adds	r3, #8
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	e002      	b.n	800379a <vListInsert+0x2e>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d2f6      	bcs.n	8003794 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	601a      	str	r2, [r3, #0]
}
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6892      	ldr	r2, [r2, #8]
 80037f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6852      	ldr	r2, [r2, #4]
 80037fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	429a      	cmp	r2, r3
 8003806:	d103      	bne.n	8003810 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	1e5a      	subs	r2, r3, #1
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr
	...

08003830 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10b      	bne.n	800385c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003856:	bf00      	nop
 8003858:	bf00      	nop
 800385a:	e7fd      	b.n	8003858 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800385c:	f001 fc26 	bl	80050ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003868:	68f9      	ldr	r1, [r7, #12]
 800386a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	441a      	add	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388c:	3b01      	subs	r3, #1
 800388e:	68f9      	ldr	r1, [r7, #12]
 8003890:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	441a      	add	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	22ff      	movs	r2, #255	@ 0xff
 80038a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	22ff      	movs	r2, #255	@ 0xff
 80038a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d114      	bne.n	80038dc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d01a      	beq.n	80038f0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3310      	adds	r3, #16
 80038be:	4618      	mov	r0, r3
 80038c0:	f001 f834 	bl	800492c <xTaskRemoveFromEventList>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d012      	beq.n	80038f0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003900 <xQueueGenericReset+0xd0>)
 80038cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	e009      	b.n	80038f0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3310      	adds	r3, #16
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff fef5 	bl	80036d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	3324      	adds	r3, #36	@ 0x24
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff fef0 	bl	80036d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038f0:	f001 fc0c 	bl	800510c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038f4:	2301      	movs	r3, #1
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	e000ed04 	.word	0xe000ed04

08003904 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	@ 0x28
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	4613      	mov	r3, r2
 8003910:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	613b      	str	r3, [r7, #16]
}
 800392a:	bf00      	nop
 800392c:	bf00      	nop
 800392e:	e7fd      	b.n	800392c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d102      	bne.n	800393c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	e004      	b.n	8003946 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	fb02 f303 	mul.w	r3, r2, r3
 8003944:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3348      	adds	r3, #72	@ 0x48
 800394a:	4618      	mov	r0, r3
 800394c:	f001 fcb0 	bl	80052b0 <pvPortMalloc>
 8003950:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00f      	beq.n	8003978 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	3348      	adds	r3, #72	@ 0x48
 800395c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003966:	79fa      	ldrb	r2, [r7, #7]
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f805 	bl	8003982 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003978:	69bb      	ldr	r3, [r7, #24]
	}
 800397a:	4618      	mov	r0, r3
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d103      	bne.n	800399e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	e002      	b.n	80039a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039b0:	2101      	movs	r1, #1
 80039b2:	69b8      	ldr	r0, [r7, #24]
 80039b4:	f7ff ff3c 	bl	8003830 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08e      	sub	sp, #56	@ 0x38
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80039d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10b      	bne.n	80039f0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80039ea:	bf00      	nop
 80039ec:	bf00      	nop
 80039ee:	e7fd      	b.n	80039ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d103      	bne.n	80039fe <xQueueGenericSendFromISR+0x3e>
 80039f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <xQueueGenericSendFromISR+0x42>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <xQueueGenericSendFromISR+0x44>
 8003a02:	2300      	movs	r3, #0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10b      	bne.n	8003a20 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	623b      	str	r3, [r7, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	bf00      	nop
 8003a1e:	e7fd      	b.n	8003a1c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d103      	bne.n	8003a2e <xQueueGenericSendFromISR+0x6e>
 8003a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <xQueueGenericSendFromISR+0x72>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <xQueueGenericSendFromISR+0x74>
 8003a32:	2300      	movs	r3, #0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10b      	bne.n	8003a50 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	61fb      	str	r3, [r7, #28]
}
 8003a4a:	bf00      	nop
 8003a4c:	bf00      	nop
 8003a4e:	e7fd      	b.n	8003a4c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a50:	f001 fbee 	bl	8005230 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a54:	f3ef 8211 	mrs	r2, BASEPRI
 8003a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	61ba      	str	r2, [r7, #24]
 8003a6a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a6c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d302      	bcc.n	8003a82 <xQueueGenericSendFromISR+0xc2>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d12c      	bne.n	8003adc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a92:	f000 f913 	bl	8003cbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a96:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a9e:	d112      	bne.n	8003ac6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d016      	beq.n	8003ad6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aaa:	3324      	adds	r3, #36	@ 0x24
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 ff3d 	bl	800492c <xTaskRemoveFromEventList>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00e      	beq.n	8003ad6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	e007      	b.n	8003ad6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ac6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003aca:	3301      	adds	r3, #1
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	b25a      	sxtb	r2, r3
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003ada:	e001      	b.n	8003ae0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003aea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3738      	adds	r7, #56	@ 0x38
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08c      	sub	sp, #48	@ 0x30
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b04:	2300      	movs	r3, #0
 8003b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10b      	bne.n	8003b2a <xQueueReceive+0x32>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	623b      	str	r3, [r7, #32]
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	e7fd      	b.n	8003b26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d103      	bne.n	8003b38 <xQueueReceive+0x40>
 8003b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <xQueueReceive+0x44>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <xQueueReceive+0x46>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10b      	bne.n	8003b5a <xQueueReceive+0x62>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	61fb      	str	r3, [r7, #28]
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	e7fd      	b.n	8003b56 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b5a:	f001 f8ab 	bl	8004cb4 <xTaskGetSchedulerState>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <xQueueReceive+0x72>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <xQueueReceive+0x76>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <xQueueReceive+0x78>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10b      	bne.n	8003b8c <xQueueReceive+0x94>
	__asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	61bb      	str	r3, [r7, #24]
}
 8003b86:	bf00      	nop
 8003b88:	bf00      	nop
 8003b8a:	e7fd      	b.n	8003b88 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b8c:	f001 fa8e 	bl	80050ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d01f      	beq.n	8003bdc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ba0:	f000 f8f6 	bl	8003d90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba6:	1e5a      	subs	r2, r3, #1
 8003ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003baa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00f      	beq.n	8003bd4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb6:	3310      	adds	r3, #16
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 feb7 	bl	800492c <xTaskRemoveFromEventList>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bc4:	4b3c      	ldr	r3, [pc, #240]	@ (8003cb8 <xQueueReceive+0x1c0>)
 8003bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003bd4:	f001 fa9a 	bl	800510c <vPortExitCritical>
				return pdPASS;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e069      	b.n	8003cb0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d103      	bne.n	8003bea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003be2:	f001 fa93 	bl	800510c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e062      	b.n	8003cb0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d106      	bne.n	8003bfe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bf0:	f107 0310 	add.w	r3, r7, #16
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fefd 	bl	80049f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bfe:	f001 fa85 	bl	800510c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c02:	f000 fca7 	bl	8004554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c06:	f001 fa51 	bl	80050ac <vPortEnterCritical>
 8003c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c10:	b25b      	sxtb	r3, r3
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c16:	d103      	bne.n	8003c20 <xQueueReceive+0x128>
 8003c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c26:	b25b      	sxtb	r3, r3
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c2c:	d103      	bne.n	8003c36 <xQueueReceive+0x13e>
 8003c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c36:	f001 fa69 	bl	800510c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c3a:	1d3a      	adds	r2, r7, #4
 8003c3c:	f107 0310 	add.w	r3, r7, #16
 8003c40:	4611      	mov	r1, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 feec 	bl	8004a20 <xTaskCheckForTimeOut>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d123      	bne.n	8003c96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c50:	f000 f916 	bl	8003e80 <prvIsQueueEmpty>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d017      	beq.n	8003c8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5c:	3324      	adds	r3, #36	@ 0x24
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4611      	mov	r1, r2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fe3c 	bl	80048e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c6a:	f000 f8b7 	bl	8003ddc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c6e:	f000 fc7f 	bl	8004570 <xTaskResumeAll>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d189      	bne.n	8003b8c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003c78:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb8 <xQueueReceive+0x1c0>)
 8003c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	e780      	b.n	8003b8c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c8c:	f000 f8a6 	bl	8003ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c90:	f000 fc6e 	bl	8004570 <xTaskResumeAll>
 8003c94:	e77a      	b.n	8003b8c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c98:	f000 f8a0 	bl	8003ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c9c:	f000 fc68 	bl	8004570 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ca0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ca2:	f000 f8ed 	bl	8003e80 <prvIsQueueEmpty>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f43f af6f 	beq.w	8003b8c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003cae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3730      	adds	r7, #48	@ 0x30
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	e000ed04 	.word	0xe000ed04

08003cbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10d      	bne.n	8003cf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d14d      	bne.n	8003d7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 f802 	bl	8004cf0 <xTaskPriorityDisinherit>
 8003cec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	605a      	str	r2, [r3, #4]
 8003cf4:	e043      	b.n	8003d7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d119      	bne.n	8003d30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6898      	ldr	r0, [r3, #8]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	461a      	mov	r2, r3
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	f001 fcdc 	bl	80056c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d14:	441a      	add	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d32b      	bcc.n	8003d7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	609a      	str	r2, [r3, #8]
 8003d2e:	e026      	b.n	8003d7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68d8      	ldr	r0, [r3, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	461a      	mov	r2, r3
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	f001 fcc2 	bl	80056c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d48:	425b      	negs	r3, r3
 8003d4a:	441a      	add	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d207      	bcs.n	8003d6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d64:	425b      	negs	r3, r3
 8003d66:	441a      	add	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d105      	bne.n	8003d7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003d86:	697b      	ldr	r3, [r7, #20]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d018      	beq.n	8003dd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	441a      	add	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d303      	bcc.n	8003dc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68d9      	ldr	r1, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	461a      	mov	r2, r3
 8003dce:	6838      	ldr	r0, [r7, #0]
 8003dd0:	f001 fc78 	bl	80056c4 <memcpy>
	}
}
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003de4:	f001 f962 	bl	80050ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003df0:	e011      	b.n	8003e16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d012      	beq.n	8003e20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3324      	adds	r3, #36	@ 0x24
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fd94 	bl	800492c <xTaskRemoveFromEventList>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e0a:	f000 fe6d 	bl	8004ae8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	dce9      	bgt.n	8003df2 <prvUnlockQueue+0x16>
 8003e1e:	e000      	b.n	8003e22 <prvUnlockQueue+0x46>
					break;
 8003e20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	22ff      	movs	r2, #255	@ 0xff
 8003e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003e2a:	f001 f96f 	bl	800510c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e2e:	f001 f93d 	bl	80050ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e3a:	e011      	b.n	8003e60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d012      	beq.n	8003e6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3310      	adds	r3, #16
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fd6f 	bl	800492c <xTaskRemoveFromEventList>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e54:	f000 fe48 	bl	8004ae8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e58:	7bbb      	ldrb	r3, [r7, #14]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	dce9      	bgt.n	8003e3c <prvUnlockQueue+0x60>
 8003e68:	e000      	b.n	8003e6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	22ff      	movs	r2, #255	@ 0xff
 8003e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003e74:	f001 f94a 	bl	800510c <vPortExitCritical>
}
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e88:	f001 f910 	bl	80050ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e94:	2301      	movs	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	e001      	b.n	8003e9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e9e:	f001 f935 	bl	800510c <vPortExitCritical>

	return xReturn;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08e      	sub	sp, #56	@ 0x38
 8003eb0:	af04      	add	r7, sp, #16
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10b      	bne.n	8003ed8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	623b      	str	r3, [r7, #32]
}
 8003ed2:	bf00      	nop
 8003ed4:	bf00      	nop
 8003ed6:	e7fd      	b.n	8003ed4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10b      	bne.n	8003ef6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	61fb      	str	r3, [r7, #28]
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	e7fd      	b.n	8003ef2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ef6:	2354      	movs	r3, #84	@ 0x54
 8003ef8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	2b54      	cmp	r3, #84	@ 0x54
 8003efe:	d00b      	beq.n	8003f18 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	61bb      	str	r3, [r7, #24]
}
 8003f12:	bf00      	nop
 8003f14:	bf00      	nop
 8003f16:	e7fd      	b.n	8003f14 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d01e      	beq.n	8003f5c <xTaskCreateStatic+0xb0>
 8003f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01b      	beq.n	8003f5c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f26:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f2c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f30:	2202      	movs	r2, #2
 8003f32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f36:	2300      	movs	r3, #0
 8003f38:	9303      	str	r3, [sp, #12]
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	9302      	str	r3, [sp, #8]
 8003f3e:	f107 0314 	add.w	r3, r7, #20
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f850 	bl	8003ff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f56:	f000 f8cd 	bl	80040f4 <prvAddNewTaskToReadyList>
 8003f5a:	e001      	b.n	8003f60 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f60:	697b      	ldr	r3, [r7, #20]
	}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3728      	adds	r7, #40	@ 0x28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b08c      	sub	sp, #48	@ 0x30
 8003f6e:	af04      	add	r7, sp, #16
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	603b      	str	r3, [r7, #0]
 8003f76:	4613      	mov	r3, r2
 8003f78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 f996 	bl	80052b0 <pvPortMalloc>
 8003f84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00e      	beq.n	8003faa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003f8c:	2054      	movs	r0, #84	@ 0x54
 8003f8e:	f001 f98f 	bl	80052b0 <pvPortMalloc>
 8003f92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fa0:	e005      	b.n	8003fae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fa2:	6978      	ldr	r0, [r7, #20]
 8003fa4:	f001 fa4c 	bl	8005440 <vPortFree>
 8003fa8:	e001      	b.n	8003fae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d017      	beq.n	8003fe4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fbc:	88fa      	ldrh	r2, [r7, #6]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	9303      	str	r3, [sp, #12]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	9302      	str	r3, [sp, #8]
 8003fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f80e 	bl	8003ff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fd8:	69f8      	ldr	r0, [r7, #28]
 8003fda:	f000 f88b 	bl	80040f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	e002      	b.n	8003fea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003fe4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003fe8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fea:	69bb      	ldr	r3, [r7, #24]
	}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3720      	adds	r7, #32
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004004:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800400c:	3b01      	subs	r3, #1
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	f023 0307 	bic.w	r3, r3, #7
 800401a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	617b      	str	r3, [r7, #20]
}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	e7fd      	b.n	800403a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]
 8004042:	e012      	b.n	800406a <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	4413      	add	r3, r2
 800404a:	7819      	ldrb	r1, [r3, #0]
 800404c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	4413      	add	r3, r2
 8004052:	3334      	adds	r3, #52	@ 0x34
 8004054:	460a      	mov	r2, r1
 8004056:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	4413      	add	r3, r2
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d006      	beq.n	8004072 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	3301      	adds	r3, #1
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	2b0f      	cmp	r3, #15
 800406e:	d9e9      	bls.n	8004044 <prvInitialiseNewTask+0x50>
 8004070:	e000      	b.n	8004074 <prvInitialiseNewTask+0x80>
		{
			break;
 8004072:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800407c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407e:	2b06      	cmp	r3, #6
 8004080:	d901      	bls.n	8004086 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004082:	2306      	movs	r3, #6
 8004084:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004088:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800408a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800408c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004090:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004094:	2200      	movs	r2, #0
 8004096:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409a:	3304      	adds	r3, #4
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fb36 	bl	800370e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a4:	3318      	adds	r3, #24
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff fb31 	bl	800370e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b4:	f1c3 0207 	rsb	r2, r3, #7
 80040b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	2200      	movs	r2, #0
 80040c6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	68f9      	ldr	r1, [r7, #12]
 80040d4:	69b8      	ldr	r0, [r7, #24]
 80040d6:	f000 fef9 	bl	8004ecc <pxPortInitialiseStack>
 80040da:	4602      	mov	r2, r0
 80040dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040de:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80040e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040ec:	bf00      	nop
 80040ee:	3720      	adds	r7, #32
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040fc:	f000 ffd6 	bl	80050ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004100:	4b2a      	ldr	r3, [pc, #168]	@ (80041ac <prvAddNewTaskToReadyList+0xb8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3301      	adds	r3, #1
 8004106:	4a29      	ldr	r2, [pc, #164]	@ (80041ac <prvAddNewTaskToReadyList+0xb8>)
 8004108:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800410a:	4b29      	ldr	r3, [pc, #164]	@ (80041b0 <prvAddNewTaskToReadyList+0xbc>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d109      	bne.n	8004126 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004112:	4a27      	ldr	r2, [pc, #156]	@ (80041b0 <prvAddNewTaskToReadyList+0xbc>)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004118:	4b24      	ldr	r3, [pc, #144]	@ (80041ac <prvAddNewTaskToReadyList+0xb8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d110      	bne.n	8004142 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004120:	f000 fd06 	bl	8004b30 <prvInitialiseTaskLists>
 8004124:	e00d      	b.n	8004142 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004126:	4b23      	ldr	r3, [pc, #140]	@ (80041b4 <prvAddNewTaskToReadyList+0xc0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800412e:	4b20      	ldr	r3, [pc, #128]	@ (80041b0 <prvAddNewTaskToReadyList+0xbc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	429a      	cmp	r2, r3
 800413a:	d802      	bhi.n	8004142 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800413c:	4a1c      	ldr	r2, [pc, #112]	@ (80041b0 <prvAddNewTaskToReadyList+0xbc>)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004142:	4b1d      	ldr	r3, [pc, #116]	@ (80041b8 <prvAddNewTaskToReadyList+0xc4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3301      	adds	r3, #1
 8004148:	4a1b      	ldr	r2, [pc, #108]	@ (80041b8 <prvAddNewTaskToReadyList+0xc4>)
 800414a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004150:	2201      	movs	r2, #1
 8004152:	409a      	lsls	r2, r3
 8004154:	4b19      	ldr	r3, [pc, #100]	@ (80041bc <prvAddNewTaskToReadyList+0xc8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4313      	orrs	r3, r2
 800415a:	4a18      	ldr	r2, [pc, #96]	@ (80041bc <prvAddNewTaskToReadyList+0xc8>)
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4a15      	ldr	r2, [pc, #84]	@ (80041c0 <prvAddNewTaskToReadyList+0xcc>)
 800416c:	441a      	add	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3304      	adds	r3, #4
 8004172:	4619      	mov	r1, r3
 8004174:	4610      	mov	r0, r2
 8004176:	f7ff fad6 	bl	8003726 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800417a:	f000 ffc7 	bl	800510c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800417e:	4b0d      	ldr	r3, [pc, #52]	@ (80041b4 <prvAddNewTaskToReadyList+0xc0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00e      	beq.n	80041a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004186:	4b0a      	ldr	r3, [pc, #40]	@ (80041b0 <prvAddNewTaskToReadyList+0xbc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	429a      	cmp	r2, r3
 8004192:	d207      	bcs.n	80041a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004194:	4b0b      	ldr	r3, [pc, #44]	@ (80041c4 <prvAddNewTaskToReadyList+0xd0>)
 8004196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	2000047c 	.word	0x2000047c
 80041b0:	2000037c 	.word	0x2000037c
 80041b4:	20000488 	.word	0x20000488
 80041b8:	20000498 	.word	0x20000498
 80041bc:	20000484 	.word	0x20000484
 80041c0:	20000380 	.word	0x20000380
 80041c4:	e000ed04 	.word	0xe000ed04

080041c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d018      	beq.n	800420c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80041da:	4b14      	ldr	r3, [pc, #80]	@ (800422c <vTaskDelay+0x64>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <vTaskDelay+0x32>
	__asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	60bb      	str	r3, [r7, #8]
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop
 80041f8:	e7fd      	b.n	80041f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80041fa:	f000 f9ab 	bl	8004554 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041fe:	2100      	movs	r1, #0
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fdfd 	bl	8004e00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004206:	f000 f9b3 	bl	8004570 <xTaskResumeAll>
 800420a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d107      	bne.n	8004222 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004212:	4b07      	ldr	r3, [pc, #28]	@ (8004230 <vTaskDelay+0x68>)
 8004214:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	200004a4 	.word	0x200004a4
 8004230:	e000ed04 	.word	0xe000ed04

08004234 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800423c:	f000 ff36 	bl	80050ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d102      	bne.n	800424c <vTaskSuspend+0x18>
 8004246:	4b3d      	ldr	r3, [pc, #244]	@ (800433c <vTaskSuspend+0x108>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	e000      	b.n	800424e <vTaskSuspend+0x1a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3304      	adds	r3, #4
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fac1 	bl	80037dc <uxListRemove>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d115      	bne.n	800428c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004264:	4936      	ldr	r1, [pc, #216]	@ (8004340 <vTaskSuspend+0x10c>)
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <vTaskSuspend+0x58>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427a:	2201      	movs	r2, #1
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	43da      	mvns	r2, r3
 8004282:	4b30      	ldr	r3, [pc, #192]	@ (8004344 <vTaskSuspend+0x110>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4013      	ands	r3, r2
 8004288:	4a2e      	ldr	r2, [pc, #184]	@ (8004344 <vTaskSuspend+0x110>)
 800428a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	d004      	beq.n	800429e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3318      	adds	r3, #24
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fa9f 	bl	80037dc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4619      	mov	r1, r3
 80042a4:	4828      	ldr	r0, [pc, #160]	@ (8004348 <vTaskSuspend+0x114>)
 80042a6:	f7ff fa3e 	bl	8003726 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d103      	bne.n	80042be <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80042be:	f000 ff25 	bl	800510c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80042c2:	4b22      	ldr	r3, [pc, #136]	@ (800434c <vTaskSuspend+0x118>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80042ca:	f000 feef 	bl	80050ac <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80042ce:	f000 fccd 	bl	8004c6c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80042d2:	f000 ff1b 	bl	800510c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80042d6:	4b19      	ldr	r3, [pc, #100]	@ (800433c <vTaskSuspend+0x108>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d128      	bne.n	8004332 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 80042e0:	4b1a      	ldr	r3, [pc, #104]	@ (800434c <vTaskSuspend+0x118>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d018      	beq.n	800431a <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80042e8:	4b19      	ldr	r3, [pc, #100]	@ (8004350 <vTaskSuspend+0x11c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00b      	beq.n	8004308 <vTaskSuspend+0xd4>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	60bb      	str	r3, [r7, #8]
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	e7fd      	b.n	8004304 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8004308:	4b12      	ldr	r3, [pc, #72]	@ (8004354 <vTaskSuspend+0x120>)
 800430a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004318:	e00b      	b.n	8004332 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800431a:	4b0b      	ldr	r3, [pc, #44]	@ (8004348 <vTaskSuspend+0x114>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b0e      	ldr	r3, [pc, #56]	@ (8004358 <vTaskSuspend+0x124>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d103      	bne.n	800432e <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8004326:	4b05      	ldr	r3, [pc, #20]	@ (800433c <vTaskSuspend+0x108>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
	}
 800432c:	e001      	b.n	8004332 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 800432e:	f000 fa7b 	bl	8004828 <vTaskSwitchContext>
	}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	2000037c 	.word	0x2000037c
 8004340:	20000380 	.word	0x20000380
 8004344:	20000484 	.word	0x20000484
 8004348:	20000468 	.word	0x20000468
 800434c:	20000488 	.word	0x20000488
 8004350:	200004a4 	.word	0x200004a4
 8004354:	e000ed04 	.word	0xe000ed04
 8004358:	2000047c 	.word	0x2000047c

0800435c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10b      	bne.n	800438a <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	60fb      	str	r3, [r7, #12]
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop
 8004388:	e7fd      	b.n	8004386 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	4a0f      	ldr	r2, [pc, #60]	@ (80043cc <prvTaskIsTaskSuspended+0x70>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d101      	bne.n	8004398 <prvTaskIsTaskSuspended+0x3c>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <prvTaskIsTaskSuspended+0x3e>
 8004398:	2300      	movs	r3, #0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00f      	beq.n	80043be <prvTaskIsTaskSuspended+0x62>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a2:	4a0b      	ldr	r2, [pc, #44]	@ (80043d0 <prvTaskIsTaskSuspended+0x74>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00a      	beq.n	80043be <prvTaskIsTaskSuspended+0x62>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <prvTaskIsTaskSuspended+0x58>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <prvTaskIsTaskSuspended+0x5a>
 80043b4:	2300      	movs	r3, #0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <prvTaskIsTaskSuspended+0x62>
				{
					xReturn = pdTRUE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043be:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80043c0:	4618      	mov	r0, r3
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20000468 	.word	0x20000468
 80043d0:	2000043c 	.word	0x2000043c

080043d4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10b      	bne.n	80043fe <vTaskResume+0x2a>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	60bb      	str	r3, [r7, #8]
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	e7fd      	b.n	80043fa <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d039      	beq.n	8004478 <vTaskResume+0xa4>
 8004404:	4b1e      	ldr	r3, [pc, #120]	@ (8004480 <vTaskResume+0xac>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	429a      	cmp	r2, r3
 800440c:	d034      	beq.n	8004478 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800440e:	f000 fe4d 	bl	80050ac <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f7ff ffa2 	bl	800435c <prvTaskIsTaskSuspended>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d02a      	beq.n	8004474 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3304      	adds	r3, #4
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff f9da 	bl	80037dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442c:	2201      	movs	r2, #1
 800442e:	409a      	lsls	r2, r3
 8004430:	4b14      	ldr	r3, [pc, #80]	@ (8004484 <vTaskResume+0xb0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4313      	orrs	r3, r2
 8004436:	4a13      	ldr	r2, [pc, #76]	@ (8004484 <vTaskResume+0xb0>)
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4a10      	ldr	r2, [pc, #64]	@ (8004488 <vTaskResume+0xb4>)
 8004448:	441a      	add	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3304      	adds	r3, #4
 800444e:	4619      	mov	r1, r3
 8004450:	4610      	mov	r0, r2
 8004452:	f7ff f968 	bl	8003726 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800445a:	4b09      	ldr	r3, [pc, #36]	@ (8004480 <vTaskResume+0xac>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004460:	429a      	cmp	r2, r3
 8004462:	d307      	bcc.n	8004474 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8004464:	4b09      	ldr	r3, [pc, #36]	@ (800448c <vTaskResume+0xb8>)
 8004466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8004474:	f000 fe4a 	bl	800510c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	2000037c 	.word	0x2000037c
 8004484:	20000484 	.word	0x20000484
 8004488:	20000380 	.word	0x20000380
 800448c:	e000ed04 	.word	0xe000ed04

08004490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	@ 0x28
 8004494:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004496:	2300      	movs	r3, #0
 8004498:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800449e:	463a      	mov	r2, r7
 80044a0:	1d39      	adds	r1, r7, #4
 80044a2:	f107 0308 	add.w	r3, r7, #8
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fb fe52 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044ac:	6839      	ldr	r1, [r7, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	9202      	str	r2, [sp, #8]
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	2300      	movs	r3, #0
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	2300      	movs	r3, #0
 80044bc:	460a      	mov	r2, r1
 80044be:	491f      	ldr	r1, [pc, #124]	@ (800453c <vTaskStartScheduler+0xac>)
 80044c0:	481f      	ldr	r0, [pc, #124]	@ (8004540 <vTaskStartScheduler+0xb0>)
 80044c2:	f7ff fcf3 	bl	8003eac <xTaskCreateStatic>
 80044c6:	4603      	mov	r3, r0
 80044c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004544 <vTaskStartScheduler+0xb4>)
 80044ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004544 <vTaskStartScheduler+0xb4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044d4:	2301      	movs	r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	e001      	b.n	80044de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d116      	bne.n	8004512 <vTaskStartScheduler+0x82>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	613b      	str	r3, [r7, #16]
}
 80044f6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044f8:	4b13      	ldr	r3, [pc, #76]	@ (8004548 <vTaskStartScheduler+0xb8>)
 80044fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004500:	4b12      	ldr	r3, [pc, #72]	@ (800454c <vTaskStartScheduler+0xbc>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004506:	4b12      	ldr	r3, [pc, #72]	@ (8004550 <vTaskStartScheduler+0xc0>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800450c:	f000 fd5c 	bl	8004fc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004510:	e00f      	b.n	8004532 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004518:	d10b      	bne.n	8004532 <vTaskStartScheduler+0xa2>
	__asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	60fb      	str	r3, [r7, #12]
}
 800452c:	bf00      	nop
 800452e:	bf00      	nop
 8004530:	e7fd      	b.n	800452e <vTaskStartScheduler+0x9e>
}
 8004532:	bf00      	nop
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	08005704 	.word	0x08005704
 8004540:	08004b01 	.word	0x08004b01
 8004544:	200004a0 	.word	0x200004a0
 8004548:	2000049c 	.word	0x2000049c
 800454c:	20000488 	.word	0x20000488
 8004550:	20000480 	.word	0x20000480

08004554 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004558:	4b04      	ldr	r3, [pc, #16]	@ (800456c <vTaskSuspendAll+0x18>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3301      	adds	r3, #1
 800455e:	4a03      	ldr	r2, [pc, #12]	@ (800456c <vTaskSuspendAll+0x18>)
 8004560:	6013      	str	r3, [r2, #0]
}
 8004562:	bf00      	nop
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	200004a4 	.word	0x200004a4

08004570 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800457a:	2300      	movs	r3, #0
 800457c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800457e:	4b42      	ldr	r3, [pc, #264]	@ (8004688 <xTaskResumeAll+0x118>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10b      	bne.n	800459e <xTaskResumeAll+0x2e>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	603b      	str	r3, [r7, #0]
}
 8004598:	bf00      	nop
 800459a:	bf00      	nop
 800459c:	e7fd      	b.n	800459a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800459e:	f000 fd85 	bl	80050ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045a2:	4b39      	ldr	r3, [pc, #228]	@ (8004688 <xTaskResumeAll+0x118>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	4a37      	ldr	r2, [pc, #220]	@ (8004688 <xTaskResumeAll+0x118>)
 80045aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045ac:	4b36      	ldr	r3, [pc, #216]	@ (8004688 <xTaskResumeAll+0x118>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d161      	bne.n	8004678 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045b4:	4b35      	ldr	r3, [pc, #212]	@ (800468c <xTaskResumeAll+0x11c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d05d      	beq.n	8004678 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045bc:	e02e      	b.n	800461c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80045be:	4b34      	ldr	r3, [pc, #208]	@ (8004690 <xTaskResumeAll+0x120>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	3318      	adds	r3, #24
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff f906 	bl	80037dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff f901 	bl	80037dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	2201      	movs	r2, #1
 80045e0:	409a      	lsls	r2, r3
 80045e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004694 <xTaskResumeAll+0x124>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004694 <xTaskResumeAll+0x124>)
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4a27      	ldr	r2, [pc, #156]	@ (8004698 <xTaskResumeAll+0x128>)
 80045fa:	441a      	add	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f7ff f88f 	bl	8003726 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800460c:	4b23      	ldr	r3, [pc, #140]	@ (800469c <xTaskResumeAll+0x12c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004612:	429a      	cmp	r2, r3
 8004614:	d302      	bcc.n	800461c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004616:	4b22      	ldr	r3, [pc, #136]	@ (80046a0 <xTaskResumeAll+0x130>)
 8004618:	2201      	movs	r2, #1
 800461a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800461c:	4b1c      	ldr	r3, [pc, #112]	@ (8004690 <xTaskResumeAll+0x120>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1cc      	bne.n	80045be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800462a:	f000 fb1f 	bl	8004c6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800462e:	4b1d      	ldr	r3, [pc, #116]	@ (80046a4 <xTaskResumeAll+0x134>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d010      	beq.n	800465c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800463a:	f000 f837 	bl	80046ac <xTaskIncrementTick>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004644:	4b16      	ldr	r3, [pc, #88]	@ (80046a0 <xTaskResumeAll+0x130>)
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3b01      	subs	r3, #1
 800464e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f1      	bne.n	800463a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004656:	4b13      	ldr	r3, [pc, #76]	@ (80046a4 <xTaskResumeAll+0x134>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800465c:	4b10      	ldr	r3, [pc, #64]	@ (80046a0 <xTaskResumeAll+0x130>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d009      	beq.n	8004678 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004664:	2301      	movs	r3, #1
 8004666:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004668:	4b0f      	ldr	r3, [pc, #60]	@ (80046a8 <xTaskResumeAll+0x138>)
 800466a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004678:	f000 fd48 	bl	800510c <vPortExitCritical>

	return xAlreadyYielded;
 800467c:	68bb      	ldr	r3, [r7, #8]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	200004a4 	.word	0x200004a4
 800468c:	2000047c 	.word	0x2000047c
 8004690:	2000043c 	.word	0x2000043c
 8004694:	20000484 	.word	0x20000484
 8004698:	20000380 	.word	0x20000380
 800469c:	2000037c 	.word	0x2000037c
 80046a0:	20000490 	.word	0x20000490
 80046a4:	2000048c 	.word	0x2000048c
 80046a8:	e000ed04 	.word	0xe000ed04

080046ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046b6:	4b51      	ldr	r3, [pc, #324]	@ (80047fc <xTaskIncrementTick+0x150>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 808e 	bne.w	80047dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004800 <xTaskIncrementTick+0x154>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3301      	adds	r3, #1
 80046c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046c8:	4a4d      	ldr	r2, [pc, #308]	@ (8004800 <xTaskIncrementTick+0x154>)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d121      	bne.n	8004718 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80046d4:	4b4b      	ldr	r3, [pc, #300]	@ (8004804 <xTaskIncrementTick+0x158>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00b      	beq.n	80046f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	603b      	str	r3, [r7, #0]
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	e7fd      	b.n	80046f2 <xTaskIncrementTick+0x46>
 80046f6:	4b43      	ldr	r3, [pc, #268]	@ (8004804 <xTaskIncrementTick+0x158>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	4b42      	ldr	r3, [pc, #264]	@ (8004808 <xTaskIncrementTick+0x15c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a40      	ldr	r2, [pc, #256]	@ (8004804 <xTaskIncrementTick+0x158>)
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	4a40      	ldr	r2, [pc, #256]	@ (8004808 <xTaskIncrementTick+0x15c>)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	4b40      	ldr	r3, [pc, #256]	@ (800480c <xTaskIncrementTick+0x160>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3301      	adds	r3, #1
 8004710:	4a3e      	ldr	r2, [pc, #248]	@ (800480c <xTaskIncrementTick+0x160>)
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	f000 faaa 	bl	8004c6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004718:	4b3d      	ldr	r3, [pc, #244]	@ (8004810 <xTaskIncrementTick+0x164>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	429a      	cmp	r2, r3
 8004720:	d34d      	bcc.n	80047be <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004722:	4b38      	ldr	r3, [pc, #224]	@ (8004804 <xTaskIncrementTick+0x158>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <xTaskIncrementTick+0x84>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <xTaskIncrementTick+0x86>
 8004730:	2300      	movs	r3, #0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d004      	beq.n	8004740 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004736:	4b36      	ldr	r3, [pc, #216]	@ (8004810 <xTaskIncrementTick+0x164>)
 8004738:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800473c:	601a      	str	r2, [r3, #0]
					break;
 800473e:	e03e      	b.n	80047be <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004740:	4b30      	ldr	r3, [pc, #192]	@ (8004804 <xTaskIncrementTick+0x158>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	429a      	cmp	r2, r3
 8004756:	d203      	bcs.n	8004760 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004758:	4a2d      	ldr	r2, [pc, #180]	@ (8004810 <xTaskIncrementTick+0x164>)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6013      	str	r3, [r2, #0]
						break;
 800475e:	e02e      	b.n	80047be <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	3304      	adds	r3, #4
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff f839 	bl	80037dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476e:	2b00      	cmp	r3, #0
 8004770:	d004      	beq.n	800477c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	3318      	adds	r3, #24
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff f830 	bl	80037dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004780:	2201      	movs	r2, #1
 8004782:	409a      	lsls	r2, r3
 8004784:	4b23      	ldr	r3, [pc, #140]	@ (8004814 <xTaskIncrementTick+0x168>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4313      	orrs	r3, r2
 800478a:	4a22      	ldr	r2, [pc, #136]	@ (8004814 <xTaskIncrementTick+0x168>)
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4a1f      	ldr	r2, [pc, #124]	@ (8004818 <xTaskIncrementTick+0x16c>)
 800479c:	441a      	add	r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f7fe ffbe 	bl	8003726 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ae:	4b1b      	ldr	r3, [pc, #108]	@ (800481c <xTaskIncrementTick+0x170>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d3b4      	bcc.n	8004722 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80047b8:	2301      	movs	r3, #1
 80047ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047bc:	e7b1      	b.n	8004722 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047be:	4b17      	ldr	r3, [pc, #92]	@ (800481c <xTaskIncrementTick+0x170>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047c4:	4914      	ldr	r1, [pc, #80]	@ (8004818 <xTaskIncrementTick+0x16c>)
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d907      	bls.n	80047e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80047d6:	2301      	movs	r3, #1
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	e004      	b.n	80047e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80047dc:	4b10      	ldr	r3, [pc, #64]	@ (8004820 <xTaskIncrementTick+0x174>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3301      	adds	r3, #1
 80047e2:	4a0f      	ldr	r2, [pc, #60]	@ (8004820 <xTaskIncrementTick+0x174>)
 80047e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80047e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004824 <xTaskIncrementTick+0x178>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80047ee:	2301      	movs	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80047f2:	697b      	ldr	r3, [r7, #20]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	200004a4 	.word	0x200004a4
 8004800:	20000480 	.word	0x20000480
 8004804:	20000434 	.word	0x20000434
 8004808:	20000438 	.word	0x20000438
 800480c:	20000494 	.word	0x20000494
 8004810:	2000049c 	.word	0x2000049c
 8004814:	20000484 	.word	0x20000484
 8004818:	20000380 	.word	0x20000380
 800481c:	2000037c 	.word	0x2000037c
 8004820:	2000048c 	.word	0x2000048c
 8004824:	20000490 	.word	0x20000490

08004828 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800482e:	4b27      	ldr	r3, [pc, #156]	@ (80048cc <vTaskSwitchContext+0xa4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004836:	4b26      	ldr	r3, [pc, #152]	@ (80048d0 <vTaskSwitchContext+0xa8>)
 8004838:	2201      	movs	r2, #1
 800483a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800483c:	e040      	b.n	80048c0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800483e:	4b24      	ldr	r3, [pc, #144]	@ (80048d0 <vTaskSwitchContext+0xa8>)
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004844:	4b23      	ldr	r3, [pc, #140]	@ (80048d4 <vTaskSwitchContext+0xac>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	fab3 f383 	clz	r3, r3
 8004850:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004852:	7afb      	ldrb	r3, [r7, #11]
 8004854:	f1c3 031f 	rsb	r3, r3, #31
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	491f      	ldr	r1, [pc, #124]	@ (80048d8 <vTaskSwitchContext+0xb0>)
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	4613      	mov	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10b      	bne.n	8004886 <vTaskSwitchContext+0x5e>
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	607b      	str	r3, [r7, #4]
}
 8004880:	bf00      	nop
 8004882:	bf00      	nop
 8004884:	e7fd      	b.n	8004882 <vTaskSwitchContext+0x5a>
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4a11      	ldr	r2, [pc, #68]	@ (80048d8 <vTaskSwitchContext+0xb0>)
 8004892:	4413      	add	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	605a      	str	r2, [r3, #4]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	3308      	adds	r3, #8
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d104      	bne.n	80048b6 <vTaskSwitchContext+0x8e>
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	605a      	str	r2, [r3, #4]
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	4a07      	ldr	r2, [pc, #28]	@ (80048dc <vTaskSwitchContext+0xb4>)
 80048be:	6013      	str	r3, [r2, #0]
}
 80048c0:	bf00      	nop
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	200004a4 	.word	0x200004a4
 80048d0:	20000490 	.word	0x20000490
 80048d4:	20000484 	.word	0x20000484
 80048d8:	20000380 	.word	0x20000380
 80048dc:	2000037c 	.word	0x2000037c

080048e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10b      	bne.n	8004908 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	60fb      	str	r3, [r7, #12]
}
 8004902:	bf00      	nop
 8004904:	bf00      	nop
 8004906:	e7fd      	b.n	8004904 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004908:	4b07      	ldr	r3, [pc, #28]	@ (8004928 <vTaskPlaceOnEventList+0x48>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3318      	adds	r3, #24
 800490e:	4619      	mov	r1, r3
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7fe ff2b 	bl	800376c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004916:	2101      	movs	r1, #1
 8004918:	6838      	ldr	r0, [r7, #0]
 800491a:	f000 fa71 	bl	8004e00 <prvAddCurrentTaskToDelayedList>
}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	2000037c 	.word	0x2000037c

0800492c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	60fb      	str	r3, [r7, #12]
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	e7fd      	b.n	8004956 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	3318      	adds	r3, #24
 800495e:	4618      	mov	r0, r3
 8004960:	f7fe ff3c 	bl	80037dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004964:	4b1d      	ldr	r3, [pc, #116]	@ (80049dc <xTaskRemoveFromEventList+0xb0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d11c      	bne.n	80049a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	3304      	adds	r3, #4
 8004970:	4618      	mov	r0, r3
 8004972:	f7fe ff33 	bl	80037dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497a:	2201      	movs	r2, #1
 800497c:	409a      	lsls	r2, r3
 800497e:	4b18      	ldr	r3, [pc, #96]	@ (80049e0 <xTaskRemoveFromEventList+0xb4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4313      	orrs	r3, r2
 8004984:	4a16      	ldr	r2, [pc, #88]	@ (80049e0 <xTaskRemoveFromEventList+0xb4>)
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4a13      	ldr	r2, [pc, #76]	@ (80049e4 <xTaskRemoveFromEventList+0xb8>)
 8004996:	441a      	add	r2, r3
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	3304      	adds	r3, #4
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f7fe fec1 	bl	8003726 <vListInsertEnd>
 80049a4:	e005      	b.n	80049b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	3318      	adds	r3, #24
 80049aa:	4619      	mov	r1, r3
 80049ac:	480e      	ldr	r0, [pc, #56]	@ (80049e8 <xTaskRemoveFromEventList+0xbc>)
 80049ae:	f7fe feba 	bl	8003726 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049b6:	4b0d      	ldr	r3, [pc, #52]	@ (80049ec <xTaskRemoveFromEventList+0xc0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049bc:	429a      	cmp	r2, r3
 80049be:	d905      	bls.n	80049cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049c0:	2301      	movs	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049c4:	4b0a      	ldr	r3, [pc, #40]	@ (80049f0 <xTaskRemoveFromEventList+0xc4>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e001      	b.n	80049d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80049d0:	697b      	ldr	r3, [r7, #20]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	200004a4 	.word	0x200004a4
 80049e0:	20000484 	.word	0x20000484
 80049e4:	20000380 	.word	0x20000380
 80049e8:	2000043c 	.word	0x2000043c
 80049ec:	2000037c 	.word	0x2000037c
 80049f0:	20000490 	.word	0x20000490

080049f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049fc:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <vTaskInternalSetTimeOutState+0x24>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a04:	4b05      	ldr	r3, [pc, #20]	@ (8004a1c <vTaskInternalSetTimeOutState+0x28>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	605a      	str	r2, [r3, #4]
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20000494 	.word	0x20000494
 8004a1c:	20000480 	.word	0x20000480

08004a20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10b      	bne.n	8004a48 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	613b      	str	r3, [r7, #16]
}
 8004a42:	bf00      	nop
 8004a44:	bf00      	nop
 8004a46:	e7fd      	b.n	8004a44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10b      	bne.n	8004a66 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	60fb      	str	r3, [r7, #12]
}
 8004a60:	bf00      	nop
 8004a62:	bf00      	nop
 8004a64:	e7fd      	b.n	8004a62 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004a66:	f000 fb21 	bl	80050ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ae0 <xTaskCheckForTimeOut+0xc0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a82:	d102      	bne.n	8004a8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	e023      	b.n	8004ad2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ae4 <xTaskCheckForTimeOut+0xc4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d007      	beq.n	8004aa6 <xTaskCheckForTimeOut+0x86>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d302      	bcc.n	8004aa6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	61fb      	str	r3, [r7, #28]
 8004aa4:	e015      	b.n	8004ad2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d20b      	bcs.n	8004ac8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	1ad2      	subs	r2, r2, r3
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff ff99 	bl	80049f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
 8004ac6:	e004      	b.n	8004ad2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ad2:	f000 fb1b 	bl	800510c <vPortExitCritical>

	return xReturn;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3720      	adds	r7, #32
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000480 	.word	0x20000480
 8004ae4:	20000494 	.word	0x20000494

08004ae8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004aec:	4b03      	ldr	r3, [pc, #12]	@ (8004afc <vTaskMissedYield+0x14>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
}
 8004af2:	bf00      	nop
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20000490 	.word	0x20000490

08004b00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b08:	f000 f852 	bl	8004bb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b0c:	4b06      	ldr	r3, [pc, #24]	@ (8004b28 <prvIdleTask+0x28>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d9f9      	bls.n	8004b08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b14:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <prvIdleTask+0x2c>)
 8004b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b24:	e7f0      	b.n	8004b08 <prvIdleTask+0x8>
 8004b26:	bf00      	nop
 8004b28:	20000380 	.word	0x20000380
 8004b2c:	e000ed04 	.word	0xe000ed04

08004b30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b36:	2300      	movs	r3, #0
 8004b38:	607b      	str	r3, [r7, #4]
 8004b3a:	e00c      	b.n	8004b56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4a12      	ldr	r2, [pc, #72]	@ (8004b90 <prvInitialiseTaskLists+0x60>)
 8004b48:	4413      	add	r3, r2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe fdc0 	bl	80036d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3301      	adds	r3, #1
 8004b54:	607b      	str	r3, [r7, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b06      	cmp	r3, #6
 8004b5a:	d9ef      	bls.n	8004b3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b5c:	480d      	ldr	r0, [pc, #52]	@ (8004b94 <prvInitialiseTaskLists+0x64>)
 8004b5e:	f7fe fdb7 	bl	80036d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b62:	480d      	ldr	r0, [pc, #52]	@ (8004b98 <prvInitialiseTaskLists+0x68>)
 8004b64:	f7fe fdb4 	bl	80036d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b68:	480c      	ldr	r0, [pc, #48]	@ (8004b9c <prvInitialiseTaskLists+0x6c>)
 8004b6a:	f7fe fdb1 	bl	80036d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b6e:	480c      	ldr	r0, [pc, #48]	@ (8004ba0 <prvInitialiseTaskLists+0x70>)
 8004b70:	f7fe fdae 	bl	80036d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b74:	480b      	ldr	r0, [pc, #44]	@ (8004ba4 <prvInitialiseTaskLists+0x74>)
 8004b76:	f7fe fdab 	bl	80036d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba8 <prvInitialiseTaskLists+0x78>)
 8004b7c:	4a05      	ldr	r2, [pc, #20]	@ (8004b94 <prvInitialiseTaskLists+0x64>)
 8004b7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b80:	4b0a      	ldr	r3, [pc, #40]	@ (8004bac <prvInitialiseTaskLists+0x7c>)
 8004b82:	4a05      	ldr	r2, [pc, #20]	@ (8004b98 <prvInitialiseTaskLists+0x68>)
 8004b84:	601a      	str	r2, [r3, #0]
}
 8004b86:	bf00      	nop
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000380 	.word	0x20000380
 8004b94:	2000040c 	.word	0x2000040c
 8004b98:	20000420 	.word	0x20000420
 8004b9c:	2000043c 	.word	0x2000043c
 8004ba0:	20000450 	.word	0x20000450
 8004ba4:	20000468 	.word	0x20000468
 8004ba8:	20000434 	.word	0x20000434
 8004bac:	20000438 	.word	0x20000438

08004bb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bb6:	e019      	b.n	8004bec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004bb8:	f000 fa78 	bl	80050ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004bbc:	4b10      	ldr	r3, [pc, #64]	@ (8004c00 <prvCheckTasksWaitingTermination+0x50>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fe fe07 	bl	80037dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bce:	4b0d      	ldr	r3, [pc, #52]	@ (8004c04 <prvCheckTasksWaitingTermination+0x54>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8004c04 <prvCheckTasksWaitingTermination+0x54>)
 8004bd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c08 <prvCheckTasksWaitingTermination+0x58>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	4a0a      	ldr	r2, [pc, #40]	@ (8004c08 <prvCheckTasksWaitingTermination+0x58>)
 8004be0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004be2:	f000 fa93 	bl	800510c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f810 	bl	8004c0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bec:	4b06      	ldr	r3, [pc, #24]	@ (8004c08 <prvCheckTasksWaitingTermination+0x58>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e1      	bne.n	8004bb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000450 	.word	0x20000450
 8004c04:	2000047c 	.word	0x2000047c
 8004c08:	20000464 	.word	0x20000464

08004c0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d108      	bne.n	8004c30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fc0c 	bl	8005440 <vPortFree>
				vPortFree( pxTCB );
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fc09 	bl	8005440 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c2e:	e019      	b.n	8004c64 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d103      	bne.n	8004c42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fc00 	bl	8005440 <vPortFree>
	}
 8004c40:	e010      	b.n	8004c64 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d00b      	beq.n	8004c64 <prvDeleteTCB+0x58>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	60fb      	str	r3, [r7, #12]
}
 8004c5e:	bf00      	nop
 8004c60:	bf00      	nop
 8004c62:	e7fd      	b.n	8004c60 <prvDeleteTCB+0x54>
	}
 8004c64:	bf00      	nop
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c72:	4b0e      	ldr	r3, [pc, #56]	@ (8004cac <prvResetNextTaskUnblockTime+0x40>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <prvResetNextTaskUnblockTime+0x14>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <prvResetNextTaskUnblockTime+0x16>
 8004c80:	2300      	movs	r3, #0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d004      	beq.n	8004c90 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c86:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb0 <prvResetNextTaskUnblockTime+0x44>)
 8004c88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c8c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c8e:	e008      	b.n	8004ca2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c90:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <prvResetNextTaskUnblockTime+0x40>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4a04      	ldr	r2, [pc, #16]	@ (8004cb0 <prvResetNextTaskUnblockTime+0x44>)
 8004ca0:	6013      	str	r3, [r2, #0]
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr
 8004cac:	20000434 	.word	0x20000434
 8004cb0:	2000049c 	.word	0x2000049c

08004cb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004cba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce8 <xTaskGetSchedulerState+0x34>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d102      	bne.n	8004cc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	607b      	str	r3, [r7, #4]
 8004cc6:	e008      	b.n	8004cda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cc8:	4b08      	ldr	r3, [pc, #32]	@ (8004cec <xTaskGetSchedulerState+0x38>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	607b      	str	r3, [r7, #4]
 8004cd4:	e001      	b.n	8004cda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004cda:	687b      	ldr	r3, [r7, #4]
	}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20000488 	.word	0x20000488
 8004cec:	200004a4 	.word	0x200004a4

08004cf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d070      	beq.n	8004de8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d06:	4b3b      	ldr	r3, [pc, #236]	@ (8004df4 <xTaskPriorityDisinherit+0x104>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d00b      	beq.n	8004d28 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	60fb      	str	r3, [r7, #12]
}
 8004d22:	bf00      	nop
 8004d24:	bf00      	nop
 8004d26:	e7fd      	b.n	8004d24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10b      	bne.n	8004d48 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	60bb      	str	r3, [r7, #8]
}
 8004d42:	bf00      	nop
 8004d44:	bf00      	nop
 8004d46:	e7fd      	b.n	8004d44 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d4c:	1e5a      	subs	r2, r3, #1
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d044      	beq.n	8004de8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d140      	bne.n	8004de8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe fd36 	bl	80037dc <uxListRemove>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d115      	bne.n	8004da2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7a:	491f      	ldr	r1, [pc, #124]	@ (8004df8 <xTaskPriorityDisinherit+0x108>)
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10a      	bne.n	8004da2 <xTaskPriorityDisinherit+0xb2>
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d90:	2201      	movs	r2, #1
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43da      	mvns	r2, r3
 8004d98:	4b18      	ldr	r3, [pc, #96]	@ (8004dfc <xTaskPriorityDisinherit+0x10c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	4a17      	ldr	r2, [pc, #92]	@ (8004dfc <xTaskPriorityDisinherit+0x10c>)
 8004da0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dae:	f1c3 0207 	rsb	r2, r3, #7
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dba:	2201      	movs	r2, #1
 8004dbc:	409a      	lsls	r2, r3
 8004dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8004dfc <xTaskPriorityDisinherit+0x10c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8004dfc <xTaskPriorityDisinherit+0x10c>)
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4a08      	ldr	r2, [pc, #32]	@ (8004df8 <xTaskPriorityDisinherit+0x108>)
 8004dd6:	441a      	add	r2, r3
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f7fe fca1 	bl	8003726 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004de4:	2301      	movs	r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004de8:	697b      	ldr	r3, [r7, #20]
	}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	2000037c 	.word	0x2000037c
 8004df8:	20000380 	.word	0x20000380
 8004dfc:	20000484 	.word	0x20000484

08004e00 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e0a:	4b29      	ldr	r3, [pc, #164]	@ (8004eb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e10:	4b28      	ldr	r3, [pc, #160]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fe fce0 	bl	80037dc <uxListRemove>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10b      	bne.n	8004e3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004e22:	4b24      	ldr	r3, [pc, #144]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e28:	2201      	movs	r2, #1
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43da      	mvns	r2, r3
 8004e30:	4b21      	ldr	r3, [pc, #132]	@ (8004eb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4013      	ands	r3, r2
 8004e36:	4a20      	ldr	r2, [pc, #128]	@ (8004eb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e40:	d10a      	bne.n	8004e58 <prvAddCurrentTaskToDelayedList+0x58>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d007      	beq.n	8004e58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e48:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4619      	mov	r1, r3
 8004e50:	481a      	ldr	r0, [pc, #104]	@ (8004ebc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e52:	f7fe fc68 	bl	8003726 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e56:	e026      	b.n	8004ea6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e60:	4b14      	ldr	r3, [pc, #80]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d209      	bcs.n	8004e84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e70:	4b13      	ldr	r3, [pc, #76]	@ (8004ec0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	f7fe fc75 	bl	800376c <vListInsert>
}
 8004e82:	e010      	b.n	8004ea6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e84:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f7fe fc6b 	bl	800376c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e96:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d202      	bcs.n	8004ea6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ea0:	4a09      	ldr	r2, [pc, #36]	@ (8004ec8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	6013      	str	r3, [r2, #0]
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20000480 	.word	0x20000480
 8004eb4:	2000037c 	.word	0x2000037c
 8004eb8:	20000484 	.word	0x20000484
 8004ebc:	20000468 	.word	0x20000468
 8004ec0:	20000438 	.word	0x20000438
 8004ec4:	20000434 	.word	0x20000434
 8004ec8:	2000049c 	.word	0x2000049c

08004ecc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3b04      	subs	r3, #4
 8004edc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3b04      	subs	r3, #4
 8004eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f023 0201 	bic.w	r2, r3, #1
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3b04      	subs	r3, #4
 8004efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004efc:	4a08      	ldr	r2, [pc, #32]	@ (8004f20 <pxPortInitialiseStack+0x54>)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3b14      	subs	r3, #20
 8004f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3b20      	subs	r3, #32
 8004f12:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f14:	68fb      	ldr	r3, [r7, #12]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr
 8004f20:	08004f25 	.word	0x08004f25

08004f24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f2e:	4b12      	ldr	r3, [pc, #72]	@ (8004f78 <prvTaskExitError+0x54>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f36:	d00b      	beq.n	8004f50 <prvTaskExitError+0x2c>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	60fb      	str	r3, [r7, #12]
}
 8004f4a:	bf00      	nop
 8004f4c:	bf00      	nop
 8004f4e:	e7fd      	b.n	8004f4c <prvTaskExitError+0x28>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	60bb      	str	r3, [r7, #8]
}
 8004f62:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f64:	bf00      	nop
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0fc      	beq.n	8004f66 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr
 8004f78:	20000010 	.word	0x20000010
 8004f7c:	00000000 	.word	0x00000000

08004f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f80:	4b07      	ldr	r3, [pc, #28]	@ (8004fa0 <pxCurrentTCBConst2>)
 8004f82:	6819      	ldr	r1, [r3, #0]
 8004f84:	6808      	ldr	r0, [r1, #0]
 8004f86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f8a:	f380 8809 	msr	PSP, r0
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f04f 0000 	mov.w	r0, #0
 8004f96:	f380 8811 	msr	BASEPRI, r0
 8004f9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004f9e:	4770      	bx	lr

08004fa0 <pxCurrentTCBConst2>:
 8004fa0:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop

08004fa8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004fa8:	4806      	ldr	r0, [pc, #24]	@ (8004fc4 <prvPortStartFirstTask+0x1c>)
 8004faa:	6800      	ldr	r0, [r0, #0]
 8004fac:	6800      	ldr	r0, [r0, #0]
 8004fae:	f380 8808 	msr	MSP, r0
 8004fb2:	b662      	cpsie	i
 8004fb4:	b661      	cpsie	f
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	df00      	svc	0
 8004fc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fc2:	bf00      	nop
 8004fc4:	e000ed08 	.word	0xe000ed08

08004fc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fce:	4b32      	ldr	r3, [pc, #200]	@ (8005098 <xPortStartScheduler+0xd0>)
 8004fd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	22ff      	movs	r2, #255	@ 0xff
 8004fde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800509c <xPortStartScheduler+0xd4>)
 8004ff4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80050a0 <xPortStartScheduler+0xd8>)
 8004ff8:	2207      	movs	r2, #7
 8004ffa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ffc:	e009      	b.n	8005012 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004ffe:	4b28      	ldr	r3, [pc, #160]	@ (80050a0 <xPortStartScheduler+0xd8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3b01      	subs	r3, #1
 8005004:	4a26      	ldr	r2, [pc, #152]	@ (80050a0 <xPortStartScheduler+0xd8>)
 8005006:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	b2db      	uxtb	r3, r3
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	b2db      	uxtb	r3, r3
 8005010:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005012:	78fb      	ldrb	r3, [r7, #3]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800501a:	2b80      	cmp	r3, #128	@ 0x80
 800501c:	d0ef      	beq.n	8004ffe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800501e:	4b20      	ldr	r3, [pc, #128]	@ (80050a0 <xPortStartScheduler+0xd8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f1c3 0307 	rsb	r3, r3, #7
 8005026:	2b04      	cmp	r3, #4
 8005028:	d00b      	beq.n	8005042 <xPortStartScheduler+0x7a>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	60bb      	str	r3, [r7, #8]
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	e7fd      	b.n	800503e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005042:	4b17      	ldr	r3, [pc, #92]	@ (80050a0 <xPortStartScheduler+0xd8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	4a15      	ldr	r2, [pc, #84]	@ (80050a0 <xPortStartScheduler+0xd8>)
 800504a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800504c:	4b14      	ldr	r3, [pc, #80]	@ (80050a0 <xPortStartScheduler+0xd8>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005054:	4a12      	ldr	r2, [pc, #72]	@ (80050a0 <xPortStartScheduler+0xd8>)
 8005056:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	b2da      	uxtb	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005060:	4b10      	ldr	r3, [pc, #64]	@ (80050a4 <xPortStartScheduler+0xdc>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a0f      	ldr	r2, [pc, #60]	@ (80050a4 <xPortStartScheduler+0xdc>)
 8005066:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800506a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800506c:	4b0d      	ldr	r3, [pc, #52]	@ (80050a4 <xPortStartScheduler+0xdc>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0c      	ldr	r2, [pc, #48]	@ (80050a4 <xPortStartScheduler+0xdc>)
 8005072:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005076:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005078:	f000 f8b8 	bl	80051ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800507c:	4b0a      	ldr	r3, [pc, #40]	@ (80050a8 <xPortStartScheduler+0xe0>)
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005082:	f7ff ff91 	bl	8004fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005086:	f7ff fbcf 	bl	8004828 <vTaskSwitchContext>
	prvTaskExitError();
 800508a:	f7ff ff4b 	bl	8004f24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	e000e400 	.word	0xe000e400
 800509c:	200004a8 	.word	0x200004a8
 80050a0:	200004ac 	.word	0x200004ac
 80050a4:	e000ed20 	.word	0xe000ed20
 80050a8:	20000010 	.word	0x20000010

080050ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	607b      	str	r3, [r7, #4]
}
 80050c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005104 <vPortEnterCritical+0x58>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3301      	adds	r3, #1
 80050cc:	4a0d      	ldr	r2, [pc, #52]	@ (8005104 <vPortEnterCritical+0x58>)
 80050ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <vPortEnterCritical+0x58>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d110      	bne.n	80050fa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005108 <vPortEnterCritical+0x5c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00b      	beq.n	80050fa <vPortEnterCritical+0x4e>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	603b      	str	r3, [r7, #0]
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	e7fd      	b.n	80050f6 <vPortEnterCritical+0x4a>
	}
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr
 8005104:	20000010 	.word	0x20000010
 8005108:	e000ed04 	.word	0xe000ed04

0800510c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005112:	4b12      	ldr	r3, [pc, #72]	@ (800515c <vPortExitCritical+0x50>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10b      	bne.n	8005132 <vPortExitCritical+0x26>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	607b      	str	r3, [r7, #4]
}
 800512c:	bf00      	nop
 800512e:	bf00      	nop
 8005130:	e7fd      	b.n	800512e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005132:	4b0a      	ldr	r3, [pc, #40]	@ (800515c <vPortExitCritical+0x50>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3b01      	subs	r3, #1
 8005138:	4a08      	ldr	r2, [pc, #32]	@ (800515c <vPortExitCritical+0x50>)
 800513a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800513c:	4b07      	ldr	r3, [pc, #28]	@ (800515c <vPortExitCritical+0x50>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d105      	bne.n	8005150 <vPortExitCritical+0x44>
 8005144:	2300      	movs	r3, #0
 8005146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	f383 8811 	msr	BASEPRI, r3
}
 800514e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	bc80      	pop	{r7}
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	20000010 	.word	0x20000010

08005160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005160:	f3ef 8009 	mrs	r0, PSP
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	4b0d      	ldr	r3, [pc, #52]	@ (80051a0 <pxCurrentTCBConst>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005170:	6010      	str	r0, [r2, #0]
 8005172:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005176:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800517a:	f380 8811 	msr	BASEPRI, r0
 800517e:	f7ff fb53 	bl	8004828 <vTaskSwitchContext>
 8005182:	f04f 0000 	mov.w	r0, #0
 8005186:	f380 8811 	msr	BASEPRI, r0
 800518a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800518e:	6819      	ldr	r1, [r3, #0]
 8005190:	6808      	ldr	r0, [r1, #0]
 8005192:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005196:	f380 8809 	msr	PSP, r0
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	4770      	bx	lr

080051a0 <pxCurrentTCBConst>:
 80051a0:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop

080051a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	607b      	str	r3, [r7, #4]
}
 80051c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051c2:	f7ff fa73 	bl	80046ac <xTaskIncrementTick>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051cc:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <SysTick_Handler+0x40>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	2300      	movs	r3, #0
 80051d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f383 8811 	msr	BASEPRI, r3
}
 80051de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	e000ed04 	.word	0xe000ed04

080051ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051f0:	4b0a      	ldr	r3, [pc, #40]	@ (800521c <vPortSetupTimerInterrupt+0x30>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005220 <vPortSetupTimerInterrupt+0x34>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051fc:	4b09      	ldr	r3, [pc, #36]	@ (8005224 <vPortSetupTimerInterrupt+0x38>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a09      	ldr	r2, [pc, #36]	@ (8005228 <vPortSetupTimerInterrupt+0x3c>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	099b      	lsrs	r3, r3, #6
 8005208:	4a08      	ldr	r2, [pc, #32]	@ (800522c <vPortSetupTimerInterrupt+0x40>)
 800520a:	3b01      	subs	r3, #1
 800520c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800520e:	4b03      	ldr	r3, [pc, #12]	@ (800521c <vPortSetupTimerInterrupt+0x30>)
 8005210:	2207      	movs	r2, #7
 8005212:	601a      	str	r2, [r3, #0]
}
 8005214:	bf00      	nop
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr
 800521c:	e000e010 	.word	0xe000e010
 8005220:	e000e018 	.word	0xe000e018
 8005224:	20000004 	.word	0x20000004
 8005228:	10624dd3 	.word	0x10624dd3
 800522c:	e000e014 	.word	0xe000e014

08005230 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005236:	f3ef 8305 	mrs	r3, IPSR
 800523a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b0f      	cmp	r3, #15
 8005240:	d915      	bls.n	800526e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005242:	4a17      	ldr	r2, [pc, #92]	@ (80052a0 <vPortValidateInterruptPriority+0x70>)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800524c:	4b15      	ldr	r3, [pc, #84]	@ (80052a4 <vPortValidateInterruptPriority+0x74>)
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	7afa      	ldrb	r2, [r7, #11]
 8005252:	429a      	cmp	r2, r3
 8005254:	d20b      	bcs.n	800526e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	607b      	str	r3, [r7, #4]
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	e7fd      	b.n	800526a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800526e:	4b0e      	ldr	r3, [pc, #56]	@ (80052a8 <vPortValidateInterruptPriority+0x78>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005276:	4b0d      	ldr	r3, [pc, #52]	@ (80052ac <vPortValidateInterruptPriority+0x7c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d90b      	bls.n	8005296 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	603b      	str	r3, [r7, #0]
}
 8005290:	bf00      	nop
 8005292:	bf00      	nop
 8005294:	e7fd      	b.n	8005292 <vPortValidateInterruptPriority+0x62>
	}
 8005296:	bf00      	nop
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr
 80052a0:	e000e3f0 	.word	0xe000e3f0
 80052a4:	200004a8 	.word	0x200004a8
 80052a8:	e000ed0c 	.word	0xe000ed0c
 80052ac:	200004ac 	.word	0x200004ac

080052b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08a      	sub	sp, #40	@ 0x28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052b8:	2300      	movs	r3, #0
 80052ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052bc:	f7ff f94a 	bl	8004554 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052c0:	4b5a      	ldr	r3, [pc, #360]	@ (800542c <pvPortMalloc+0x17c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052c8:	f000 f916 	bl	80054f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052cc:	4b58      	ldr	r3, [pc, #352]	@ (8005430 <pvPortMalloc+0x180>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f040 8090 	bne.w	80053fa <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01e      	beq.n	800531e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80052e0:	2208      	movs	r2, #8
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4413      	add	r3, r2
 80052e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d015      	beq.n	800531e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f023 0307 	bic.w	r3, r3, #7
 80052f8:	3308      	adds	r3, #8
 80052fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00b      	beq.n	800531e <pvPortMalloc+0x6e>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	617b      	str	r3, [r7, #20]
}
 8005318:	bf00      	nop
 800531a:	bf00      	nop
 800531c:	e7fd      	b.n	800531a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d06a      	beq.n	80053fa <pvPortMalloc+0x14a>
 8005324:	4b43      	ldr	r3, [pc, #268]	@ (8005434 <pvPortMalloc+0x184>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	429a      	cmp	r2, r3
 800532c:	d865      	bhi.n	80053fa <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800532e:	4b42      	ldr	r3, [pc, #264]	@ (8005438 <pvPortMalloc+0x188>)
 8005330:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005332:	4b41      	ldr	r3, [pc, #260]	@ (8005438 <pvPortMalloc+0x188>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005338:	e004      	b.n	8005344 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	429a      	cmp	r2, r3
 800534c:	d903      	bls.n	8005356 <pvPortMalloc+0xa6>
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f1      	bne.n	800533a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005356:	4b35      	ldr	r3, [pc, #212]	@ (800542c <pvPortMalloc+0x17c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800535c:	429a      	cmp	r2, r3
 800535e:	d04c      	beq.n	80053fa <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2208      	movs	r2, #8
 8005366:	4413      	add	r3, r2
 8005368:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	1ad2      	subs	r2, r2, r3
 800537a:	2308      	movs	r3, #8
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	429a      	cmp	r2, r3
 8005380:	d920      	bls.n	80053c4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4413      	add	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00b      	beq.n	80053ac <pvPortMalloc+0xfc>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	613b      	str	r3, [r7, #16]
}
 80053a6:	bf00      	nop
 80053a8:	bf00      	nop
 80053aa:	e7fd      	b.n	80053a8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	1ad2      	subs	r2, r2, r3
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053be:	69b8      	ldr	r0, [r7, #24]
 80053c0:	f000 f8fc 	bl	80055bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005434 <pvPortMalloc+0x184>)
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	4a19      	ldr	r2, [pc, #100]	@ (8005434 <pvPortMalloc+0x184>)
 80053d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053d2:	4b18      	ldr	r3, [pc, #96]	@ (8005434 <pvPortMalloc+0x184>)
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4b19      	ldr	r3, [pc, #100]	@ (800543c <pvPortMalloc+0x18c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d203      	bcs.n	80053e6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053de:	4b15      	ldr	r3, [pc, #84]	@ (8005434 <pvPortMalloc+0x184>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a16      	ldr	r2, [pc, #88]	@ (800543c <pvPortMalloc+0x18c>)
 80053e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	4b11      	ldr	r3, [pc, #68]	@ (8005430 <pvPortMalloc+0x180>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053fa:	f7ff f8b9 	bl	8004570 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00b      	beq.n	8005420 <pvPortMalloc+0x170>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	60fb      	str	r3, [r7, #12]
}
 800541a:	bf00      	nop
 800541c:	bf00      	nop
 800541e:	e7fd      	b.n	800541c <pvPortMalloc+0x16c>
	return pvReturn;
 8005420:	69fb      	ldr	r3, [r7, #28]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3728      	adds	r7, #40	@ 0x28
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	200010b8 	.word	0x200010b8
 8005430:	200010c4 	.word	0x200010c4
 8005434:	200010bc 	.word	0x200010bc
 8005438:	200010b0 	.word	0x200010b0
 800543c:	200010c0 	.word	0x200010c0

08005440 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d04a      	beq.n	80054e8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005452:	2308      	movs	r3, #8
 8005454:	425b      	negs	r3, r3
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4413      	add	r3, r2
 800545a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	4b22      	ldr	r3, [pc, #136]	@ (80054f0 <vPortFree+0xb0>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10b      	bne.n	8005486 <vPortFree+0x46>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	60fb      	str	r3, [r7, #12]
}
 8005480:	bf00      	nop
 8005482:	bf00      	nop
 8005484:	e7fd      	b.n	8005482 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00b      	beq.n	80054a6 <vPortFree+0x66>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	60bb      	str	r3, [r7, #8]
}
 80054a0:	bf00      	nop
 80054a2:	bf00      	nop
 80054a4:	e7fd      	b.n	80054a2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	4b11      	ldr	r3, [pc, #68]	@ (80054f0 <vPortFree+0xb0>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d019      	beq.n	80054e8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d115      	bne.n	80054e8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	4b0b      	ldr	r3, [pc, #44]	@ (80054f0 <vPortFree+0xb0>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	43db      	mvns	r3, r3
 80054c6:	401a      	ands	r2, r3
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054cc:	f7ff f842 	bl	8004554 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	4b07      	ldr	r3, [pc, #28]	@ (80054f4 <vPortFree+0xb4>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4413      	add	r3, r2
 80054da:	4a06      	ldr	r2, [pc, #24]	@ (80054f4 <vPortFree+0xb4>)
 80054dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054de:	6938      	ldr	r0, [r7, #16]
 80054e0:	f000 f86c 	bl	80055bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80054e4:	f7ff f844 	bl	8004570 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054e8:	bf00      	nop
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	200010c4 	.word	0x200010c4
 80054f4:	200010bc 	.word	0x200010bc

080054f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054fe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005502:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005504:	4b27      	ldr	r3, [pc, #156]	@ (80055a4 <prvHeapInit+0xac>)
 8005506:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00c      	beq.n	800552c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3307      	adds	r3, #7
 8005516:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0307 	bic.w	r3, r3, #7
 800551e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	4a1f      	ldr	r2, [pc, #124]	@ (80055a4 <prvHeapInit+0xac>)
 8005528:	4413      	add	r3, r2
 800552a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005530:	4a1d      	ldr	r2, [pc, #116]	@ (80055a8 <prvHeapInit+0xb0>)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005536:	4b1c      	ldr	r3, [pc, #112]	@ (80055a8 <prvHeapInit+0xb0>)
 8005538:	2200      	movs	r2, #0
 800553a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	4413      	add	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005544:	2208      	movs	r2, #8
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1a9b      	subs	r3, r3, r2
 800554a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0307 	bic.w	r3, r3, #7
 8005552:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4a15      	ldr	r2, [pc, #84]	@ (80055ac <prvHeapInit+0xb4>)
 8005558:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800555a:	4b14      	ldr	r3, [pc, #80]	@ (80055ac <prvHeapInit+0xb4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2200      	movs	r2, #0
 8005560:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005562:	4b12      	ldr	r3, [pc, #72]	@ (80055ac <prvHeapInit+0xb4>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	1ad2      	subs	r2, r2, r3
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005578:	4b0c      	ldr	r3, [pc, #48]	@ (80055ac <prvHeapInit+0xb4>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	4a0a      	ldr	r2, [pc, #40]	@ (80055b0 <prvHeapInit+0xb8>)
 8005586:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	4a09      	ldr	r2, [pc, #36]	@ (80055b4 <prvHeapInit+0xbc>)
 800558e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005590:	4b09      	ldr	r3, [pc, #36]	@ (80055b8 <prvHeapInit+0xc0>)
 8005592:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005596:	601a      	str	r2, [r3, #0]
}
 8005598:	bf00      	nop
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	bc80      	pop	{r7}
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	200004b0 	.word	0x200004b0
 80055a8:	200010b0 	.word	0x200010b0
 80055ac:	200010b8 	.word	0x200010b8
 80055b0:	200010c0 	.word	0x200010c0
 80055b4:	200010bc 	.word	0x200010bc
 80055b8:	200010c4 	.word	0x200010c4

080055bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055c4:	4b27      	ldr	r3, [pc, #156]	@ (8005664 <prvInsertBlockIntoFreeList+0xa8>)
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	e002      	b.n	80055d0 <prvInsertBlockIntoFreeList+0x14>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d8f7      	bhi.n	80055ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	4413      	add	r3, r2
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d108      	bne.n	80055fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	441a      	add	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	441a      	add	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	429a      	cmp	r2, r3
 8005610:	d118      	bne.n	8005644 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	4b14      	ldr	r3, [pc, #80]	@ (8005668 <prvInsertBlockIntoFreeList+0xac>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d00d      	beq.n	800563a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	441a      	add	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	e008      	b.n	800564c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800563a:	4b0b      	ldr	r3, [pc, #44]	@ (8005668 <prvInsertBlockIntoFreeList+0xac>)
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	e003      	b.n	800564c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	429a      	cmp	r2, r3
 8005652:	d002      	beq.n	800565a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr
 8005664:	200010b0 	.word	0x200010b0
 8005668:	200010b8 	.word	0x200010b8

0800566c <memset>:
 800566c:	4603      	mov	r3, r0
 800566e:	4402      	add	r2, r0
 8005670:	4293      	cmp	r3, r2
 8005672:	d100      	bne.n	8005676 <memset+0xa>
 8005674:	4770      	bx	lr
 8005676:	f803 1b01 	strb.w	r1, [r3], #1
 800567a:	e7f9      	b.n	8005670 <memset+0x4>

0800567c <__libc_init_array>:
 800567c:	b570      	push	{r4, r5, r6, lr}
 800567e:	2600      	movs	r6, #0
 8005680:	4d0c      	ldr	r5, [pc, #48]	@ (80056b4 <__libc_init_array+0x38>)
 8005682:	4c0d      	ldr	r4, [pc, #52]	@ (80056b8 <__libc_init_array+0x3c>)
 8005684:	1b64      	subs	r4, r4, r5
 8005686:	10a4      	asrs	r4, r4, #2
 8005688:	42a6      	cmp	r6, r4
 800568a:	d109      	bne.n	80056a0 <__libc_init_array+0x24>
 800568c:	f000 f828 	bl	80056e0 <_init>
 8005690:	2600      	movs	r6, #0
 8005692:	4d0a      	ldr	r5, [pc, #40]	@ (80056bc <__libc_init_array+0x40>)
 8005694:	4c0a      	ldr	r4, [pc, #40]	@ (80056c0 <__libc_init_array+0x44>)
 8005696:	1b64      	subs	r4, r4, r5
 8005698:	10a4      	asrs	r4, r4, #2
 800569a:	42a6      	cmp	r6, r4
 800569c:	d105      	bne.n	80056aa <__libc_init_array+0x2e>
 800569e:	bd70      	pop	{r4, r5, r6, pc}
 80056a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a4:	4798      	blx	r3
 80056a6:	3601      	adds	r6, #1
 80056a8:	e7ee      	b.n	8005688 <__libc_init_array+0xc>
 80056aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ae:	4798      	blx	r3
 80056b0:	3601      	adds	r6, #1
 80056b2:	e7f2      	b.n	800569a <__libc_init_array+0x1e>
 80056b4:	08005738 	.word	0x08005738
 80056b8:	08005738 	.word	0x08005738
 80056bc:	08005738 	.word	0x08005738
 80056c0:	0800573c 	.word	0x0800573c

080056c4 <memcpy>:
 80056c4:	440a      	add	r2, r1
 80056c6:	4291      	cmp	r1, r2
 80056c8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80056cc:	d100      	bne.n	80056d0 <memcpy+0xc>
 80056ce:	4770      	bx	lr
 80056d0:	b510      	push	{r4, lr}
 80056d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056d6:	4291      	cmp	r1, r2
 80056d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056dc:	d1f9      	bne.n	80056d2 <memcpy+0xe>
 80056de:	bd10      	pop	{r4, pc}

080056e0 <_init>:
 80056e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e2:	bf00      	nop
 80056e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e6:	bc08      	pop	{r3}
 80056e8:	469e      	mov	lr, r3
 80056ea:	4770      	bx	lr

080056ec <_fini>:
 80056ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ee:	bf00      	nop
 80056f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f2:	bc08      	pop	{r3}
 80056f4:	469e      	mov	lr, r3
 80056f6:	4770      	bx	lr
