
SortingCardMachine-BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005848  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005958  08005958  00006958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005998  08005998  00007014  2**0
                  CONTENTS
  4 .ARM          00000000  08005998  08005998  00007014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005998  08005998  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005998  08005998  00006998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800599c  0800599c  0000699c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080059a0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b4  20000014  080059b4  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c8  080059b4  000070c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ab7  00000000  00000000  0000703d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aee  00000000  00000000  00017af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0001a5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c94  00000000  00000000  0001b608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bc3  00000000  00000000  0001c29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012219  00000000  00000000  00033e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091813  00000000  00000000  00046078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d788b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042bc  00000000  00000000  000d78d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  000dbb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08005940 	.word	0x08005940

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08005940 	.word	0x08005940

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000030 	.word	0x20000030
 800017c:	20000084 	.word	0x20000084

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  xQueueUART = xQueueCreate( 2, sizeof(uint8_t) ); // For 16 bits messege multiple the sizeof() by 2
 8000186:	2200      	movs	r2, #0
 8000188:	2101      	movs	r1, #1
 800018a:	2002      	movs	r0, #2
 800018c:	f003 fce8 	bl	8003b60 <xQueueGenericCreate>
 8000190:	4603      	mov	r3, r0
 8000192:	4a1f      	ldr	r2, [pc, #124]	@ (8000210 <main+0x90>)
 8000194:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fdb5 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f845 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f93d 	bl	800041c <MX_GPIO_Init>
  MX_TIM2_Init();
 80001a2:	f000 f887 	bl	80002b4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001a6:	f000 f909 	bl	80003bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TIM2->CCR1 = 512;
 80001aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80001b2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2->CCR2 = 256;
 80001b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80001bc:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001be:	2100      	movs	r1, #0
 80001c0:	4814      	ldr	r0, [pc, #80]	@ (8000214 <main+0x94>)
 80001c2:	f001 fe6b 	bl	8001e9c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001c6:	2104      	movs	r1, #4
 80001c8:	4812      	ldr	r0, [pc, #72]	@ (8000214 <main+0x94>)
 80001ca:	f001 fe67 	bl	8001e9c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80001ce:	2100      	movs	r1, #0
 80001d0:	4810      	ldr	r0, [pc, #64]	@ (8000214 <main+0x94>)
 80001d2:	f001 ff05 	bl	8001fe0 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80001d6:	2104      	movs	r1, #4
 80001d8:	480e      	ldr	r0, [pc, #56]	@ (8000214 <main+0x94>)
 80001da:	f001 ff01 	bl	8001fe0 <HAL_TIM_PWM_Stop>


  /****************************** FreeRTOS *******************************/
  xReturned = xTaskCreate( StartDefaultTask,       /* Function that implements the task. */
 80001de:	4b0e      	ldr	r3, [pc, #56]	@ (8000218 <main+0x98>)
 80001e0:	9301      	str	r3, [sp, #4]
 80001e2:	2301      	movs	r3, #1
 80001e4:	9300      	str	r3, [sp, #0]
 80001e6:	2301      	movs	r3, #1
 80001e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80001ec:	490b      	ldr	r1, [pc, #44]	@ (800021c <main+0x9c>)
 80001ee:	480c      	ldr	r0, [pc, #48]	@ (8000220 <main+0xa0>)
 80001f0:	f003 ffe9 	bl	80041c6 <xTaskCreate>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000224 <main+0xa4>)
 80001f8:	6013      	str	r3, [r2, #0]
                      256,      /* Stack size in words, not bytes. */
                      ( void * ) 1,    /* Parameter passed into the task. */
                      1,/* Priority at which the task is created. */
					  &xHandleMainTask ); // * &xHandle );   if I need to add handle to use later

    if( xReturned == pdFAIL) {
 80001fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000224 <main+0xa4>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d101      	bne.n	8000206 <main+0x86>
      //Print something or say someting
      HAL_NVIC_SystemReset();
 8000202:	f000 fea6 	bl	8000f52 <HAL_NVIC_SystemReset>
    }


    vTaskStartScheduler();
 8000206:	f004 fa71 	bl	80046ec <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020a:	bf00      	nop
 800020c:	e7fd      	b.n	800020a <main+0x8a>
 800020e:	bf00      	nop
 8000210:	20000318 	.word	0x20000318
 8000214:	20000284 	.word	0x20000284
 8000218:	20000314 	.word	0x20000314
 800021c:	08005958 	.word	0x08005958
 8000220:	0800084d 	.word	0x0800084d
 8000224:	2000032c 	.word	0x2000032c

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	@ 0x40
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	2228      	movs	r2, #40	@ 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f005 fb48 	bl	80058cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024a:	2301      	movs	r3, #1
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000252:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025c:	2302      	movs	r3, #2
 800025e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000260:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000264:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000266:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800026a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0318 	add.w	r3, r7, #24
 8000270:	4618      	mov	r0, r3
 8000272:	f001 f8d9 	bl	8001428 <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800027c:	f000 fb8c 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	230f      	movs	r3, #15
 8000282:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000284:	2302      	movs	r3, #2
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2102      	movs	r1, #2
 800029a:	4618      	mov	r0, r3
 800029c:	f001 fb46 	bl	800192c <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002a6:	f000 fb77 	bl	8000998 <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3740      	adds	r7, #64	@ 0x40
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b08e      	sub	sp, #56	@ 0x38
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c8:	f107 0320 	add.w	r3, r7, #32
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
 80002e0:	615a      	str	r2, [r3, #20]
 80002e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002e4:	4b34      	ldr	r3, [pc, #208]	@ (80003b8 <MX_TIM2_Init+0x104>)
 80002e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002ec:	4b32      	ldr	r3, [pc, #200]	@ (80003b8 <MX_TIM2_Init+0x104>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f2:	4b31      	ldr	r3, [pc, #196]	@ (80003b8 <MX_TIM2_Init+0x104>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1023;
 80002f8:	4b2f      	ldr	r3, [pc, #188]	@ (80003b8 <MX_TIM2_Init+0x104>)
 80002fa:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80002fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000300:	4b2d      	ldr	r3, [pc, #180]	@ (80003b8 <MX_TIM2_Init+0x104>)
 8000302:	2200      	movs	r2, #0
 8000304:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000306:	4b2c      	ldr	r3, [pc, #176]	@ (80003b8 <MX_TIM2_Init+0x104>)
 8000308:	2200      	movs	r2, #0
 800030a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800030c:	482a      	ldr	r0, [pc, #168]	@ (80003b8 <MX_TIM2_Init+0x104>)
 800030e:	f001 fccb 	bl	8001ca8 <HAL_TIM_Base_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000318:	f000 fb3e 	bl	8000998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800031c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000320:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000322:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000326:	4619      	mov	r1, r3
 8000328:	4823      	ldr	r0, [pc, #140]	@ (80003b8 <MX_TIM2_Init+0x104>)
 800032a:	f002 f887 	bl	800243c <HAL_TIM_ConfigClockSource>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000334:	f000 fb30 	bl	8000998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000338:	481f      	ldr	r0, [pc, #124]	@ (80003b8 <MX_TIM2_Init+0x104>)
 800033a:	f001 fd57 	bl	8001dec <HAL_TIM_PWM_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000344:	f000 fb28 	bl	8000998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000348:	2300      	movs	r3, #0
 800034a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800034c:	2300      	movs	r3, #0
 800034e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000350:	f107 0320 	add.w	r3, r7, #32
 8000354:	4619      	mov	r1, r3
 8000356:	4818      	ldr	r0, [pc, #96]	@ (80003b8 <MX_TIM2_Init+0x104>)
 8000358:	f002 fc00 	bl	8002b5c <HAL_TIMEx_MasterConfigSynchronization>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000362:	f000 fb19 	bl	8000998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000366:	2360      	movs	r3, #96	@ 0x60
 8000368:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 512;
 800036a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800036e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2200      	movs	r2, #0
 800037c:	4619      	mov	r1, r3
 800037e:	480e      	ldr	r0, [pc, #56]	@ (80003b8 <MX_TIM2_Init+0x104>)
 8000380:	f001 ff9a 	bl	80022b8 <HAL_TIM_PWM_ConfigChannel>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800038a:	f000 fb05 	bl	8000998 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2204      	movs	r2, #4
 8000396:	4619      	mov	r1, r3
 8000398:	4807      	ldr	r0, [pc, #28]	@ (80003b8 <MX_TIM2_Init+0x104>)
 800039a:	f001 ff8d 	bl	80022b8 <HAL_TIM_PWM_ConfigChannel>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 80003a4:	f000 faf8 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003a8:	4803      	ldr	r0, [pc, #12]	@ (80003b8 <MX_TIM2_Init+0x104>)
 80003aa:	f000 fb4f 	bl	8000a4c <HAL_TIM_MspPostInit>

}
 80003ae:	bf00      	nop
 80003b0:	3738      	adds	r7, #56	@ 0x38
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000284 	.word	0x20000284

080003bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c0:	4b13      	ldr	r3, [pc, #76]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003c2:	4a14      	ldr	r2, [pc, #80]	@ (8000414 <MX_USART1_UART_Init+0x58>)
 80003c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003c6:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80003cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ce:	4b10      	ldr	r3, [pc, #64]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003da:	4b0d      	ldr	r3, [pc, #52]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003e2:	220c      	movs	r2, #12
 80003e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ec:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003f2:	4807      	ldr	r0, [pc, #28]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 80003f4:	f002 fc22 	bl	8002c3c <HAL_UART_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003fe:	f000 facb 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, rxBuffer, RX_BUFFER_SIZE);
 8000402:	2202      	movs	r2, #2
 8000404:	4904      	ldr	r1, [pc, #16]	@ (8000418 <MX_USART1_UART_Init+0x5c>)
 8000406:	4802      	ldr	r0, [pc, #8]	@ (8000410 <MX_USART1_UART_Init+0x54>)
 8000408:	f002 fceb 	bl	8002de2 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	200002cc 	.word	0x200002cc
 8000414:	40013800 	.word	0x40013800
 8000418:	2000031c 	.word	0x2000031c

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000430:	4b34      	ldr	r3, [pc, #208]	@ (8000504 <MX_GPIO_Init+0xe8>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a33      	ldr	r2, [pc, #204]	@ (8000504 <MX_GPIO_Init+0xe8>)
 8000436:	f043 0310 	orr.w	r3, r3, #16
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b31      	ldr	r3, [pc, #196]	@ (8000504 <MX_GPIO_Init+0xe8>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0310 	and.w	r3, r3, #16
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000448:	4b2e      	ldr	r3, [pc, #184]	@ (8000504 <MX_GPIO_Init+0xe8>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a2d      	ldr	r2, [pc, #180]	@ (8000504 <MX_GPIO_Init+0xe8>)
 800044e:	f043 0320 	orr.w	r3, r3, #32
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b2b      	ldr	r3, [pc, #172]	@ (8000504 <MX_GPIO_Init+0xe8>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0320 	and.w	r3, r3, #32
 800045c:	60bb      	str	r3, [r7, #8]
 800045e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	4b28      	ldr	r3, [pc, #160]	@ (8000504 <MX_GPIO_Init+0xe8>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a27      	ldr	r2, [pc, #156]	@ (8000504 <MX_GPIO_Init+0xe8>)
 8000466:	f043 0304 	orr.w	r3, r3, #4
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b25      	ldr	r3, [pc, #148]	@ (8000504 <MX_GPIO_Init+0xe8>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0304 	and.w	r3, r3, #4
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000478:	4b22      	ldr	r3, [pc, #136]	@ (8000504 <MX_GPIO_Init+0xe8>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a21      	ldr	r2, [pc, #132]	@ (8000504 <MX_GPIO_Init+0xe8>)
 800047e:	f043 0308 	orr.w	r3, r3, #8
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b1f      	ldr	r3, [pc, #124]	@ (8000504 <MX_GPIO_Init+0xe8>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0308 	and.w	r3, r3, #8
 800048c:	603b      	str	r3, [r7, #0]
 800048e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000496:	481c      	ldr	r0, [pc, #112]	@ (8000508 <MX_GPIO_Init+0xec>)
 8000498:	f000 ffad 	bl	80013f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|STEPPER1_DIR_Pin|STEPPER1_STEP_Pin|STEPPER2_DIR_Pin
 800049c:	2200      	movs	r2, #0
 800049e:	21f1      	movs	r1, #241	@ 0xf1
 80004a0:	481a      	ldr	r0, [pc, #104]	@ (800050c <MX_GPIO_Init+0xf0>)
 80004a2:	f000 ffa8 	bl	80013f6 <HAL_GPIO_WritePin>
                          |STEPPER2_STEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ac:	2301      	movs	r3, #1
 80004ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b4:	2302      	movs	r3, #2
 80004b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	4619      	mov	r1, r3
 80004be:	4812      	ldr	r0, [pc, #72]	@ (8000508 <MX_GPIO_Init+0xec>)
 80004c0:	f000 fdfe 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 STEPPER1_DIR_Pin STEPPER1_STEP_Pin STEPPER2_DIR_Pin
                           STEPPER2_STEP_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|STEPPER1_DIR_Pin|STEPPER1_STEP_Pin|STEPPER2_DIR_Pin
 80004c4:	23f1      	movs	r3, #241	@ 0xf1
 80004c6:	613b      	str	r3, [r7, #16]
                          |STEPPER2_STEP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c8:	2301      	movs	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d0:	2302      	movs	r3, #2
 80004d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	480c      	ldr	r0, [pc, #48]	@ (800050c <MX_GPIO_Init+0xf0>)
 80004dc:	f000 fdf0 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : switch1_Pin switch2_Pin */
  GPIO_InitStruct.Pin = switch1_Pin|switch2_Pin;
 80004e0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80004e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4619      	mov	r1, r3
 80004f4:	4805      	ldr	r0, [pc, #20]	@ (800050c <MX_GPIO_Init+0xf0>)
 80004f6:	f000 fde3 	bl	80010c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004fa:	bf00      	nop
 80004fc:	3720      	adds	r7, #32
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000
 8000508:	40011000 	.word	0x40011000
 800050c:	40010c00 	.word	0x40010c00

08000510 <HAL_UART_RxCpltCallback>:
/**
  * @brief  This function starting when messege is starting to arrive. Then the function pushing the messege to xQueueUART
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a12      	ldr	r2, [pc, #72]	@ (8000568 <HAL_UART_RxCpltCallback+0x58>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d106      	bne.n	8000530 <HAL_UART_RxCpltCallback+0x20>
   if(xQueueSendFromISR(xQueueUART, rxBuffer, NULL) == errQUEUE_FULL){
 8000522:	4b12      	ldr	r3, [pc, #72]	@ (800056c <HAL_UART_RxCpltCallback+0x5c>)
 8000524:	6818      	ldr	r0, [r3, #0]
 8000526:	2300      	movs	r3, #0
 8000528:	2200      	movs	r2, #0
 800052a:	4911      	ldr	r1, [pc, #68]	@ (8000570 <HAL_UART_RxCpltCallback+0x60>)
 800052c:	f003 fb76 	bl	8003c1c <xQueueGenericSendFromISR>

    The place for the interpertation can be when the program pull it from the Queue
    */

  }
  if( !taskSuspendFlag ){
 8000530:	4b10      	ldr	r3, [pc, #64]	@ (8000574 <HAL_UART_RxCpltCallback+0x64>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d10e      	bne.n	8000556 <HAL_UART_RxCpltCallback+0x46>
	  vTaskResume(xHandleMainTask);
 8000538:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <HAL_UART_RxCpltCallback+0x68>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f004 f877 	bl	8004630 <vTaskResume>
	  taskSuspendFlag = !taskSuspendFlag;
 8000542:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <HAL_UART_RxCpltCallback+0x64>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	bf0c      	ite	eq
 800054a:	2301      	moveq	r3, #1
 800054c:	2300      	movne	r3, #0
 800054e:	b2db      	uxtb	r3, r3
 8000550:	461a      	mov	r2, r3
 8000552:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <HAL_UART_RxCpltCallback+0x64>)
 8000554:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Receive_IT(huart, rxBuffer, RX_BUFFER_SIZE);
 8000556:	2202      	movs	r2, #2
 8000558:	4905      	ldr	r1, [pc, #20]	@ (8000570 <HAL_UART_RxCpltCallback+0x60>)
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f002 fc41 	bl	8002de2 <HAL_UART_Receive_IT>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40013800 	.word	0x40013800
 800056c:	20000318 	.word	0x20000318
 8000570:	2000031c 	.word	0x2000031c
 8000574:	20000000 	.word	0x20000000
 8000578:	20000314 	.word	0x20000314

0800057c <callibration>:
/** 
  *@brief function moves the Sorting tray until the switch is close
  *@note the function changes the trayPosition global variable
  *@retval int status: 1 OK, 0 Error
*/
void callibration(){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

  int switchFlag = HAL_GPIO_ReadPin(switch1_GPIO_Port, switch1_Pin);
 8000582:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000586:	481a      	ldr	r0, [pc, #104]	@ (80005f0 <callibration+0x74>)
 8000588:	f000 ff1e 	bl	80013c8 <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(STEPPER1_DIR_GPIO_Port, STEPPER1_DIR_Pin, BACKWARDS); // UP to the top position
 8000590:	2200      	movs	r2, #0
 8000592:	2110      	movs	r1, #16
 8000594:	4816      	ldr	r0, [pc, #88]	@ (80005f0 <callibration+0x74>)
 8000596:	f000 ff2e 	bl	80013f6 <HAL_GPIO_WritePin>
  
  for (uint16_t i = 0; i < MAX_STEPS && switchFlag; i++)
 800059a:	2300      	movs	r3, #0
 800059c:	807b      	strh	r3, [r7, #2]
 800059e:	e019      	b.n	80005d4 <callibration+0x58>
  {
    HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2120      	movs	r1, #32
 80005a4:	4812      	ldr	r0, [pc, #72]	@ (80005f0 <callibration+0x74>)
 80005a6:	f000 ff26 	bl	80013f6 <HAL_GPIO_WritePin>
    vTaskDelay(pdMS_TO_TICKS(STEP_DELAY_MS)); // Delay to allow stepper driver to register step
 80005aa:	200a      	movs	r0, #10
 80005ac:	f003 ff3a 	bl	8004424 <vTaskDelay>
    HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2120      	movs	r1, #32
 80005b4:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <callibration+0x74>)
 80005b6:	f000 ff1e 	bl	80013f6 <HAL_GPIO_WritePin>
    vTaskDelay(pdMS_TO_TICKS(STEP_DELAY_MS)); // Delay between steps
 80005ba:	200a      	movs	r0, #10
 80005bc:	f003 ff32 	bl	8004424 <vTaskDelay>
    switchFlag = HAL_GPIO_ReadPin(switch1_GPIO_Port, switch1_Pin);
 80005c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005c4:	480a      	ldr	r0, [pc, #40]	@ (80005f0 <callibration+0x74>)
 80005c6:	f000 feff 	bl	80013c8 <HAL_GPIO_ReadPin>
 80005ca:	4603      	mov	r3, r0
 80005cc:	607b      	str	r3, [r7, #4]
  for (uint16_t i = 0; i < MAX_STEPS && switchFlag; i++)
 80005ce:	887b      	ldrh	r3, [r7, #2]
 80005d0:	3301      	adds	r3, #1
 80005d2:	807b      	strh	r3, [r7, #2]
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80005da:	d202      	bcs.n	80005e2 <callibration+0x66>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1de      	bne.n	80005a0 <callibration+0x24>
  }
  
  trayPosition = 0;
 80005e2:	4b04      	ldr	r3, [pc, #16]	@ (80005f4 <callibration+0x78>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	801a      	strh	r2, [r3, #0]
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40010c00 	.word	0x40010c00
 80005f4:	20000322 	.word	0x20000322

080005f8 <calculateStepsToLevel>:
  *@brief calculate the steps to the next level
  *@param level_to_go: The level to go to
  *@note the current level is the global trayPosition
  *@retval steps to go. positive is down, negative is up // Can be changed.
*/
int calculateStepsToLevel(int level_to_go){
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  switch (level_to_go)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3b01      	subs	r3, #1
 8000604:	2b03      	cmp	r3, #3
 8000606:	d823      	bhi.n	8000650 <calculateStepsToLevel+0x58>
 8000608:	a201      	add	r2, pc, #4	@ (adr r2, 8000610 <calculateStepsToLevel+0x18>)
 800060a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060e:	bf00      	nop
 8000610:	08000621 	.word	0x08000621
 8000614:	0800062d 	.word	0x0800062d
 8000618:	08000639 	.word	0x08000639
 800061c:	08000645 	.word	0x08000645
  {
  case 1:
    return FIRST_LEVEL_POS - trayPosition;
 8000620:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <calculateStepsToLevel+0x64>)
 8000622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000626:	f1c3 0301 	rsb	r3, r3, #1
 800062a:	e012      	b.n	8000652 <calculateStepsToLevel+0x5a>
    break;
  case 2:
    return SECOND_LEVEL_POS - trayPosition;
 800062c:	4b0b      	ldr	r3, [pc, #44]	@ (800065c <calculateStepsToLevel+0x64>)
 800062e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000632:	f1c3 0302 	rsb	r3, r3, #2
 8000636:	e00c      	b.n	8000652 <calculateStepsToLevel+0x5a>
    break;
  case 3:
    return THIRD_LEVEL_POS - trayPosition;
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <calculateStepsToLevel+0x64>)
 800063a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800063e:	f1c3 0303 	rsb	r3, r3, #3
 8000642:	e006      	b.n	8000652 <calculateStepsToLevel+0x5a>
    break;
  case 4:
    return FOURTH_LEVEL_POS - trayPosition;
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <calculateStepsToLevel+0x64>)
 8000646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800064a:	f1c3 0304 	rsb	r3, r3, #4
 800064e:	e000      	b.n	8000652 <calculateStepsToLevel+0x5a>
    break;
  
  default:
    return 0;
 8000650:	2300      	movs	r3, #0
    break;
  }
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	20000322 	.word	0x20000322

08000660 <StepperMove>:
/** 
  *@brief moving the Sorting Tray to position
  *@param stepsToDir: the number of steps to the next position.
  *@retval  None
*/
void StepperMove (int stepsToDir){
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t steps;
  uint8_t direction;
  if(stepsToDir > 0){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	dd04      	ble.n	8000678 <StepperMove+0x18>
    direction = GPIO_PIN_SET;
 800066e:	2301      	movs	r3, #1
 8000670:	74fb      	strb	r3, [r7, #19]
    steps = stepsToDir;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	e004      	b.n	8000682 <StepperMove+0x22>
  } else {
    direction = GPIO_PIN_RESET;
 8000678:	2300      	movs	r3, #0
 800067a:	74fb      	strb	r3, [r7, #19]
    steps = stepsToDir * -1;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	425b      	negs	r3, r3
 8000680:	617b      	str	r3, [r7, #20]
  }

  HAL_GPIO_WritePin(STEPPER1_DIR_GPIO_Port, STEPPER1_DIR_Pin, direction); // (direction ? GPIO_PIN_SET : GPIO_PIN_RESET)
 8000682:	7cfb      	ldrb	r3, [r7, #19]
 8000684:	461a      	mov	r2, r3
 8000686:	2110      	movs	r1, #16
 8000688:	4818      	ldr	r0, [pc, #96]	@ (80006ec <StepperMove+0x8c>)
 800068a:	f000 feb4 	bl	80013f6 <HAL_GPIO_WritePin>

  for (uint32_t i = 0; i < steps; i++)
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	e022      	b.n	80006da <StepperMove+0x7a>
  {
    HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2120      	movs	r1, #32
 8000698:	4814      	ldr	r0, [pc, #80]	@ (80006ec <StepperMove+0x8c>)
 800069a:	f000 feac 	bl	80013f6 <HAL_GPIO_WritePin>
    vTaskDelay(pdMS_TO_TICKS(STEP_DELAY_MS)); // Delay to allow stepper driver to register step
 800069e:	200a      	movs	r0, #10
 80006a0:	f003 fec0 	bl	8004424 <vTaskDelay>
    HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2120      	movs	r1, #32
 80006a8:	4810      	ldr	r0, [pc, #64]	@ (80006ec <StepperMove+0x8c>)
 80006aa:	f000 fea4 	bl	80013f6 <HAL_GPIO_WritePin>
    vTaskDelay(pdMS_TO_TICKS(STEP_DELAY_MS)); // Delay between steps
 80006ae:	200a      	movs	r0, #10
 80006b0:	f003 feb8 	bl	8004424 <vTaskDelay>

    trayPosition += direction ? 1 : (-1) ;
 80006b4:	7cfb      	ldrb	r3, [r7, #19]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <StepperMove+0x5e>
 80006ba:	2201      	movs	r2, #1
 80006bc:	e001      	b.n	80006c2 <StepperMove+0x62>
 80006be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <StepperMove+0x90>)
 80006c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	4413      	add	r3, r2
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	b21a      	sxth	r2, r3
 80006d0:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <StepperMove+0x90>)
 80006d2:	801a      	strh	r2, [r3, #0]
  for (uint32_t i = 0; i < steps; i++)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d3d8      	bcc.n	8000694 <StepperMove+0x34>
  }
}
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40010c00 	.word	0x40010c00
 80006f0:	20000322 	.word	0x20000322

080006f4 <pullingHandlePush>:
/***** Pulling Handle Push Function ########################################*/
/** 
  *@brief Pushing the cards back to the Feeding Tray
  *@retval  None
*/
void pullingHandlePush(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
  int steps = 100; //! edit to the right steps number
 80006fa:	2364      	movs	r3, #100	@ 0x64
 80006fc:	607b      	str	r3, [r7, #4]
  for (uint8_t dir = 1; dir >= 0 ; dir--)
 80006fe:	2301      	movs	r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
  {
    HAL_GPIO_WritePin(STEPPER1_DIR_GPIO_Port, STEPPER1_DIR_Pin, dir); 
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	461a      	mov	r2, r3
 8000706:	2110      	movs	r1, #16
 8000708:	4810      	ldr	r0, [pc, #64]	@ (800074c <pullingHandlePush+0x58>)
 800070a:	f000 fe74 	bl	80013f6 <HAL_GPIO_WritePin>
    for (uint32_t i = 0; i < steps; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	e012      	b.n	800073a <pullingHandlePush+0x46>
    {
      HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2120      	movs	r1, #32
 8000718:	480c      	ldr	r0, [pc, #48]	@ (800074c <pullingHandlePush+0x58>)
 800071a:	f000 fe6c 	bl	80013f6 <HAL_GPIO_WritePin>
      vTaskDelay(pdMS_TO_TICKS(STEP_DELAY_MS)); // Delay to allow stepper driver to register step
 800071e:	200a      	movs	r0, #10
 8000720:	f003 fe80 	bl	8004424 <vTaskDelay>
      HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2120      	movs	r1, #32
 8000728:	4808      	ldr	r0, [pc, #32]	@ (800074c <pullingHandlePush+0x58>)
 800072a:	f000 fe64 	bl	80013f6 <HAL_GPIO_WritePin>
      vTaskDelay(pdMS_TO_TICKS(STEP_DELAY_MS)); // Delay between steps
 800072e:	200a      	movs	r0, #10
 8000730:	f003 fe78 	bl	8004424 <vTaskDelay>
    for (uint32_t i = 0; i < steps; i++)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	3301      	adds	r3, #1
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	429a      	cmp	r2, r3
 8000740:	d3e8      	bcc.n	8000714 <pullingHandlePush+0x20>
  for (uint8_t dir = 1; dir >= 0 ; dir--)
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	3b01      	subs	r3, #1
 8000746:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(STEPPER1_DIR_GPIO_Port, STEPPER1_DIR_Pin, dir); 
 8000748:	e7db      	b.n	8000702 <pullingHandlePush+0xe>
 800074a:	bf00      	nop
 800074c:	40010c00 	.word	0x40010c00

08000750 <cardPushSpin>:

/** 
  *@brief Pushing one card from the main deck
  *@retval  None
*/
void cardPushSpin(){
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
  int switchFlag = 0; // switch is open
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
	TIM2->CCR1 = 100;
 800075a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800075e:	2264      	movs	r2, #100	@ 0x64
 8000760:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000762:	2100      	movs	r1, #0
 8000764:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <cardPushSpin+0x50>)
 8000766:	f001 fb99 	bl	8001e9c <HAL_TIM_PWM_Start>

  for (uint8_t i = 0; i <= 255 && !switchFlag; i++)
 800076a:	2300      	movs	r3, #0
 800076c:	70fb      	strb	r3, [r7, #3]
 800076e:	e00c      	b.n	800078a <cardPushSpin+0x3a>
  {
    vTaskDelay(pdMS_TO_TICKS(10));
 8000770:	200a      	movs	r0, #10
 8000772:	f003 fe57 	bl	8004424 <vTaskDelay>
    switchFlag = HAL_GPIO_ReadPin(switch1_GPIO_Port, switch1_Pin);
 8000776:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800077a:	480a      	ldr	r0, [pc, #40]	@ (80007a4 <cardPushSpin+0x54>)
 800077c:	f000 fe24 	bl	80013c8 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i <= 255 && !switchFlag; i++)
 8000784:	78fb      	ldrb	r3, [r7, #3]
 8000786:	3301      	adds	r3, #1
 8000788:	70fb      	strb	r3, [r7, #3]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0ef      	beq.n	8000770 <cardPushSpin+0x20>
  }

  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000790:	2100      	movs	r1, #0
 8000792:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <cardPushSpin+0x50>)
 8000794:	f001 fc24 	bl	8001fe0 <HAL_TIM_PWM_Stop>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000284 	.word	0x20000284
 80007a4:	40010c00 	.word	0x40010c00

080007a8 <getMessege>:
  theMessege.Error = (buffer[0] >> 5) & 0x07; // 6th to 8th bits

  return theMessege;
}

BaseType_t getMessege(int numOfLoops){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  //xQueue receive
  BaseType_t res = pdFALSE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < numOfLoops && !res; i++)
 80007b4:	2300      	movs	r3, #0
 80007b6:	72fb      	strb	r3, [r7, #11]
 80007b8:	e035      	b.n	8000826 <getMessege+0x7e>
  {
    res = xQueueReceive(xQueueUART, pvBuffer, pdMS_TO_TICKS(100));
 80007ba:	4b21      	ldr	r3, [pc, #132]	@ (8000840 <getMessege+0x98>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2264      	movs	r2, #100	@ 0x64
 80007c0:	4920      	ldr	r1, [pc, #128]	@ (8000844 <getMessege+0x9c>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 fac6 	bl	8003d54 <xQueueReceive>
 80007c8:	60f8      	str	r0, [r7, #12]

    if (res == pdPASS){
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d127      	bne.n	8000820 <getMessege+0x78>
      theMessege.tray = pvBuffer[0] & 0x03;
 80007d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <getMessege+0x9c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f003 0303 	and.w	r3, r3, #3
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <getMessege+0xa0>)
 80007dc:	701a      	strb	r2, [r3, #0]
      theMessege.flag_moreCards = (pvBuffer[0] >> 2) & 0x01;
 80007de:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <getMessege+0x9c>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	089b      	lsrs	r3, r3, #2
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <getMessege+0xa0>)
 80007ee:	705a      	strb	r2, [r3, #1]
      theMessege.flag_notEnd = (pvBuffer[0] >> 3) & 0x01;
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <getMessege+0x9c>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	08db      	lsrs	r3, r3, #3
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <getMessege+0xa0>)
 8000800:	709a      	strb	r2, [r3, #2]
      theMessege.flag_start = (pvBuffer[0] >> 4) & 0x01;
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <getMessege+0x9c>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	091b      	lsrs	r3, r3, #4
 8000808:	b2db      	uxtb	r3, r3
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b0d      	ldr	r3, [pc, #52]	@ (8000848 <getMessege+0xa0>)
 8000812:	70da      	strb	r2, [r3, #3]
      theMessege.Error = (pvBuffer[0] >> 5) & 0x07;
 8000814:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <getMessege+0x9c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	095b      	lsrs	r3, r3, #5
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <getMessege+0xa0>)
 800081e:	711a      	strb	r2, [r3, #4]
  for (uint8_t i = 0; i < numOfLoops && !res; i++)
 8000820:	7afb      	ldrb	r3, [r7, #11]
 8000822:	3301      	adds	r3, #1
 8000824:	72fb      	strb	r3, [r7, #11]
 8000826:	7afb      	ldrb	r3, [r7, #11]
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	429a      	cmp	r2, r3
 800082c:	dd02      	ble.n	8000834 <getMessege+0x8c>
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d0c2      	beq.n	80007ba <getMessege+0x12>
    }
  }
  return res;
 8000834:	68fb      	ldr	r3, [r7, #12]
  
}
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000318 	.word	0x20000318
 8000844:	20000320 	.word	0x20000320
 8000848:	20000324 	.word	0x20000324

0800084c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *pvParameters)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  }
  The UART interrupt will wake the function again, so everything needs to be inside.
  
  */
  
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800085a:	4840      	ldr	r0, [pc, #256]	@ (800095c <StartDefaultTask+0x110>)
 800085c:	f000 fdcb 	bl	80013f6 <HAL_GPIO_WritePin>
  callibration();
 8000860:	f7ff fe8c 	bl	800057c <callibration>
  
  // for(uint_8 i = 0; i < 15 && xQueueReceive(xQueueUART, pvBuffer, pdMS_TO_TICKS(100)) == pdFalse; i++){
  //   vTaskDelay(pdMS_TO_TICKS(100));
  // } // Order to start the process
  // getMessegeInterpret(pvBuffer);
  if (getMessege(25) == pdFAIL){
 8000864:	2019      	movs	r0, #25
 8000866:	f7ff ff9f 	bl	80007a8 <getMessege>

  
  /* Infinite loop */
  for(;;)
  {
    mainLoop1:
 800086a:	e000      	b.n	800086e <StartDefaultTask+0x22>
    TODO: If statment about what to do:
    another card will be "goto mainloop;"
    done will just continue
    */
    if(theMessege.flag_notEnd){
    	goto mainLoop1;
 800086c:	bf00      	nop
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);//Starting the PWM of the roller motor
 800086e:	2104      	movs	r1, #4
 8000870:	483b      	ldr	r0, [pc, #236]	@ (8000960 <StartDefaultTask+0x114>)
 8000872:	f001 fb13 	bl	8001e9c <HAL_TIM_PWM_Start>
    if (getMessege(15) == pdFAIL){// Maybe change to while and delay
 8000876:	200f      	movs	r0, #15
 8000878:	f7ff ff96 	bl	80007a8 <getMessege>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d107      	bne.n	8000892 <StartDefaultTask+0x46>
    	HAL_UART_Transmit(&huart1, (uint8_t)* "Error #1", sizeof("Error #1"), 100);
 8000882:	2345      	movs	r3, #69	@ 0x45
 8000884:	4619      	mov	r1, r3
 8000886:	2364      	movs	r3, #100	@ 0x64
 8000888:	2209      	movs	r2, #9
 800088a:	4836      	ldr	r0, [pc, #216]	@ (8000964 <StartDefaultTask+0x118>)
 800088c:	f002 fa26 	bl	8002cdc <HAL_UART_Transmit>
 8000890:	e000      	b.n	8000894 <StartDefaultTask+0x48>
    mainLoop2:
 8000892:	bf00      	nop
    StepperMove(calculateStepsToLevel(theMessege.tray));//move Sorting Tray to position
 8000894:	4b34      	ldr	r3, [pc, #208]	@ (8000968 <StartDefaultTask+0x11c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fead 	bl	80005f8 <calculateStepsToLevel>
 800089e:	4603      	mov	r3, r0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fedd 	bl	8000660 <StepperMove>
	HAL_UART_Transmit(&huart1, (uint8_t)* "Error #2", sizeof("Error #2"), 100); // message about the tray position
 80008a6:	2345      	movs	r3, #69	@ 0x45
 80008a8:	4619      	mov	r1, r3
 80008aa:	2364      	movs	r3, #100	@ 0x64
 80008ac:	2209      	movs	r2, #9
 80008ae:	482d      	ldr	r0, [pc, #180]	@ (8000964 <StartDefaultTask+0x118>)
 80008b0:	f002 fa14 	bl	8002cdc <HAL_UART_Transmit>
    cardPushSpin();//starting one loop of the PWM of the pushing DC motor
 80008b4:	f7ff ff4c 	bl	8000750 <cardPushSpin>
    vTaskDelay(pdMS_TO_TICKS(1000));// To make sure the card at the place
 80008b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008bc:	f003 fdb2 	bl	8004424 <vTaskDelay>
    if (getMessege(15) == pdFAIL){
 80008c0:	200f      	movs	r0, #15
 80008c2:	f7ff ff71 	bl	80007a8 <getMessege>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d106      	bne.n	80008da <StartDefaultTask+0x8e>
    	HAL_UART_Transmit(&huart1, (uint8_t)* "Error #3", sizeof("Error ##"), 100); // message about the tray position
 80008cc:	2345      	movs	r3, #69	@ 0x45
 80008ce:	4619      	mov	r1, r3
 80008d0:	2364      	movs	r3, #100	@ 0x64
 80008d2:	2209      	movs	r2, #9
 80008d4:	4823      	ldr	r0, [pc, #140]	@ (8000964 <StartDefaultTask+0x118>)
 80008d6:	f002 fa01 	bl	8002cdc <HAL_UART_Transmit>
    if(theMessege.flag_moreCards){
 80008da:	4b23      	ldr	r3, [pc, #140]	@ (8000968 <StartDefaultTask+0x11c>)
 80008dc:	785b      	ldrb	r3, [r3, #1]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d000      	beq.n	80008e4 <StartDefaultTask+0x98>
    	goto mainLoop2;
 80008e2:	e7d7      	b.n	8000894 <StartDefaultTask+0x48>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);// Stop PWM of the DC motor of the roller
 80008e4:	2104      	movs	r1, #4
 80008e6:	481e      	ldr	r0, [pc, #120]	@ (8000960 <StartDefaultTask+0x114>)
 80008e8:	f001 fb7a 	bl	8001fe0 <HAL_TIM_PWM_Stop>
    HAL_UART_Transmit(&huart1, (uint8_t)* "Error #4", sizeof("Error ##"), 100); // message about the tray position
 80008ec:	2345      	movs	r3, #69	@ 0x45
 80008ee:	4619      	mov	r1, r3
 80008f0:	2364      	movs	r3, #100	@ 0x64
 80008f2:	2209      	movs	r2, #9
 80008f4:	481b      	ldr	r0, [pc, #108]	@ (8000964 <StartDefaultTask+0x118>)
 80008f6:	f002 f9f1 	bl	8002cdc <HAL_UART_Transmit>
    pullingHandlePush();//pulling back cards to the Feeding tray
 80008fa:	f7ff fefb 	bl	80006f4 <pullingHandlePush>
    HAL_UART_Transmit(&huart1, (uint8_t)* "Error #5", sizeof("Error ##"), 100); // message about the tray position
 80008fe:	2345      	movs	r3, #69	@ 0x45
 8000900:	4619      	mov	r1, r3
 8000902:	2364      	movs	r3, #100	@ 0x64
 8000904:	2209      	movs	r2, #9
 8000906:	4817      	ldr	r0, [pc, #92]	@ (8000964 <StartDefaultTask+0x118>)
 8000908:	f002 f9e8 	bl	8002cdc <HAL_UART_Transmit>
    if (getMessege(15) == pdFAIL){
 800090c:	200f      	movs	r0, #15
 800090e:	f7ff ff4b 	bl	80007a8 <getMessege>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d106      	bne.n	8000926 <StartDefaultTask+0xda>
    	HAL_UART_Transmit(&huart1, (uint8_t)* "Error #6", sizeof("Error ##"), 100); // message about the tray position
 8000918:	2345      	movs	r3, #69	@ 0x45
 800091a:	4619      	mov	r1, r3
 800091c:	2364      	movs	r3, #100	@ 0x64
 800091e:	2209      	movs	r2, #9
 8000920:	4810      	ldr	r0, [pc, #64]	@ (8000964 <StartDefaultTask+0x118>)
 8000922:	f002 f9db 	bl	8002cdc <HAL_UART_Transmit>
    if(theMessege.flag_notEnd){
 8000926:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <StartDefaultTask+0x11c>)
 8000928:	789b      	ldrb	r3, [r3, #2]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d19e      	bne.n	800086c <StartDefaultTask+0x20>
    	HAL_UART_Transmit(&huart1, (uint8_t)* "Error #7", sizeof("Error ##"), 100); // message about the tray position
    }
  
  
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);//Turn on end indicator light
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000934:	4809      	ldr	r0, [pc, #36]	@ (800095c <StartDefaultTask+0x110>)
 8000936:	f000 fd5e 	bl	80013f6 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, (uint8_t)* "Error #8", sizeof("Error ##"), 100); // message about the tray position
 800093a:	2345      	movs	r3, #69	@ 0x45
 800093c:	4619      	mov	r1, r3
 800093e:	2364      	movs	r3, #100	@ 0x64
 8000940:	2209      	movs	r2, #9
 8000942:	4808      	ldr	r0, [pc, #32]	@ (8000964 <StartDefaultTask+0x118>)
 8000944:	f002 f9ca 	bl	8002cdc <HAL_UART_Transmit>

    taskSuspendFlag = 0;
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <StartDefaultTask+0x120>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
    vTaskSuspend(xHandleMainTask);
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <StartDefaultTask+0x124>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f003 fd9c 	bl	8004490 <vTaskSuspend>
    mainLoop1:
 8000958:	e789      	b.n	800086e <StartDefaultTask+0x22>
 800095a:	bf00      	nop
 800095c:	40011000 	.word	0x40011000
 8000960:	20000284 	.word	0x20000284
 8000964:	200002cc 	.word	0x200002cc
 8000968:	20000324 	.word	0x20000324
 800096c:	20000000 	.word	0x20000000
 8000970:	20000314 	.word	0x20000314

08000974 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a04      	ldr	r2, [pc, #16]	@ (8000994 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d101      	bne.n	800098a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000986:	f000 f9d3 	bl	8000d30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40000800 	.word	0x40000800

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <Error_Handler+0x8>

080009a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <HAL_MspInit+0x68>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	4a17      	ldr	r2, [pc, #92]	@ (8000a0c <HAL_MspInit+0x68>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6193      	str	r3, [r2, #24]
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_MspInit+0x68>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_MspInit+0x68>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4a11      	ldr	r2, [pc, #68]	@ (8000a0c <HAL_MspInit+0x68>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009cc:	61d3      	str	r3, [r2, #28]
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <HAL_MspInit+0x68>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	210f      	movs	r1, #15
 80009de:	f06f 0001 	mvn.w	r0, #1
 80009e2:	f000 fa8c 	bl	8000efe <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80009e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <HAL_MspInit+0x6c>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4a04      	ldr	r2, [pc, #16]	@ (8000a10 <HAL_MspInit+0x6c>)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010000 	.word	0x40010000

08000a14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a24:	d10b      	bne.n	8000a3e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <HAL_TIM_Base_MspInit+0x34>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	4a07      	ldr	r2, [pc, #28]	@ (8000a48 <HAL_TIM_Base_MspInit+0x34>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	61d3      	str	r3, [r2, #28]
 8000a32:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <HAL_TIM_Base_MspInit+0x34>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a6a:	d117      	bne.n	8000a9c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <HAL_TIM_MspPostInit+0x58>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa4 <HAL_TIM_MspPostInit+0x58>)
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <HAL_TIM_MspPostInit+0x58>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DC_PWM1_Pin|DC_PWM2_Pin;
 8000a84:	2303      	movs	r3, #3
 8000a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4619      	mov	r1, r3
 8000a96:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <HAL_TIM_MspPostInit+0x5c>)
 8000a98:	f000 fb12 	bl	80010c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010800 	.word	0x40010800

08000aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a20      	ldr	r2, [pc, #128]	@ (8000b48 <HAL_UART_MspInit+0x9c>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d139      	bne.n	8000b40 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <HAL_UART_MspInit+0xa0>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b4c <HAL_UART_MspInit+0xa0>)
 8000ad2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <HAL_UART_MspInit+0xa0>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <HAL_UART_MspInit+0xa0>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a18      	ldr	r2, [pc, #96]	@ (8000b4c <HAL_UART_MspInit+0xa0>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <HAL_UART_MspInit+0xa0>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000afc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480f      	ldr	r0, [pc, #60]	@ (8000b50 <HAL_UART_MspInit+0xa4>)
 8000b12:	f000 fad5 	bl	80010c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4809      	ldr	r0, [pc, #36]	@ (8000b50 <HAL_UART_MspInit+0xa4>)
 8000b2c:	f000 fac8 	bl	80010c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2105      	movs	r1, #5
 8000b34:	2025      	movs	r0, #37	@ 0x25
 8000b36:	f000 f9e2 	bl	8000efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b3a:	2025      	movs	r0, #37	@ 0x25
 8000b3c:	f000 f9fb 	bl	8000f36 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b40:	bf00      	nop
 8000b42:	3720      	adds	r7, #32
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40013800 	.word	0x40013800
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010800 	.word	0x40010800

08000b54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	@ 0x38
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000b6a:	4b34      	ldr	r3, [pc, #208]	@ (8000c3c <HAL_InitTick+0xe8>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	4a33      	ldr	r2, [pc, #204]	@ (8000c3c <HAL_InitTick+0xe8>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	61d3      	str	r3, [r2, #28]
 8000b76:	4b31      	ldr	r3, [pc, #196]	@ (8000c3c <HAL_InitTick+0xe8>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b82:	f107 0210 	add.w	r2, r7, #16
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 f83d 	bl	8001c0c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b92:	6a3b      	ldr	r3, [r7, #32]
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d103      	bne.n	8000ba4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b9c:	f001 f80e 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 8000ba0:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ba2:	e004      	b.n	8000bae <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ba4:	f001 f80a 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bb0:	4a23      	ldr	r2, [pc, #140]	@ (8000c40 <HAL_InitTick+0xec>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	0c9b      	lsrs	r3, r3, #18
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000bbc:	4b21      	ldr	r3, [pc, #132]	@ (8000c44 <HAL_InitTick+0xf0>)
 8000bbe:	4a22      	ldr	r2, [pc, #136]	@ (8000c48 <HAL_InitTick+0xf4>)
 8000bc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000bc2:	4b20      	ldr	r3, [pc, #128]	@ (8000c44 <HAL_InitTick+0xf0>)
 8000bc4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bc8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000bca:	4a1e      	ldr	r2, [pc, #120]	@ (8000c44 <HAL_InitTick+0xf0>)
 8000bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bce:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <HAL_InitTick+0xf0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <HAL_InitTick+0xf0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <HAL_InitTick+0xf0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000be2:	4818      	ldr	r0, [pc, #96]	@ (8000c44 <HAL_InitTick+0xf0>)
 8000be4:	f001 f860 	bl	8001ca8 <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d11b      	bne.n	8000c2e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000bf6:	4813      	ldr	r0, [pc, #76]	@ (8000c44 <HAL_InitTick+0xf0>)
 8000bf8:	f001 f8a6 	bl	8001d48 <HAL_TIM_Base_Start_IT>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c02:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d111      	bne.n	8000c2e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c0a:	201e      	movs	r0, #30
 8000c0c:	f000 f993 	bl	8000f36 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b0f      	cmp	r3, #15
 8000c14:	d808      	bhi.n	8000c28 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000c16:	2200      	movs	r2, #0
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	201e      	movs	r0, #30
 8000c1c:	f000 f96f 	bl	8000efe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c20:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <HAL_InitTick+0xf8>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	e002      	b.n	8000c2e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c2e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3738      	adds	r7, #56	@ 0x38
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	431bde83 	.word	0x431bde83
 8000c44:	20000330 	.word	0x20000330
 8000c48:	40000800 	.word	0x40000800
 8000c4c:	20000008 	.word	0x20000008

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <NMI_Handler+0x4>

08000c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <MemManage_Handler+0x4>

08000c68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c88:	4802      	ldr	r0, [pc, #8]	@ (8000c94 <TIM4_IRQHandler+0x10>)
 8000c8a:	f001 fa0d 	bl	80020a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000330 	.word	0x20000330

08000c98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <USART1_IRQHandler+0x10>)
 8000c9e:	f002 f8c5 	bl	8002e2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200002cc 	.word	0x200002cc

08000cac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb8:	f7ff fff8 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480b      	ldr	r0, [pc, #44]	@ (8000cec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cbe:	490c      	ldr	r1, [pc, #48]	@ (8000cf0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a09      	ldr	r2, [pc, #36]	@ (8000cf8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cd4:	4c09      	ldr	r4, [pc, #36]	@ (8000cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f004 fdfb 	bl	80058dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce6:	f7ff fa4b 	bl	8000180 <main>
  bx lr
 8000cea:	4770      	bx	lr
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cf4:	080059a0 	.word	0x080059a0
  ldr r2, =_sbss
 8000cf8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000cfc:	200010c8 	.word	0x200010c8

08000d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC1_2_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <HAL_Init+0x28>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a07      	ldr	r2, [pc, #28]	@ (8000d2c <HAL_Init+0x28>)
 8000d0e:	f043 0310 	orr.w	r3, r3, #16
 8000d12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 f8e7 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1a:	200f      	movs	r0, #15
 8000d1c:	f7ff ff1a 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d20:	f7ff fe40 	bl	80009a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40022000 	.word	0x40022000

08000d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <HAL_IncTick+0x1c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <HAL_IncTick+0x20>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a03      	ldr	r2, [pc, #12]	@ (8000d50 <HAL_IncTick+0x20>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	2000000c 	.word	0x2000000c
 8000d50:	20000378 	.word	0x20000378

08000d54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b02      	ldr	r3, [pc, #8]	@ (8000d64 <HAL_GetTick+0x10>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	20000378 	.word	0x20000378

08000d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	@ (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	@ (8000dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	db0b      	blt.n	8000df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f003 021f 	and.w	r2, r3, #31
 8000de4:	4906      	ldr	r1, [pc, #24]	@ (8000e00 <__NVIC_EnableIRQ+0x34>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	095b      	lsrs	r3, r3, #5
 8000dec:	2001      	movs	r0, #1
 8000dee:	fa00 f202 	lsl.w	r2, r0, r2
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	@ (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	@ (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	@ 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	@ 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ec0:	f3bf 8f4f 	dsb	sy
}
 8000ec4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <__NVIC_SystemReset+0x24>)
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ece:	4904      	ldr	r1, [pc, #16]	@ (8000ee0 <__NVIC_SystemReset+0x24>)
 8000ed0:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <__NVIC_SystemReset+0x28>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ed6:	f3bf 8f4f 	dsb	sy
}
 8000eda:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <__NVIC_SystemReset+0x20>
 8000ee0:	e000ed00 	.word	0xe000ed00
 8000ee4:	05fa0004 	.word	0x05fa0004

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff39 	bl	8000d68 <__NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff4e 	bl	8000db0 <__NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff9c 	bl	8000e58 <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff6b 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff41 	bl	8000dcc <__NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000f56:	f7ff ffb1 	bl	8000ebc <__NVIC_SystemReset>

08000f5a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b085      	sub	sp, #20
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d008      	beq.n	8000f84 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2204      	movs	r2, #4
 8000f76:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e020      	b.n	8000fc6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 020e 	bic.w	r2, r2, #14
 8000f92:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 0201 	bic.w	r2, r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fac:	2101      	movs	r1, #1
 8000fae:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d005      	beq.n	8000ff4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2204      	movs	r2, #4
 8000fec:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e051      	b.n	8001098 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 020e 	bic.w	r2, r2, #14
 8001002:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a22      	ldr	r2, [pc, #136]	@ (80010a4 <HAL_DMA_Abort_IT+0xd4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d029      	beq.n	8001072 <HAL_DMA_Abort_IT+0xa2>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a21      	ldr	r2, [pc, #132]	@ (80010a8 <HAL_DMA_Abort_IT+0xd8>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d022      	beq.n	800106e <HAL_DMA_Abort_IT+0x9e>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a1f      	ldr	r2, [pc, #124]	@ (80010ac <HAL_DMA_Abort_IT+0xdc>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d01a      	beq.n	8001068 <HAL_DMA_Abort_IT+0x98>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a1e      	ldr	r2, [pc, #120]	@ (80010b0 <HAL_DMA_Abort_IT+0xe0>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d012      	beq.n	8001062 <HAL_DMA_Abort_IT+0x92>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a1c      	ldr	r2, [pc, #112]	@ (80010b4 <HAL_DMA_Abort_IT+0xe4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00a      	beq.n	800105c <HAL_DMA_Abort_IT+0x8c>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a1b      	ldr	r2, [pc, #108]	@ (80010b8 <HAL_DMA_Abort_IT+0xe8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d102      	bne.n	8001056 <HAL_DMA_Abort_IT+0x86>
 8001050:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001054:	e00e      	b.n	8001074 <HAL_DMA_Abort_IT+0xa4>
 8001056:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800105a:	e00b      	b.n	8001074 <HAL_DMA_Abort_IT+0xa4>
 800105c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001060:	e008      	b.n	8001074 <HAL_DMA_Abort_IT+0xa4>
 8001062:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001066:	e005      	b.n	8001074 <HAL_DMA_Abort_IT+0xa4>
 8001068:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800106c:	e002      	b.n	8001074 <HAL_DMA_Abort_IT+0xa4>
 800106e:	2310      	movs	r3, #16
 8001070:	e000      	b.n	8001074 <HAL_DMA_Abort_IT+0xa4>
 8001072:	2301      	movs	r3, #1
 8001074:	4a11      	ldr	r2, [pc, #68]	@ (80010bc <HAL_DMA_Abort_IT+0xec>)
 8001076:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	4798      	blx	r3
    } 
  }
  return status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40020008 	.word	0x40020008
 80010a8:	4002001c 	.word	0x4002001c
 80010ac:	40020030 	.word	0x40020030
 80010b0:	40020044 	.word	0x40020044
 80010b4:	40020058 	.word	0x40020058
 80010b8:	4002006c 	.word	0x4002006c
 80010bc:	40020000 	.word	0x40020000

080010c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b08b      	sub	sp, #44	@ 0x2c
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d2:	e169      	b.n	80013a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010d4:	2201      	movs	r2, #1
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	69fa      	ldr	r2, [r7, #28]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	f040 8158 	bne.w	80013a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	4a9a      	ldr	r2, [pc, #616]	@ (8001360 <HAL_GPIO_Init+0x2a0>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d05e      	beq.n	80011ba <HAL_GPIO_Init+0xfa>
 80010fc:	4a98      	ldr	r2, [pc, #608]	@ (8001360 <HAL_GPIO_Init+0x2a0>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d875      	bhi.n	80011ee <HAL_GPIO_Init+0x12e>
 8001102:	4a98      	ldr	r2, [pc, #608]	@ (8001364 <HAL_GPIO_Init+0x2a4>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d058      	beq.n	80011ba <HAL_GPIO_Init+0xfa>
 8001108:	4a96      	ldr	r2, [pc, #600]	@ (8001364 <HAL_GPIO_Init+0x2a4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d86f      	bhi.n	80011ee <HAL_GPIO_Init+0x12e>
 800110e:	4a96      	ldr	r2, [pc, #600]	@ (8001368 <HAL_GPIO_Init+0x2a8>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d052      	beq.n	80011ba <HAL_GPIO_Init+0xfa>
 8001114:	4a94      	ldr	r2, [pc, #592]	@ (8001368 <HAL_GPIO_Init+0x2a8>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d869      	bhi.n	80011ee <HAL_GPIO_Init+0x12e>
 800111a:	4a94      	ldr	r2, [pc, #592]	@ (800136c <HAL_GPIO_Init+0x2ac>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d04c      	beq.n	80011ba <HAL_GPIO_Init+0xfa>
 8001120:	4a92      	ldr	r2, [pc, #584]	@ (800136c <HAL_GPIO_Init+0x2ac>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d863      	bhi.n	80011ee <HAL_GPIO_Init+0x12e>
 8001126:	4a92      	ldr	r2, [pc, #584]	@ (8001370 <HAL_GPIO_Init+0x2b0>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d046      	beq.n	80011ba <HAL_GPIO_Init+0xfa>
 800112c:	4a90      	ldr	r2, [pc, #576]	@ (8001370 <HAL_GPIO_Init+0x2b0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d85d      	bhi.n	80011ee <HAL_GPIO_Init+0x12e>
 8001132:	2b12      	cmp	r3, #18
 8001134:	d82a      	bhi.n	800118c <HAL_GPIO_Init+0xcc>
 8001136:	2b12      	cmp	r3, #18
 8001138:	d859      	bhi.n	80011ee <HAL_GPIO_Init+0x12e>
 800113a:	a201      	add	r2, pc, #4	@ (adr r2, 8001140 <HAL_GPIO_Init+0x80>)
 800113c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001140:	080011bb 	.word	0x080011bb
 8001144:	08001195 	.word	0x08001195
 8001148:	080011a7 	.word	0x080011a7
 800114c:	080011e9 	.word	0x080011e9
 8001150:	080011ef 	.word	0x080011ef
 8001154:	080011ef 	.word	0x080011ef
 8001158:	080011ef 	.word	0x080011ef
 800115c:	080011ef 	.word	0x080011ef
 8001160:	080011ef 	.word	0x080011ef
 8001164:	080011ef 	.word	0x080011ef
 8001168:	080011ef 	.word	0x080011ef
 800116c:	080011ef 	.word	0x080011ef
 8001170:	080011ef 	.word	0x080011ef
 8001174:	080011ef 	.word	0x080011ef
 8001178:	080011ef 	.word	0x080011ef
 800117c:	080011ef 	.word	0x080011ef
 8001180:	080011ef 	.word	0x080011ef
 8001184:	0800119d 	.word	0x0800119d
 8001188:	080011b1 	.word	0x080011b1
 800118c:	4a79      	ldr	r2, [pc, #484]	@ (8001374 <HAL_GPIO_Init+0x2b4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001192:	e02c      	b.n	80011ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	623b      	str	r3, [r7, #32]
          break;
 800119a:	e029      	b.n	80011f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	3304      	adds	r3, #4
 80011a2:	623b      	str	r3, [r7, #32]
          break;
 80011a4:	e024      	b.n	80011f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	3308      	adds	r3, #8
 80011ac:	623b      	str	r3, [r7, #32]
          break;
 80011ae:	e01f      	b.n	80011f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	330c      	adds	r3, #12
 80011b6:	623b      	str	r3, [r7, #32]
          break;
 80011b8:	e01a      	b.n	80011f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011c2:	2304      	movs	r3, #4
 80011c4:	623b      	str	r3, [r7, #32]
          break;
 80011c6:	e013      	b.n	80011f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d105      	bne.n	80011dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011d0:	2308      	movs	r3, #8
 80011d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	611a      	str	r2, [r3, #16]
          break;
 80011da:	e009      	b.n	80011f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011dc:	2308      	movs	r3, #8
 80011de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69fa      	ldr	r2, [r7, #28]
 80011e4:	615a      	str	r2, [r3, #20]
          break;
 80011e6:	e003      	b.n	80011f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
          break;
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x130>
          break;
 80011ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	2bff      	cmp	r3, #255	@ 0xff
 80011f4:	d801      	bhi.n	80011fa <HAL_GPIO_Init+0x13a>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	e001      	b.n	80011fe <HAL_GPIO_Init+0x13e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3304      	adds	r3, #4
 80011fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	2bff      	cmp	r3, #255	@ 0xff
 8001204:	d802      	bhi.n	800120c <HAL_GPIO_Init+0x14c>
 8001206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	e002      	b.n	8001212 <HAL_GPIO_Init+0x152>
 800120c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120e:	3b08      	subs	r3, #8
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	210f      	movs	r1, #15
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	401a      	ands	r2, r3
 8001224:	6a39      	ldr	r1, [r7, #32]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	431a      	orrs	r2, r3
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 80b1 	beq.w	80013a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001240:	4b4d      	ldr	r3, [pc, #308]	@ (8001378 <HAL_GPIO_Init+0x2b8>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a4c      	ldr	r2, [pc, #304]	@ (8001378 <HAL_GPIO_Init+0x2b8>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b4a      	ldr	r3, [pc, #296]	@ (8001378 <HAL_GPIO_Init+0x2b8>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001258:	4a48      	ldr	r2, [pc, #288]	@ (800137c <HAL_GPIO_Init+0x2bc>)
 800125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001264:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	220f      	movs	r2, #15
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4013      	ands	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a40      	ldr	r2, [pc, #256]	@ (8001380 <HAL_GPIO_Init+0x2c0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d013      	beq.n	80012ac <HAL_GPIO_Init+0x1ec>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a3f      	ldr	r2, [pc, #252]	@ (8001384 <HAL_GPIO_Init+0x2c4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d00d      	beq.n	80012a8 <HAL_GPIO_Init+0x1e8>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a3e      	ldr	r2, [pc, #248]	@ (8001388 <HAL_GPIO_Init+0x2c8>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d007      	beq.n	80012a4 <HAL_GPIO_Init+0x1e4>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a3d      	ldr	r2, [pc, #244]	@ (800138c <HAL_GPIO_Init+0x2cc>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d101      	bne.n	80012a0 <HAL_GPIO_Init+0x1e0>
 800129c:	2303      	movs	r3, #3
 800129e:	e006      	b.n	80012ae <HAL_GPIO_Init+0x1ee>
 80012a0:	2304      	movs	r3, #4
 80012a2:	e004      	b.n	80012ae <HAL_GPIO_Init+0x1ee>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e002      	b.n	80012ae <HAL_GPIO_Init+0x1ee>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <HAL_GPIO_Init+0x1ee>
 80012ac:	2300      	movs	r3, #0
 80012ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b0:	f002 0203 	and.w	r2, r2, #3
 80012b4:	0092      	lsls	r2, r2, #2
 80012b6:	4093      	lsls	r3, r2
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012be:	492f      	ldr	r1, [pc, #188]	@ (800137c <HAL_GPIO_Init+0x2bc>)
 80012c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	3302      	adds	r3, #2
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	492c      	ldr	r1, [pc, #176]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	608b      	str	r3, [r1, #8]
 80012e4:	e006      	b.n	80012f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4928      	ldr	r1, [pc, #160]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d006      	beq.n	800130e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001300:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	4922      	ldr	r1, [pc, #136]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	60cb      	str	r3, [r1, #12]
 800130c:	e006      	b.n	800131c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800130e:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	43db      	mvns	r3, r3
 8001316:	491e      	ldr	r1, [pc, #120]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 8001318:	4013      	ands	r3, r2
 800131a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d006      	beq.n	8001336 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001328:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	4918      	ldr	r1, [pc, #96]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
 8001334:	e006      	b.n	8001344 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001336:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	43db      	mvns	r3, r3
 800133e:	4914      	ldr	r1, [pc, #80]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 8001340:	4013      	ands	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d021      	beq.n	8001394 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001350:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	490e      	ldr	r1, [pc, #56]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	600b      	str	r3, [r1, #0]
 800135c:	e021      	b.n	80013a2 <HAL_GPIO_Init+0x2e2>
 800135e:	bf00      	nop
 8001360:	10320000 	.word	0x10320000
 8001364:	10310000 	.word	0x10310000
 8001368:	10220000 	.word	0x10220000
 800136c:	10210000 	.word	0x10210000
 8001370:	10120000 	.word	0x10120000
 8001374:	10110000 	.word	0x10110000
 8001378:	40021000 	.word	0x40021000
 800137c:	40010000 	.word	0x40010000
 8001380:	40010800 	.word	0x40010800
 8001384:	40010c00 	.word	0x40010c00
 8001388:	40011000 	.word	0x40011000
 800138c:	40011400 	.word	0x40011400
 8001390:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <HAL_GPIO_Init+0x304>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	43db      	mvns	r3, r3
 800139c:	4909      	ldr	r1, [pc, #36]	@ (80013c4 <HAL_GPIO_Init+0x304>)
 800139e:	4013      	ands	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	3301      	adds	r3, #1
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	fa22 f303 	lsr.w	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f47f ae8e 	bne.w	80010d4 <HAL_GPIO_Init+0x14>
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	372c      	adds	r7, #44	@ 0x2c
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	40010400 	.word	0x40010400

080013c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	887b      	ldrh	r3, [r7, #2]
 80013da:	4013      	ands	r3, r2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e001      	b.n	80013ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	460b      	mov	r3, r1
 8001400:	807b      	strh	r3, [r7, #2]
 8001402:	4613      	mov	r3, r2
 8001404:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001406:	787b      	ldrb	r3, [r7, #1]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800140c:	887a      	ldrh	r2, [r7, #2]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001412:	e003      	b.n	800141c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001414:	887b      	ldrh	r3, [r7, #2]
 8001416:	041a      	lsls	r2, r3, #16
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	611a      	str	r2, [r3, #16]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
	...

08001428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e272      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8087 	beq.w	8001556 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001448:	4b92      	ldr	r3, [pc, #584]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	2b04      	cmp	r3, #4
 8001452:	d00c      	beq.n	800146e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001454:	4b8f      	ldr	r3, [pc, #572]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 030c 	and.w	r3, r3, #12
 800145c:	2b08      	cmp	r3, #8
 800145e:	d112      	bne.n	8001486 <HAL_RCC_OscConfig+0x5e>
 8001460:	4b8c      	ldr	r3, [pc, #560]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800146c:	d10b      	bne.n	8001486 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146e:	4b89      	ldr	r3, [pc, #548]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d06c      	beq.n	8001554 <HAL_RCC_OscConfig+0x12c>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d168      	bne.n	8001554 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e24c      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800148e:	d106      	bne.n	800149e <HAL_RCC_OscConfig+0x76>
 8001490:	4b80      	ldr	r3, [pc, #512]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a7f      	ldr	r2, [pc, #508]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001496:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	e02e      	b.n	80014fc <HAL_RCC_OscConfig+0xd4>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x98>
 80014a6:	4b7b      	ldr	r3, [pc, #492]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a7a      	ldr	r2, [pc, #488]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b78      	ldr	r3, [pc, #480]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a77      	ldr	r2, [pc, #476]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e01d      	b.n	80014fc <HAL_RCC_OscConfig+0xd4>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0xbc>
 80014ca:	4b72      	ldr	r3, [pc, #456]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a71      	ldr	r2, [pc, #452]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a6e      	ldr	r2, [pc, #440]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e00b      	b.n	80014fc <HAL_RCC_OscConfig+0xd4>
 80014e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b68      	ldr	r3, [pc, #416]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a67      	ldr	r2, [pc, #412]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d013      	beq.n	800152c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fc26 	bl	8000d54 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fc22 	bl	8000d54 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	@ 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e200      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	4b5d      	ldr	r3, [pc, #372]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0xe4>
 800152a:	e014      	b.n	8001556 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fc12 	bl	8000d54 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fc0e 	bl	8000d54 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	@ 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e1ec      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	4b53      	ldr	r3, [pc, #332]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x10c>
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d063      	beq.n	800162a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001562:	4b4c      	ldr	r3, [pc, #304]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00b      	beq.n	8001586 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800156e:	4b49      	ldr	r3, [pc, #292]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b08      	cmp	r3, #8
 8001578:	d11c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x18c>
 800157a:	4b46      	ldr	r3, [pc, #280]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d116      	bne.n	80015b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	4b43      	ldr	r3, [pc, #268]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d005      	beq.n	800159e <HAL_RCC_OscConfig+0x176>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d001      	beq.n	800159e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e1c0      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159e:	4b3d      	ldr	r3, [pc, #244]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4939      	ldr	r1, [pc, #228]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	e03a      	b.n	800162a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d020      	beq.n	80015fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015bc:	4b36      	ldr	r3, [pc, #216]	@ (8001698 <HAL_RCC_OscConfig+0x270>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fbc7 	bl	8000d54 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ca:	f7ff fbc3 	bl	8000d54 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e1a1      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4927      	ldr	r1, [pc, #156]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	600b      	str	r3, [r1, #0]
 80015fc:	e015      	b.n	800162a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015fe:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <HAL_RCC_OscConfig+0x270>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fba6 	bl	8000d54 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160c:	f7ff fba2 	bl	8000d54 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e180      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161e:	4b1d      	ldr	r3, [pc, #116]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d03a      	beq.n	80016ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d019      	beq.n	8001672 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163e:	4b17      	ldr	r3, [pc, #92]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001640:	2201      	movs	r2, #1
 8001642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001644:	f7ff fb86 	bl	8000d54 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff fb82 	bl	8000d54 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e160      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165e:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800166a:	2001      	movs	r0, #1
 800166c:	f000 fafe 	bl	8001c6c <RCC_Delay>
 8001670:	e01c      	b.n	80016ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001678:	f7ff fb6c 	bl	8000d54 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167e:	e00f      	b.n	80016a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001680:	f7ff fb68 	bl	8000d54 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d908      	bls.n	80016a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e146      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	42420000 	.word	0x42420000
 800169c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a0:	4b92      	ldr	r3, [pc, #584]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e9      	bne.n	8001680 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80a6 	beq.w	8001806 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016be:	4b8b      	ldr	r3, [pc, #556]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10d      	bne.n	80016e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	4b88      	ldr	r3, [pc, #544]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4a87      	ldr	r2, [pc, #540]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d4:	61d3      	str	r3, [r2, #28]
 80016d6:	4b85      	ldr	r3, [pc, #532]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e2:	2301      	movs	r3, #1
 80016e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e6:	4b82      	ldr	r3, [pc, #520]	@ (80018f0 <HAL_RCC_OscConfig+0x4c8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d118      	bne.n	8001724 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f2:	4b7f      	ldr	r3, [pc, #508]	@ (80018f0 <HAL_RCC_OscConfig+0x4c8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a7e      	ldr	r2, [pc, #504]	@ (80018f0 <HAL_RCC_OscConfig+0x4c8>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fb29 	bl	8000d54 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001706:	f7ff fb25 	bl	8000d54 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b64      	cmp	r3, #100	@ 0x64
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e103      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001718:	4b75      	ldr	r3, [pc, #468]	@ (80018f0 <HAL_RCC_OscConfig+0x4c8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d106      	bne.n	800173a <HAL_RCC_OscConfig+0x312>
 800172c:	4b6f      	ldr	r3, [pc, #444]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4a6e      	ldr	r2, [pc, #440]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6213      	str	r3, [r2, #32]
 8001738:	e02d      	b.n	8001796 <HAL_RCC_OscConfig+0x36e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x334>
 8001742:	4b6a      	ldr	r3, [pc, #424]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a69      	ldr	r2, [pc, #420]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6213      	str	r3, [r2, #32]
 800174e:	4b67      	ldr	r3, [pc, #412]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a66      	ldr	r2, [pc, #408]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001754:	f023 0304 	bic.w	r3, r3, #4
 8001758:	6213      	str	r3, [r2, #32]
 800175a:	e01c      	b.n	8001796 <HAL_RCC_OscConfig+0x36e>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b05      	cmp	r3, #5
 8001762:	d10c      	bne.n	800177e <HAL_RCC_OscConfig+0x356>
 8001764:	4b61      	ldr	r3, [pc, #388]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4a60      	ldr	r2, [pc, #384]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	6213      	str	r3, [r2, #32]
 8001770:	4b5e      	ldr	r3, [pc, #376]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4a5d      	ldr	r2, [pc, #372]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	e00b      	b.n	8001796 <HAL_RCC_OscConfig+0x36e>
 800177e:	4b5b      	ldr	r3, [pc, #364]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4a5a      	ldr	r2, [pc, #360]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6213      	str	r3, [r2, #32]
 800178a:	4b58      	ldr	r3, [pc, #352]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a57      	ldr	r2, [pc, #348]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001790:	f023 0304 	bic.w	r3, r3, #4
 8001794:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d015      	beq.n	80017ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7ff fad9 	bl	8000d54 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff fad5 	bl	8000d54 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e0b1      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017bc:	4b4b      	ldr	r3, [pc, #300]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0ee      	beq.n	80017a6 <HAL_RCC_OscConfig+0x37e>
 80017c8:	e014      	b.n	80017f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7ff fac3 	bl	8000d54 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d0:	e00a      	b.n	80017e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff fabf 	bl	8000d54 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e09b      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e8:	4b40      	ldr	r3, [pc, #256]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1ee      	bne.n	80017d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d105      	bne.n	8001806 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fa:	4b3c      	ldr	r3, [pc, #240]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a3b      	ldr	r2, [pc, #236]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001800:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001804:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8087 	beq.w	800191e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001810:	4b36      	ldr	r3, [pc, #216]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b08      	cmp	r3, #8
 800181a:	d061      	beq.n	80018e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d146      	bne.n	80018b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001824:	4b33      	ldr	r3, [pc, #204]	@ (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fa93 	bl	8000d54 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff fa8f 	bl	8000d54 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e06d      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001844:	4b29      	ldr	r3, [pc, #164]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001858:	d108      	bne.n	800186c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800185a:	4b24      	ldr	r3, [pc, #144]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	4921      	ldr	r1, [pc, #132]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800186c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a19      	ldr	r1, [r3, #32]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	430b      	orrs	r3, r1
 800187e:	491b      	ldr	r1, [pc, #108]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001884:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 8001886:	2201      	movs	r2, #1
 8001888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188a:	f7ff fa63 	bl	8000d54 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001892:	f7ff fa5f 	bl	8000d54 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e03d      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a4:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x46a>
 80018b0:	e035      	b.n	800191e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fa4c 	bl	8000d54 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff fa48 	bl	8000d54 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e026      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x498>
 80018de:	e01e      	b.n	800191e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d107      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e019      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40007000 	.word	0x40007000
 80018f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_RCC_OscConfig+0x500>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	429a      	cmp	r2, r3
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000

0800192c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0d0      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b6a      	ldr	r3, [pc, #424]	@ (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d910      	bls.n	8001970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b67      	ldr	r3, [pc, #412]	@ (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 0207 	bic.w	r2, r3, #7
 8001956:	4965      	ldr	r1, [pc, #404]	@ (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b63      	ldr	r3, [pc, #396]	@ (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0b8      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d020      	beq.n	80019be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001988:	4b59      	ldr	r3, [pc, #356]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4a58      	ldr	r2, [pc, #352]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001992:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a0:	4b53      	ldr	r3, [pc, #332]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4a52      	ldr	r2, [pc, #328]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80019aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ac:	4b50      	ldr	r3, [pc, #320]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	494d      	ldr	r1, [pc, #308]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d040      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4b47      	ldr	r3, [pc, #284]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d115      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e07f      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ea:	4b41      	ldr	r3, [pc, #260]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e073      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fa:	4b3d      	ldr	r3, [pc, #244]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e06b      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0a:	4b39      	ldr	r3, [pc, #228]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f023 0203 	bic.w	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4936      	ldr	r1, [pc, #216]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a1c:	f7ff f99a 	bl	8000d54 <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a24:	f7ff f996 	bl	8000d54 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e053      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 020c 	and.w	r2, r3, #12
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d1eb      	bne.n	8001a24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b27      	ldr	r3, [pc, #156]	@ (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d210      	bcs.n	8001a7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b24      	ldr	r3, [pc, #144]	@ (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 0207 	bic.w	r2, r3, #7
 8001a62:	4922      	ldr	r1, [pc, #136]	@ (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e032      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a88:	4b19      	ldr	r3, [pc, #100]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4916      	ldr	r1, [pc, #88]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d009      	beq.n	8001aba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aa6:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	490e      	ldr	r1, [pc, #56]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aba:	f000 f821 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	490a      	ldr	r1, [pc, #40]	@ (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001acc:	5ccb      	ldrb	r3, [r1, r3]
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	4a09      	ldr	r2, [pc, #36]	@ (8001af8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <HAL_RCC_ClockConfig+0x1d0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f83a 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000
 8001af0:	40021000 	.word	0x40021000
 8001af4:	0800596c 	.word	0x0800596c
 8001af8:	20000004 	.word	0x20000004
 8001afc:	20000008 	.word	0x20000008

08001b00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d002      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x30>
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d003      	beq.n	8001b36 <HAL_RCC_GetSysClockFreq+0x36>
 8001b2e:	e027      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b30:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b32:	613b      	str	r3, [r7, #16]
      break;
 8001b34:	e027      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	0c9b      	lsrs	r3, r3, #18
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	4a17      	ldr	r2, [pc, #92]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b40:	5cd3      	ldrb	r3, [r2, r3]
 8001b42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d010      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b4e:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	0c5b      	lsrs	r3, r3, #17
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	4a11      	ldr	r2, [pc, #68]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b5a:	5cd3      	ldrb	r3, [r2, r3]
 8001b5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a0d      	ldr	r2, [pc, #52]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b62:	fb03 f202 	mul.w	r2, r3, r2
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	e004      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	613b      	str	r3, [r7, #16]
      break;
 8001b7e:	e002      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b80:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b82:	613b      	str	r3, [r7, #16]
      break;
 8001b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b86:	693b      	ldr	r3, [r7, #16]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	371c      	adds	r7, #28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	007a1200 	.word	0x007a1200
 8001b9c:	08005984 	.word	0x08005984
 8001ba0:	08005994 	.word	0x08005994
 8001ba4:	003d0900 	.word	0x003d0900

08001ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bac:	4b02      	ldr	r3, [pc, #8]	@ (8001bb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bc0:	f7ff fff2 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	0a1b      	lsrs	r3, r3, #8
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	4903      	ldr	r1, [pc, #12]	@ (8001be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd2:	5ccb      	ldrb	r3, [r1, r3]
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	0800597c 	.word	0x0800597c

08001be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001be8:	f7ff ffde 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	0adb      	lsrs	r3, r3, #11
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	4903      	ldr	r1, [pc, #12]	@ (8001c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	0800597c 	.word	0x0800597c

08001c0c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	220f      	movs	r2, #15
 8001c1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c1c:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <HAL_RCC_GetClockConfig+0x58>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0203 	and.w	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c28:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <HAL_RCC_GetClockConfig+0x58>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c34:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <HAL_RCC_GetClockConfig+0x58>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c40:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <HAL_RCC_GetClockConfig+0x58>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	08db      	lsrs	r3, r3, #3
 8001c46:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_RCC_GetClockConfig+0x5c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0207 	and.w	r2, r3, #7
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40022000 	.word	0x40022000

08001c6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <RCC_Delay+0x34>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <RCC_Delay+0x38>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	0a5b      	lsrs	r3, r3, #9
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c88:	bf00      	nop
  }
  while (Delay --);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1e5a      	subs	r2, r3, #1
 8001c8e:	60fa      	str	r2, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f9      	bne.n	8001c88 <RCC_Delay+0x1c>
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	20000004 	.word	0x20000004
 8001ca4:	10624dd3 	.word	0x10624dd3

08001ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e041      	b.n	8001d3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7fe fea0 	bl	8000a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f000 fc94 	bl	8002614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d001      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e03a      	b.n	8001dd6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2202      	movs	r2, #2
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a18      	ldr	r2, [pc, #96]	@ (8001de0 <HAL_TIM_Base_Start_IT+0x98>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00e      	beq.n	8001da0 <HAL_TIM_Base_Start_IT+0x58>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d8a:	d009      	beq.n	8001da0 <HAL_TIM_Base_Start_IT+0x58>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a14      	ldr	r2, [pc, #80]	@ (8001de4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d004      	beq.n	8001da0 <HAL_TIM_Base_Start_IT+0x58>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a13      	ldr	r2, [pc, #76]	@ (8001de8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d111      	bne.n	8001dc4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d010      	beq.n	8001dd4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0201 	orr.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc2:	e007      	b.n	8001dd4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	40012c00 	.word	0x40012c00
 8001de4:	40000400 	.word	0x40000400
 8001de8:	40000800 	.word	0x40000800

08001dec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e041      	b.n	8001e82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f839 	bl	8001e8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3304      	adds	r3, #4
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	f000 fbf2 	bl	8002614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <HAL_TIM_PWM_Start+0x24>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	bf14      	ite	ne
 8001eb8:	2301      	movne	r3, #1
 8001eba:	2300      	moveq	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	e022      	b.n	8001f06 <HAL_TIM_PWM_Start+0x6a>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d109      	bne.n	8001eda <HAL_TIM_PWM_Start+0x3e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	bf14      	ite	ne
 8001ed2:	2301      	movne	r3, #1
 8001ed4:	2300      	moveq	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	e015      	b.n	8001f06 <HAL_TIM_PWM_Start+0x6a>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d109      	bne.n	8001ef4 <HAL_TIM_PWM_Start+0x58>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	bf14      	ite	ne
 8001eec:	2301      	movne	r3, #1
 8001eee:	2300      	moveq	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	e008      	b.n	8001f06 <HAL_TIM_PWM_Start+0x6a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e05e      	b.n	8001fcc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d104      	bne.n	8001f1e <HAL_TIM_PWM_Start+0x82>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f1c:	e013      	b.n	8001f46 <HAL_TIM_PWM_Start+0xaa>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d104      	bne.n	8001f2e <HAL_TIM_PWM_Start+0x92>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f2c:	e00b      	b.n	8001f46 <HAL_TIM_PWM_Start+0xaa>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d104      	bne.n	8001f3e <HAL_TIM_PWM_Start+0xa2>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f3c:	e003      	b.n	8001f46 <HAL_TIM_PWM_Start+0xaa>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2202      	movs	r2, #2
 8001f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	6839      	ldr	r1, [r7, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fde0 	bl	8002b14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd4 <HAL_TIM_PWM_Start+0x138>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d107      	bne.n	8001f6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a18      	ldr	r2, [pc, #96]	@ (8001fd4 <HAL_TIM_PWM_Start+0x138>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d00e      	beq.n	8001f96 <HAL_TIM_PWM_Start+0xfa>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f80:	d009      	beq.n	8001f96 <HAL_TIM_PWM_Start+0xfa>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a14      	ldr	r2, [pc, #80]	@ (8001fd8 <HAL_TIM_PWM_Start+0x13c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d004      	beq.n	8001f96 <HAL_TIM_PWM_Start+0xfa>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a12      	ldr	r2, [pc, #72]	@ (8001fdc <HAL_TIM_PWM_Start+0x140>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d111      	bne.n	8001fba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b06      	cmp	r3, #6
 8001fa6:	d010      	beq.n	8001fca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb8:	e007      	b.n	8001fca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40012c00 	.word	0x40012c00
 8001fd8:	40000400 	.word	0x40000400
 8001fdc:	40000800 	.word	0x40000800

08001fe0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	6839      	ldr	r1, [r7, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fd8e 	bl	8002b14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a29      	ldr	r2, [pc, #164]	@ (80020a4 <HAL_TIM_PWM_Stop+0xc4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d117      	bne.n	8002032 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6a1a      	ldr	r2, [r3, #32]
 8002008:	f241 1311 	movw	r3, #4369	@ 0x1111
 800200c:	4013      	ands	r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10f      	bne.n	8002032 <HAL_TIM_PWM_Stop+0x52>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6a1a      	ldr	r2, [r3, #32]
 8002018:	f240 4344 	movw	r3, #1092	@ 0x444
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d107      	bne.n	8002032 <HAL_TIM_PWM_Stop+0x52>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002030:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6a1a      	ldr	r2, [r3, #32]
 8002038:	f241 1311 	movw	r3, #4369	@ 0x1111
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10f      	bne.n	8002062 <HAL_TIM_PWM_Stop+0x82>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6a1a      	ldr	r2, [r3, #32]
 8002048:	f240 4344 	movw	r3, #1092	@ 0x444
 800204c:	4013      	ands	r3, r2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d107      	bne.n	8002062 <HAL_TIM_PWM_Stop+0x82>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0201 	bic.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d104      	bne.n	8002072 <HAL_TIM_PWM_Stop+0x92>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002070:	e013      	b.n	800209a <HAL_TIM_PWM_Stop+0xba>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b04      	cmp	r3, #4
 8002076:	d104      	bne.n	8002082 <HAL_TIM_PWM_Stop+0xa2>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002080:	e00b      	b.n	800209a <HAL_TIM_PWM_Stop+0xba>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b08      	cmp	r3, #8
 8002086:	d104      	bne.n	8002092 <HAL_TIM_PWM_Stop+0xb2>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002090:	e003      	b.n	800209a <HAL_TIM_PWM_Stop+0xba>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40012c00 	.word	0x40012c00

080020a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d122      	bne.n	8002104 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d11b      	bne.n	8002104 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0202 	mvn.w	r2, #2
 80020d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fa76 	bl	80025dc <HAL_TIM_IC_CaptureCallback>
 80020f0:	e005      	b.n	80020fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fa69 	bl	80025ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 fa78 	bl	80025ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b04      	cmp	r3, #4
 8002110:	d122      	bne.n	8002158 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b04      	cmp	r3, #4
 800211e:	d11b      	bne.n	8002158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0204 	mvn.w	r2, #4
 8002128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2202      	movs	r2, #2
 800212e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fa4c 	bl	80025dc <HAL_TIM_IC_CaptureCallback>
 8002144:	e005      	b.n	8002152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fa3f 	bl	80025ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 fa4e 	bl	80025ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b08      	cmp	r3, #8
 8002164:	d122      	bne.n	80021ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b08      	cmp	r3, #8
 8002172:	d11b      	bne.n	80021ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0208 	mvn.w	r2, #8
 800217c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2204      	movs	r2, #4
 8002182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fa22 	bl	80025dc <HAL_TIM_IC_CaptureCallback>
 8002198:	e005      	b.n	80021a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 fa15 	bl	80025ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 fa24 	bl	80025ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d122      	bne.n	8002200 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	2b10      	cmp	r3, #16
 80021c6:	d11b      	bne.n	8002200 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0210 	mvn.w	r2, #16
 80021d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2208      	movs	r2, #8
 80021d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f9f8 	bl	80025dc <HAL_TIM_IC_CaptureCallback>
 80021ec:	e005      	b.n	80021fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f9eb 	bl	80025ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f9fa 	bl	80025ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b01      	cmp	r3, #1
 800220c:	d10e      	bne.n	800222c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b01      	cmp	r3, #1
 800221a:	d107      	bne.n	800222c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0201 	mvn.w	r2, #1
 8002224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fba4 	bl	8000974 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002236:	2b80      	cmp	r3, #128	@ 0x80
 8002238:	d10e      	bne.n	8002258 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002244:	2b80      	cmp	r3, #128	@ 0x80
 8002246:	d107      	bne.n	8002258 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 fce9 	bl	8002c2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002262:	2b40      	cmp	r3, #64	@ 0x40
 8002264:	d10e      	bne.n	8002284 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002270:	2b40      	cmp	r3, #64	@ 0x40
 8002272:	d107      	bne.n	8002284 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800227c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f9be 	bl	8002600 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	2b20      	cmp	r3, #32
 8002290:	d10e      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0320 	and.w	r3, r3, #32
 800229c:	2b20      	cmp	r3, #32
 800229e:	d107      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0220 	mvn.w	r2, #32
 80022a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fcb4 	bl	8002c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e0ae      	b.n	8002434 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b0c      	cmp	r3, #12
 80022e2:	f200 809f 	bhi.w	8002424 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022e6:	a201      	add	r2, pc, #4	@ (adr r2, 80022ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ec:	08002321 	.word	0x08002321
 80022f0:	08002425 	.word	0x08002425
 80022f4:	08002425 	.word	0x08002425
 80022f8:	08002425 	.word	0x08002425
 80022fc:	08002361 	.word	0x08002361
 8002300:	08002425 	.word	0x08002425
 8002304:	08002425 	.word	0x08002425
 8002308:	08002425 	.word	0x08002425
 800230c:	080023a3 	.word	0x080023a3
 8002310:	08002425 	.word	0x08002425
 8002314:	08002425 	.word	0x08002425
 8002318:	08002425 	.word	0x08002425
 800231c:	080023e3 	.word	0x080023e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f9d6 	bl	80026d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0208 	orr.w	r2, r2, #8
 800233a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0204 	bic.w	r2, r2, #4
 800234a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6999      	ldr	r1, [r3, #24]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	619a      	str	r2, [r3, #24]
      break;
 800235e:	e064      	b.n	800242a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fa1c 	bl	80027a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800237a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800238a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6999      	ldr	r1, [r3, #24]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	021a      	lsls	r2, r3, #8
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	619a      	str	r2, [r3, #24]
      break;
 80023a0:	e043      	b.n	800242a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fa65 	bl	8002878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69da      	ldr	r2, [r3, #28]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0208 	orr.w	r2, r2, #8
 80023bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0204 	bic.w	r2, r2, #4
 80023cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69d9      	ldr	r1, [r3, #28]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	61da      	str	r2, [r3, #28]
      break;
 80023e0:	e023      	b.n	800242a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 faaf 	bl	800294c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69da      	ldr	r2, [r3, #28]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800240c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69d9      	ldr	r1, [r3, #28]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	021a      	lsls	r2, r3, #8
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	61da      	str	r2, [r3, #28]
      break;
 8002422:	e002      	b.n	800242a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	75fb      	strb	r3, [r7, #23]
      break;
 8002428:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002432:	7dfb      	ldrb	r3, [r7, #23]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_TIM_ConfigClockSource+0x1c>
 8002454:	2302      	movs	r3, #2
 8002456:	e0b4      	b.n	80025c2 <HAL_TIM_ConfigClockSource+0x186>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800247e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002490:	d03e      	beq.n	8002510 <HAL_TIM_ConfigClockSource+0xd4>
 8002492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002496:	f200 8087 	bhi.w	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
 800249a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800249e:	f000 8086 	beq.w	80025ae <HAL_TIM_ConfigClockSource+0x172>
 80024a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024a6:	d87f      	bhi.n	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
 80024a8:	2b70      	cmp	r3, #112	@ 0x70
 80024aa:	d01a      	beq.n	80024e2 <HAL_TIM_ConfigClockSource+0xa6>
 80024ac:	2b70      	cmp	r3, #112	@ 0x70
 80024ae:	d87b      	bhi.n	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
 80024b0:	2b60      	cmp	r3, #96	@ 0x60
 80024b2:	d050      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0x11a>
 80024b4:	2b60      	cmp	r3, #96	@ 0x60
 80024b6:	d877      	bhi.n	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
 80024b8:	2b50      	cmp	r3, #80	@ 0x50
 80024ba:	d03c      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0xfa>
 80024bc:	2b50      	cmp	r3, #80	@ 0x50
 80024be:	d873      	bhi.n	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
 80024c0:	2b40      	cmp	r3, #64	@ 0x40
 80024c2:	d058      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0x13a>
 80024c4:	2b40      	cmp	r3, #64	@ 0x40
 80024c6:	d86f      	bhi.n	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
 80024c8:	2b30      	cmp	r3, #48	@ 0x30
 80024ca:	d064      	beq.n	8002596 <HAL_TIM_ConfigClockSource+0x15a>
 80024cc:	2b30      	cmp	r3, #48	@ 0x30
 80024ce:	d86b      	bhi.n	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d060      	beq.n	8002596 <HAL_TIM_ConfigClockSource+0x15a>
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d867      	bhi.n	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d05c      	beq.n	8002596 <HAL_TIM_ConfigClockSource+0x15a>
 80024dc:	2b10      	cmp	r3, #16
 80024de:	d05a      	beq.n	8002596 <HAL_TIM_ConfigClockSource+0x15a>
 80024e0:	e062      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024f2:	f000 faf0 	bl	8002ad6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002504:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	609a      	str	r2, [r3, #8]
      break;
 800250e:	e04f      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002520:	f000 fad9 	bl	8002ad6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002532:	609a      	str	r2, [r3, #8]
      break;
 8002534:	e03c      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002542:	461a      	mov	r2, r3
 8002544:	f000 fa50 	bl	80029e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2150      	movs	r1, #80	@ 0x50
 800254e:	4618      	mov	r0, r3
 8002550:	f000 faa7 	bl	8002aa2 <TIM_ITRx_SetConfig>
      break;
 8002554:	e02c      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002562:	461a      	mov	r2, r3
 8002564:	f000 fa6e 	bl	8002a44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2160      	movs	r1, #96	@ 0x60
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fa97 	bl	8002aa2 <TIM_ITRx_SetConfig>
      break;
 8002574:	e01c      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002582:	461a      	mov	r2, r3
 8002584:	f000 fa30 	bl	80029e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2140      	movs	r1, #64	@ 0x40
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fa87 	bl	8002aa2 <TIM_ITRx_SetConfig>
      break;
 8002594:	e00c      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4619      	mov	r1, r3
 80025a0:	4610      	mov	r0, r2
 80025a2:	f000 fa7e 	bl	8002aa2 <TIM_ITRx_SetConfig>
      break;
 80025a6:	e003      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      break;
 80025ac:	e000      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
	...

08002614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a29      	ldr	r2, [pc, #164]	@ (80026cc <TIM_Base_SetConfig+0xb8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00b      	beq.n	8002644 <TIM_Base_SetConfig+0x30>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002632:	d007      	beq.n	8002644 <TIM_Base_SetConfig+0x30>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a26      	ldr	r2, [pc, #152]	@ (80026d0 <TIM_Base_SetConfig+0xbc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d003      	beq.n	8002644 <TIM_Base_SetConfig+0x30>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a25      	ldr	r2, [pc, #148]	@ (80026d4 <TIM_Base_SetConfig+0xc0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d108      	bne.n	8002656 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800264a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a1c      	ldr	r2, [pc, #112]	@ (80026cc <TIM_Base_SetConfig+0xb8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00b      	beq.n	8002676 <TIM_Base_SetConfig+0x62>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002664:	d007      	beq.n	8002676 <TIM_Base_SetConfig+0x62>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a19      	ldr	r2, [pc, #100]	@ (80026d0 <TIM_Base_SetConfig+0xbc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d003      	beq.n	8002676 <TIM_Base_SetConfig+0x62>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a18      	ldr	r2, [pc, #96]	@ (80026d4 <TIM_Base_SetConfig+0xc0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d108      	bne.n	8002688 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800267c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4313      	orrs	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a07      	ldr	r2, [pc, #28]	@ (80026cc <TIM_Base_SetConfig+0xb8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d103      	bne.n	80026bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	615a      	str	r2, [r3, #20]
}
 80026c2:	bf00      	nop
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	40012c00 	.word	0x40012c00
 80026d0:	40000400 	.word	0x40000400
 80026d4:	40000800 	.word	0x40000800

080026d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f023 0201 	bic.w	r2, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 0303 	bic.w	r3, r3, #3
 800270e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f023 0302 	bic.w	r3, r3, #2
 8002720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a1c      	ldr	r2, [pc, #112]	@ (80027a0 <TIM_OC1_SetConfig+0xc8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d10c      	bne.n	800274e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f023 0308 	bic.w	r3, r3, #8
 800273a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	4313      	orrs	r3, r2
 8002744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f023 0304 	bic.w	r3, r3, #4
 800274c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a13      	ldr	r2, [pc, #76]	@ (80027a0 <TIM_OC1_SetConfig+0xc8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d111      	bne.n	800277a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800275c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	621a      	str	r2, [r3, #32]
}
 8002794:	bf00      	nop
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40012c00 	.word	0x40012c00

080027a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f023 0210 	bic.w	r2, r3, #16
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f023 0320 	bic.w	r3, r3, #32
 80027ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002874 <TIM_OC2_SetConfig+0xd0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d10d      	bne.n	8002820 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800280a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800281e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a14      	ldr	r2, [pc, #80]	@ (8002874 <TIM_OC2_SetConfig+0xd0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d113      	bne.n	8002850 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800282e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002836:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	621a      	str	r2, [r3, #32]
}
 800286a:	bf00      	nop
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	40012c00 	.word	0x40012c00

08002878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 0303 	bic.w	r3, r3, #3
 80028ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	021b      	lsls	r3, r3, #8
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002948 <TIM_OC3_SetConfig+0xd0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d10d      	bne.n	80028f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80028f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a14      	ldr	r2, [pc, #80]	@ (8002948 <TIM_OC3_SetConfig+0xd0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d113      	bne.n	8002922 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	621a      	str	r2, [r3, #32]
}
 800293c:	bf00      	nop
 800293e:	371c      	adds	r7, #28
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40012c00 	.word	0x40012c00

0800294c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800297a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	021b      	lsls	r3, r3, #8
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	031b      	lsls	r3, r3, #12
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a0f      	ldr	r2, [pc, #60]	@ (80029e4 <TIM_OC4_SetConfig+0x98>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d109      	bne.n	80029c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	019b      	lsls	r3, r3, #6
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	621a      	str	r2, [r3, #32]
}
 80029da:	bf00      	nop
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	40012c00 	.word	0x40012c00

080029e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	f023 0201 	bic.w	r2, r3, #1
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f023 030a 	bic.w	r3, r3, #10
 8002a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	621a      	str	r2, [r3, #32]
}
 8002a3a:	bf00      	nop
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	f023 0210 	bic.w	r2, r3, #16
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	031b      	lsls	r3, r3, #12
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	621a      	str	r2, [r3, #32]
}
 8002a98:	bf00      	nop
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr

08002aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f043 0307 	orr.w	r3, r3, #7
 8002ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	609a      	str	r2, [r3, #8]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b087      	sub	sp, #28
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002af0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	021a      	lsls	r2, r3, #8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	609a      	str	r2, [r3, #8]
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	2201      	movs	r2, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a1a      	ldr	r2, [r3, #32]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	401a      	ands	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a1a      	ldr	r2, [r3, #32]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	621a      	str	r2, [r3, #32]
}
 8002b52:	bf00      	nop
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e046      	b.n	8002c02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a16      	ldr	r2, [pc, #88]	@ (8002c0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00e      	beq.n	8002bd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc0:	d009      	beq.n	8002bd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a12      	ldr	r2, [pc, #72]	@ (8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d004      	beq.n	8002bd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a10      	ldr	r2, [pc, #64]	@ (8002c14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	40012c00 	.word	0x40012c00
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40000800 	.word	0x40000800

08002c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e042      	b.n	8002cd4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fd ff22 	bl	8000aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2224      	movs	r2, #36	@ 0x24
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fdc5 	bl	8003810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	@ 0x28
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d16d      	bne.n	8002dd8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_UART_Transmit+0x2c>
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e066      	b.n	8002dda <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2221      	movs	r2, #33	@ 0x21
 8002d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d1a:	f7fe f81b 	bl	8000d54 <HAL_GetTick>
 8002d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	88fa      	ldrh	r2, [r7, #6]
 8002d24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	88fa      	ldrh	r2, [r7, #6]
 8002d2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d34:	d108      	bne.n	8002d48 <HAL_UART_Transmit+0x6c>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d104      	bne.n	8002d48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	e003      	b.n	8002d50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d50:	e02a      	b.n	8002da8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2180      	movs	r1, #128	@ 0x80
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fb14 	bl	800338a <UART_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e036      	b.n	8002dda <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10b      	bne.n	8002d8a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	3302      	adds	r3, #2
 8002d86:	61bb      	str	r3, [r7, #24]
 8002d88:	e007      	b.n	8002d9a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	3301      	adds	r3, #1
 8002d98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1cf      	bne.n	8002d52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2200      	movs	r2, #0
 8002dba:	2140      	movs	r1, #64	@ 0x40
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 fae4 	bl	800338a <UART_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e006      	b.n	8002dda <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e000      	b.n	8002dda <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
  }
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	4613      	mov	r3, r2
 8002dee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d112      	bne.n	8002e22 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_UART_Receive_IT+0x26>
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e00b      	b.n	8002e24 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	461a      	mov	r2, r3
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 fb24 	bl	8003466 <UART_Start_Receive_IT>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	e000      	b.n	8002e24 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002e22:	2302      	movs	r3, #2
  }
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b0ba      	sub	sp, #232	@ 0xe8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10f      	bne.n	8002e92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <HAL_UART_IRQHandler+0x66>
 8002e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fc01 	bl	8003692 <UART_Receive_IT>
      return;
 8002e90:	e25b      	b.n	800334a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80de 	beq.w	8003058 <HAL_UART_IRQHandler+0x22c>
 8002e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d106      	bne.n	8002eb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80d1 	beq.w	8003058 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <HAL_UART_IRQHandler+0xae>
 8002ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	f043 0201 	orr.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00b      	beq.n	8002efe <HAL_UART_IRQHandler+0xd2>
 8002ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef6:	f043 0202 	orr.w	r2, r3, #2
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_UART_IRQHandler+0xf6>
 8002f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1a:	f043 0204 	orr.w	r2, r3, #4
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d011      	beq.n	8002f52 <HAL_UART_IRQHandler+0x126>
 8002f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d105      	bne.n	8002f46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4a:	f043 0208 	orr.w	r2, r3, #8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 81f2 	beq.w	8003340 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_UART_IRQHandler+0x14e>
 8002f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fb8c 	bl	8003692 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf14      	ite	ne
 8002f88:	2301      	movne	r3, #1
 8002f8a:	2300      	moveq	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d103      	bne.n	8002fa6 <HAL_UART_IRQHandler+0x17a>
 8002f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d04f      	beq.n	8003046 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fa96 	bl	80034d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d041      	beq.n	800303e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3314      	adds	r3, #20
 8002fc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fc8:	e853 3f00 	ldrex	r3, [r3]
 8002fcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3314      	adds	r3, #20
 8002fe2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002fe6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002fea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ff2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002ff6:	e841 2300 	strex	r3, r2, [r1]
 8002ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1d9      	bne.n	8002fba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d013      	beq.n	8003036 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003012:	4a7e      	ldr	r2, [pc, #504]	@ (800320c <HAL_UART_IRQHandler+0x3e0>)
 8003014:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd ffd8 	bl	8000fd0 <HAL_DMA_Abort_IT>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d016      	beq.n	8003054 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003030:	4610      	mov	r0, r2
 8003032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003034:	e00e      	b.n	8003054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f993 	bl	8003362 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303c:	e00a      	b.n	8003054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f98f 	bl	8003362 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003044:	e006      	b.n	8003054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f98b 	bl	8003362 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003052:	e175      	b.n	8003340 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003054:	bf00      	nop
    return;
 8003056:	e173      	b.n	8003340 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305c:	2b01      	cmp	r3, #1
 800305e:	f040 814f 	bne.w	8003300 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8148 	beq.w	8003300 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 8141 	beq.w	8003300 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 80b6 	beq.w	8003210 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 8145 	beq.w	8003344 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80030be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030c2:	429a      	cmp	r2, r3
 80030c4:	f080 813e 	bcs.w	8003344 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	f000 8088 	beq.w	80031ec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030ea:	e853 3f00 	ldrex	r3, [r3]
 80030ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80030f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	330c      	adds	r3, #12
 8003104:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003108:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800310c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003110:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003114:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003118:	e841 2300 	strex	r3, r2, [r1]
 800311c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003120:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1d9      	bne.n	80030dc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3314      	adds	r3, #20
 800312e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003132:	e853 3f00 	ldrex	r3, [r3]
 8003136:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003138:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3314      	adds	r3, #20
 8003148:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800314c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003150:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003152:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003154:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003158:	e841 2300 	strex	r3, r2, [r1]
 800315c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800315e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1e1      	bne.n	8003128 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3314      	adds	r3, #20
 800316a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800316e:	e853 3f00 	ldrex	r3, [r3]
 8003172:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003174:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003176:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800317a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3314      	adds	r3, #20
 8003184:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003188:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800318a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800318e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003190:	e841 2300 	strex	r3, r2, [r1]
 8003194:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003196:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1e3      	bne.n	8003164 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	330c      	adds	r3, #12
 80031b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80031ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031bc:	f023 0310 	bic.w	r3, r3, #16
 80031c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	330c      	adds	r3, #12
 80031ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80031ce:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031d0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031d6:	e841 2300 	strex	r3, r2, [r1]
 80031da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80031dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e3      	bne.n	80031aa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd feb7 	bl	8000f5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	b29b      	uxth	r3, r3
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f8b6 	bl	8003374 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003208:	e09c      	b.n	8003344 <HAL_UART_IRQHandler+0x518>
 800320a:	bf00      	nop
 800320c:	0800359d 	.word	0x0800359d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003218:	b29b      	uxth	r3, r3
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 808e 	beq.w	8003348 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800322c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8089 	beq.w	8003348 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	330c      	adds	r3, #12
 800323c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003240:	e853 3f00 	ldrex	r3, [r3]
 8003244:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003248:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800324c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	330c      	adds	r3, #12
 8003256:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800325a:	647a      	str	r2, [r7, #68]	@ 0x44
 800325c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003260:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e3      	bne.n	8003236 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3314      	adds	r3, #20
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	e853 3f00 	ldrex	r3, [r3]
 800327c:	623b      	str	r3, [r7, #32]
   return(result);
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3314      	adds	r3, #20
 800328e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003292:	633a      	str	r2, [r7, #48]	@ 0x30
 8003294:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800329a:	e841 2300 	strex	r3, r2, [r1]
 800329e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1e3      	bne.n	800326e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	330c      	adds	r3, #12
 80032ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	e853 3f00 	ldrex	r3, [r3]
 80032c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0310 	bic.w	r3, r3, #16
 80032ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	330c      	adds	r3, #12
 80032d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80032d8:	61fa      	str	r2, [r7, #28]
 80032da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	69b9      	ldr	r1, [r7, #24]
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	e841 2300 	strex	r3, r2, [r1]
 80032e4:	617b      	str	r3, [r7, #20]
   return(result);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e3      	bne.n	80032b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032f6:	4619      	mov	r1, r3
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f83b 	bl	8003374 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032fe:	e023      	b.n	8003348 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003308:	2b00      	cmp	r3, #0
 800330a:	d009      	beq.n	8003320 <HAL_UART_IRQHandler+0x4f4>
 800330c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f953 	bl	80035c4 <UART_Transmit_IT>
    return;
 800331e:	e014      	b.n	800334a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00e      	beq.n	800334a <HAL_UART_IRQHandler+0x51e>
 800332c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f992 	bl	8003662 <UART_EndTransmit_IT>
    return;
 800333e:	e004      	b.n	800334a <HAL_UART_IRQHandler+0x51e>
    return;
 8003340:	bf00      	nop
 8003342:	e002      	b.n	800334a <HAL_UART_IRQHandler+0x51e>
      return;
 8003344:	bf00      	nop
 8003346:	e000      	b.n	800334a <HAL_UART_IRQHandler+0x51e>
      return;
 8003348:	bf00      	nop
  }
}
 800334a:	37e8      	adds	r7, #232	@ 0xe8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr

08003362 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b090      	sub	sp, #64	@ 0x40
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	603b      	str	r3, [r7, #0]
 8003396:	4613      	mov	r3, r2
 8003398:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800339a:	e050      	b.n	800343e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033a2:	d04c      	beq.n	800343e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <UART_WaitOnFlagUntilTimeout+0x30>
 80033aa:	f7fd fcd3 	bl	8000d54 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d241      	bcs.n	800343e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	330c      	adds	r3, #12
 80033c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80033d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	330c      	adds	r3, #12
 80033d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033da:	637a      	str	r2, [r7, #52]	@ 0x34
 80033dc:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033e2:	e841 2300 	strex	r3, r2, [r1]
 80033e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80033e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1e5      	bne.n	80033ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3314      	adds	r3, #20
 80033f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	e853 3f00 	ldrex	r3, [r3]
 80033fc:	613b      	str	r3, [r7, #16]
   return(result);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	3314      	adds	r3, #20
 800340c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800340e:	623a      	str	r2, [r7, #32]
 8003410:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003412:	69f9      	ldr	r1, [r7, #28]
 8003414:	6a3a      	ldr	r2, [r7, #32]
 8003416:	e841 2300 	strex	r3, r2, [r1]
 800341a:	61bb      	str	r3, [r7, #24]
   return(result);
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1e5      	bne.n	80033ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e00f      	b.n	800345e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4013      	ands	r3, r2
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	429a      	cmp	r2, r3
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	429a      	cmp	r2, r3
 800345a:	d09f      	beq.n	800339c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3740      	adds	r7, #64	@ 0x40
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003466:	b480      	push	{r7}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	4613      	mov	r3, r2
 8003472:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	88fa      	ldrh	r2, [r7, #6]
 800347e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	88fa      	ldrh	r2, [r7, #6]
 8003484:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2222      	movs	r2, #34	@ 0x22
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d007      	beq.n	80034ac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034aa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695a      	ldr	r2, [r3, #20]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0220 	orr.w	r2, r2, #32
 80034ca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034d8:	b480      	push	{r7}
 80034da:	b095      	sub	sp, #84	@ 0x54
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	330c      	adds	r3, #12
 80034e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ea:	e853 3f00 	ldrex	r3, [r3]
 80034ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	330c      	adds	r3, #12
 80034fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003500:	643a      	str	r2, [r7, #64]	@ 0x40
 8003502:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003504:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003506:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003508:	e841 2300 	strex	r3, r2, [r1]
 800350c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800350e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1e5      	bne.n	80034e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3314      	adds	r3, #20
 800351a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	e853 3f00 	ldrex	r3, [r3]
 8003522:	61fb      	str	r3, [r7, #28]
   return(result);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3314      	adds	r3, #20
 8003532:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003534:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003536:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003538:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800353a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800353c:	e841 2300 	strex	r3, r2, [r1]
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e5      	bne.n	8003514 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354c:	2b01      	cmp	r3, #1
 800354e:	d119      	bne.n	8003584 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	330c      	adds	r3, #12
 8003556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	e853 3f00 	ldrex	r3, [r3]
 800355e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f023 0310 	bic.w	r3, r3, #16
 8003566:	647b      	str	r3, [r7, #68]	@ 0x44
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003570:	61ba      	str	r2, [r7, #24]
 8003572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003574:	6979      	ldr	r1, [r7, #20]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	e841 2300 	strex	r3, r2, [r1]
 800357c:	613b      	str	r3, [r7, #16]
   return(result);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e5      	bne.n	8003550 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003592:	bf00      	nop
 8003594:	3754      	adds	r7, #84	@ 0x54
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr

0800359c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f7ff fed3 	bl	8003362 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035bc:	bf00      	nop
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b21      	cmp	r3, #33	@ 0x21
 80035d6:	d13e      	bne.n	8003656 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035e0:	d114      	bne.n	800360c <UART_Transmit_IT+0x48>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d110      	bne.n	800360c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	1c9a      	adds	r2, r3, #2
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	621a      	str	r2, [r3, #32]
 800360a:	e008      	b.n	800361e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	1c59      	adds	r1, r3, #1
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6211      	str	r1, [r2, #32]
 8003616:	781a      	ldrb	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29b      	uxth	r3, r3
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	4619      	mov	r1, r3
 800362c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10f      	bne.n	8003652 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003640:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003650:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e000      	b.n	8003658 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003656:	2302      	movs	r3, #2
  }
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003678:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff fe64 	bl	8003350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b08c      	sub	sp, #48	@ 0x30
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b22      	cmp	r3, #34	@ 0x22
 80036a4:	f040 80ae 	bne.w	8003804 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b0:	d117      	bne.n	80036e2 <UART_Receive_IT+0x50>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d113      	bne.n	80036e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036da:	1c9a      	adds	r2, r3, #2
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	629a      	str	r2, [r3, #40]	@ 0x28
 80036e0:	e026      	b.n	8003730 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036f4:	d007      	beq.n	8003706 <UART_Receive_IT+0x74>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10a      	bne.n	8003714 <UART_Receive_IT+0x82>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	e008      	b.n	8003726 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003720:	b2da      	uxtb	r2, r3
 8003722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003724:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29b      	uxth	r3, r3
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4619      	mov	r1, r3
 800373e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003740:	2b00      	cmp	r3, #0
 8003742:	d15d      	bne.n	8003800 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0220 	bic.w	r2, r2, #32
 8003752:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003762:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003786:	2b01      	cmp	r3, #1
 8003788:	d135      	bne.n	80037f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	330c      	adds	r3, #12
 8003796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	e853 3f00 	ldrex	r3, [r3]
 800379e:	613b      	str	r3, [r7, #16]
   return(result);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f023 0310 	bic.w	r3, r3, #16
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	330c      	adds	r3, #12
 80037ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b0:	623a      	str	r2, [r7, #32]
 80037b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b4:	69f9      	ldr	r1, [r7, #28]
 80037b6:	6a3a      	ldr	r2, [r7, #32]
 80037b8:	e841 2300 	strex	r3, r2, [r1]
 80037bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e5      	bne.n	8003790 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b10      	cmp	r3, #16
 80037d0:	d10a      	bne.n	80037e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037ec:	4619      	mov	r1, r3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff fdc0 	bl	8003374 <HAL_UARTEx_RxEventCallback>
 80037f4:	e002      	b.n	80037fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fc fe8a 	bl	8000510 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e002      	b.n	8003806 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	e000      	b.n	8003806 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003804:	2302      	movs	r3, #2
  }
}
 8003806:	4618      	mov	r0, r3
 8003808:	3730      	adds	r7, #48	@ 0x30
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800384a:	f023 030c 	bic.w	r3, r3, #12
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6812      	ldr	r2, [r2, #0]
 8003852:	68b9      	ldr	r1, [r7, #8]
 8003854:	430b      	orrs	r3, r1
 8003856:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a2c      	ldr	r2, [pc, #176]	@ (8003924 <UART_SetConfig+0x114>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d103      	bne.n	8003880 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003878:	f7fe f9b4 	bl	8001be4 <HAL_RCC_GetPCLK2Freq>
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	e002      	b.n	8003886 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003880:	f7fe f99c 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 8003884:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	009a      	lsls	r2, r3, #2
 8003890:	441a      	add	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	fbb2 f3f3 	udiv	r3, r2, r3
 800389c:	4a22      	ldr	r2, [pc, #136]	@ (8003928 <UART_SetConfig+0x118>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	0119      	lsls	r1, r3, #4
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	009a      	lsls	r2, r3, #2
 80038b0:	441a      	add	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003928 <UART_SetConfig+0x118>)
 80038be:	fba3 0302 	umull	r0, r3, r3, r2
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	2064      	movs	r0, #100	@ 0x64
 80038c6:	fb00 f303 	mul.w	r3, r0, r3
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	3332      	adds	r3, #50	@ 0x32
 80038d0:	4a15      	ldr	r2, [pc, #84]	@ (8003928 <UART_SetConfig+0x118>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038dc:	4419      	add	r1, r3
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	009a      	lsls	r2, r3, #2
 80038e8:	441a      	add	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003928 <UART_SetConfig+0x118>)
 80038f6:	fba3 0302 	umull	r0, r3, r3, r2
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	2064      	movs	r0, #100	@ 0x64
 80038fe:	fb00 f303 	mul.w	r3, r0, r3
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	3332      	adds	r3, #50	@ 0x32
 8003908:	4a07      	ldr	r2, [pc, #28]	@ (8003928 <UART_SetConfig+0x118>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	f003 020f 	and.w	r2, r3, #15
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	440a      	add	r2, r1
 800391a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40013800 	.word	0x40013800
 8003928:	51eb851f 	.word	0x51eb851f

0800392c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f103 0208 	add.w	r2, r3, #8
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003944:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f103 0208 	add.w	r2, r3, #8
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f103 0208 	add.w	r2, r3, #8
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003982:	b480      	push	{r7}
 8003984:	b085      	sub	sp, #20
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	601a      	str	r2, [r3, #0]
}
 80039be:	bf00      	nop
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039de:	d103      	bne.n	80039e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	e00c      	b.n	8003a02 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3308      	adds	r3, #8
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	e002      	b.n	80039f6 <vListInsert+0x2e>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d2f6      	bcs.n	80039f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	601a      	str	r2, [r3, #0]
}
 8003a2e:	bf00      	nop
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6892      	ldr	r2, [r2, #8]
 8003a4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6852      	ldr	r2, [r2, #4]
 8003a58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d103      	bne.n	8003a6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	1e5a      	subs	r2, r3, #1
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr
	...

08003a8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10b      	bne.n	8003ab8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ab2:	bf00      	nop
 8003ab4:	bf00      	nop
 8003ab6:	e7fd      	b.n	8003ab4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ab8:	f001 fc28 	bl	800530c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac4:	68f9      	ldr	r1, [r7, #12]
 8003ac6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ac8:	fb01 f303 	mul.w	r3, r1, r3
 8003acc:	441a      	add	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	68f9      	ldr	r1, [r7, #12]
 8003aec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	441a      	add	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	22ff      	movs	r2, #255	@ 0xff
 8003afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	22ff      	movs	r2, #255	@ 0xff
 8003b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d114      	bne.n	8003b38 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01a      	beq.n	8003b4c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3310      	adds	r3, #16
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 f834 	bl	8004b88 <xTaskRemoveFromEventList>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d012      	beq.n	8003b4c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b26:	4b0d      	ldr	r3, [pc, #52]	@ (8003b5c <xQueueGenericReset+0xd0>)
 8003b28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	e009      	b.n	8003b4c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	3310      	adds	r3, #16
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff fef5 	bl	800392c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3324      	adds	r3, #36	@ 0x24
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fef0 	bl	800392c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b4c:	f001 fc0e 	bl	800536c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b50:	2301      	movs	r3, #1
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	e000ed04 	.word	0xe000ed04

08003b60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	@ 0x28
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10b      	bne.n	8003b8c <xQueueGenericCreate+0x2c>
	__asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	613b      	str	r3, [r7, #16]
}
 8003b86:	bf00      	nop
 8003b88:	bf00      	nop
 8003b8a:	e7fd      	b.n	8003b88 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d102      	bne.n	8003b98 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
 8003b96:	e004      	b.n	8003ba2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ba0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3348      	adds	r3, #72	@ 0x48
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 fcb2 	bl	8005510 <pvPortMalloc>
 8003bac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00f      	beq.n	8003bd4 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	3348      	adds	r3, #72	@ 0x48
 8003bb8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003bc2:	79fa      	ldrb	r2, [r7, #7]
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f805 	bl	8003bde <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003bd4:	69bb      	ldr	r3, [r7, #24]
	}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
 8003bea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d103      	bne.n	8003bfa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	e002      	b.n	8003c00 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	69b8      	ldr	r0, [r7, #24]
 8003c10:	f7ff ff3c 	bl	8003a8c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08e      	sub	sp, #56	@ 0x38
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10b      	bne.n	8003c4c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c46:	bf00      	nop
 8003c48:	bf00      	nop
 8003c4a:	e7fd      	b.n	8003c48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <xQueueGenericSendFromISR+0x3e>
 8003c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <xQueueGenericSendFromISR+0x42>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <xQueueGenericSendFromISR+0x44>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10b      	bne.n	8003c7c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	623b      	str	r3, [r7, #32]
}
 8003c76:	bf00      	nop
 8003c78:	bf00      	nop
 8003c7a:	e7fd      	b.n	8003c78 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d103      	bne.n	8003c8a <xQueueGenericSendFromISR+0x6e>
 8003c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <xQueueGenericSendFromISR+0x72>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <xQueueGenericSendFromISR+0x74>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10b      	bne.n	8003cac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	61fb      	str	r3, [r7, #28]
}
 8003ca6:	bf00      	nop
 8003ca8:	bf00      	nop
 8003caa:	e7fd      	b.n	8003ca8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cac:	f001 fbf0 	bl	8005490 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003cb0:	f3ef 8211 	mrs	r2, BASEPRI
 8003cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	61ba      	str	r2, [r7, #24]
 8003cc6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003cc8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d302      	bcc.n	8003cde <xQueueGenericSendFromISR+0xc2>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d12c      	bne.n	8003d38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ce4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cee:	f000 f913 	bl	8003f18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003cf2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cfa:	d112      	bne.n	8003d22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d016      	beq.n	8003d32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d06:	3324      	adds	r3, #36	@ 0x24
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 ff3d 	bl	8004b88 <xTaskRemoveFromEventList>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00e      	beq.n	8003d32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00b      	beq.n	8003d32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e007      	b.n	8003d32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d26:	3301      	adds	r3, #1
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	b25a      	sxtb	r2, r3
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003d32:	2301      	movs	r3, #1
 8003d34:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003d36:	e001      	b.n	8003d3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d3e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3738      	adds	r7, #56	@ 0x38
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08c      	sub	sp, #48	@ 0x30
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d60:	2300      	movs	r3, #0
 8003d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10b      	bne.n	8003d86 <xQueueReceive+0x32>
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	623b      	str	r3, [r7, #32]
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	e7fd      	b.n	8003d82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d103      	bne.n	8003d94 <xQueueReceive+0x40>
 8003d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <xQueueReceive+0x44>
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <xQueueReceive+0x46>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10b      	bne.n	8003db6 <xQueueReceive+0x62>
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	61fb      	str	r3, [r7, #28]
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	e7fd      	b.n	8003db2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003db6:	f001 f8ab 	bl	8004f10 <xTaskGetSchedulerState>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d102      	bne.n	8003dc6 <xQueueReceive+0x72>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <xQueueReceive+0x76>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <xQueueReceive+0x78>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10b      	bne.n	8003de8 <xQueueReceive+0x94>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	61bb      	str	r3, [r7, #24]
}
 8003de2:	bf00      	nop
 8003de4:	bf00      	nop
 8003de6:	e7fd      	b.n	8003de4 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003de8:	f001 fa90 	bl	800530c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01f      	beq.n	8003e38 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dfc:	f000 f8f6 	bl	8003fec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	1e5a      	subs	r2, r3, #1
 8003e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e06:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00f      	beq.n	8003e30 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e12:	3310      	adds	r3, #16
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 feb7 	bl	8004b88 <xTaskRemoveFromEventList>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d007      	beq.n	8003e30 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e20:	4b3c      	ldr	r3, [pc, #240]	@ (8003f14 <xQueueReceive+0x1c0>)
 8003e22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e30:	f001 fa9c 	bl	800536c <vPortExitCritical>
				return pdPASS;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e069      	b.n	8003f0c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d103      	bne.n	8003e46 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e3e:	f001 fa95 	bl	800536c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e42:	2300      	movs	r3, #0
 8003e44:	e062      	b.n	8003f0c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d106      	bne.n	8003e5a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e4c:	f107 0310 	add.w	r3, r7, #16
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fefd 	bl	8004c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e56:	2301      	movs	r3, #1
 8003e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e5a:	f001 fa87 	bl	800536c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e5e:	f000 fca7 	bl	80047b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e62:	f001 fa53 	bl	800530c <vPortEnterCritical>
 8003e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e6c:	b25b      	sxtb	r3, r3
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e72:	d103      	bne.n	8003e7c <xQueueReceive+0x128>
 8003e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e82:	b25b      	sxtb	r3, r3
 8003e84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e88:	d103      	bne.n	8003e92 <xQueueReceive+0x13e>
 8003e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e92:	f001 fa6b 	bl	800536c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e96:	1d3a      	adds	r2, r7, #4
 8003e98:	f107 0310 	add.w	r3, r7, #16
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 feec 	bl	8004c7c <xTaskCheckForTimeOut>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d123      	bne.n	8003ef2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eac:	f000 f916 	bl	80040dc <prvIsQueueEmpty>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d017      	beq.n	8003ee6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb8:	3324      	adds	r3, #36	@ 0x24
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fe3c 	bl	8004b3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ec4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ec6:	f000 f8b7 	bl	8004038 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003eca:	f000 fc7f 	bl	80047cc <xTaskResumeAll>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d189      	bne.n	8003de8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8003f14 <xQueueReceive+0x1c0>)
 8003ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	e780      	b.n	8003de8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ee6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ee8:	f000 f8a6 	bl	8004038 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003eec:	f000 fc6e 	bl	80047cc <xTaskResumeAll>
 8003ef0:	e77a      	b.n	8003de8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ef2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ef4:	f000 f8a0 	bl	8004038 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ef8:	f000 fc68 	bl	80047cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003efc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003efe:	f000 f8ed 	bl	80040dc <prvIsQueueEmpty>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f43f af6f 	beq.w	8003de8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3730      	adds	r7, #48	@ 0x30
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	e000ed04 	.word	0xe000ed04

08003f18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10d      	bne.n	8003f52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d14d      	bne.n	8003fda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f001 f802 	bl	8004f4c <xTaskPriorityDisinherit>
 8003f48:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	605a      	str	r2, [r3, #4]
 8003f50:	e043      	b.n	8003fda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d119      	bne.n	8003f8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6898      	ldr	r0, [r3, #8]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	461a      	mov	r2, r3
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	f001 fcde 	bl	8005924 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f70:	441a      	add	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d32b      	bcc.n	8003fda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	609a      	str	r2, [r3, #8]
 8003f8a:	e026      	b.n	8003fda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68d8      	ldr	r0, [r3, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f94:	461a      	mov	r2, r3
 8003f96:	68b9      	ldr	r1, [r7, #8]
 8003f98:	f001 fcc4 	bl	8005924 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	425b      	negs	r3, r3
 8003fa6:	441a      	add	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d207      	bcs.n	8003fc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc0:	425b      	negs	r3, r3
 8003fc2:	441a      	add	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d105      	bne.n	8003fda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003fe2:	697b      	ldr	r3, [r7, #20]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d018      	beq.n	8004030 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	441a      	add	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	429a      	cmp	r2, r3
 8004016:	d303      	bcc.n	8004020 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68d9      	ldr	r1, [r3, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	461a      	mov	r2, r3
 800402a:	6838      	ldr	r0, [r7, #0]
 800402c:	f001 fc7a 	bl	8005924 <memcpy>
	}
}
 8004030:	bf00      	nop
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004040:	f001 f964 	bl	800530c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800404a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800404c:	e011      	b.n	8004072 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	2b00      	cmp	r3, #0
 8004054:	d012      	beq.n	800407c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3324      	adds	r3, #36	@ 0x24
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fd94 	bl	8004b88 <xTaskRemoveFromEventList>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004066:	f000 fe6d 	bl	8004d44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	3b01      	subs	r3, #1
 800406e:	b2db      	uxtb	r3, r3
 8004070:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004076:	2b00      	cmp	r3, #0
 8004078:	dce9      	bgt.n	800404e <prvUnlockQueue+0x16>
 800407a:	e000      	b.n	800407e <prvUnlockQueue+0x46>
					break;
 800407c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	22ff      	movs	r2, #255	@ 0xff
 8004082:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004086:	f001 f971 	bl	800536c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800408a:	f001 f93f 	bl	800530c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004094:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004096:	e011      	b.n	80040bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d012      	beq.n	80040c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3310      	adds	r3, #16
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fd6f 	bl	8004b88 <xTaskRemoveFromEventList>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040b0:	f000 fe48 	bl	8004d44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040b4:	7bbb      	ldrb	r3, [r7, #14]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	dce9      	bgt.n	8004098 <prvUnlockQueue+0x60>
 80040c4:	e000      	b.n	80040c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	22ff      	movs	r2, #255	@ 0xff
 80040cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80040d0:	f001 f94c 	bl	800536c <vPortExitCritical>
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040e4:	f001 f912 	bl	800530c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040f0:	2301      	movs	r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	e001      	b.n	80040fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040fa:	f001 f937 	bl	800536c <vPortExitCritical>

	return xReturn;
 80040fe:	68fb      	ldr	r3, [r7, #12]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08e      	sub	sp, #56	@ 0x38
 800410c:	af04      	add	r7, sp, #16
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10b      	bne.n	8004134 <xTaskCreateStatic+0x2c>
	__asm volatile
 800411c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	623b      	str	r3, [r7, #32]
}
 800412e:	bf00      	nop
 8004130:	bf00      	nop
 8004132:	e7fd      	b.n	8004130 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10b      	bne.n	8004152 <xTaskCreateStatic+0x4a>
	__asm volatile
 800413a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	61fb      	str	r3, [r7, #28]
}
 800414c:	bf00      	nop
 800414e:	bf00      	nop
 8004150:	e7fd      	b.n	800414e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004152:	2354      	movs	r3, #84	@ 0x54
 8004154:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b54      	cmp	r3, #84	@ 0x54
 800415a:	d00b      	beq.n	8004174 <xTaskCreateStatic+0x6c>
	__asm volatile
 800415c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	61bb      	str	r3, [r7, #24]
}
 800416e:	bf00      	nop
 8004170:	bf00      	nop
 8004172:	e7fd      	b.n	8004170 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01e      	beq.n	80041b8 <xTaskCreateStatic+0xb0>
 800417a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01b      	beq.n	80041b8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004182:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004188:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	2202      	movs	r2, #2
 800418e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004192:	2300      	movs	r3, #0
 8004194:	9303      	str	r3, [sp, #12]
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	9302      	str	r3, [sp, #8]
 800419a:	f107 0314 	add.w	r3, r7, #20
 800419e:	9301      	str	r3, [sp, #4]
 80041a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f850 	bl	8004250 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80041b2:	f000 f8cd 	bl	8004350 <prvAddNewTaskToReadyList>
 80041b6:	e001      	b.n	80041bc <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041bc:	697b      	ldr	r3, [r7, #20]
	}
 80041be:	4618      	mov	r0, r3
 80041c0:	3728      	adds	r7, #40	@ 0x28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b08c      	sub	sp, #48	@ 0x30
 80041ca:	af04      	add	r7, sp, #16
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	603b      	str	r3, [r7, #0]
 80041d2:	4613      	mov	r3, r2
 80041d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4618      	mov	r0, r3
 80041dc:	f001 f998 	bl	8005510 <pvPortMalloc>
 80041e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00e      	beq.n	8004206 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80041e8:	2054      	movs	r0, #84	@ 0x54
 80041ea:	f001 f991 	bl	8005510 <pvPortMalloc>
 80041ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80041fc:	e005      	b.n	800420a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041fe:	6978      	ldr	r0, [r7, #20]
 8004200:	f001 fa4e 	bl	80056a0 <vPortFree>
 8004204:	e001      	b.n	800420a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004206:	2300      	movs	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d017      	beq.n	8004240 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004218:	88fa      	ldrh	r2, [r7, #6]
 800421a:	2300      	movs	r3, #0
 800421c:	9303      	str	r3, [sp, #12]
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	9302      	str	r3, [sp, #8]
 8004222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f80e 	bl	8004250 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004234:	69f8      	ldr	r0, [r7, #28]
 8004236:	f000 f88b 	bl	8004350 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800423a:	2301      	movs	r3, #1
 800423c:	61bb      	str	r3, [r7, #24]
 800423e:	e002      	b.n	8004246 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004240:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004244:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004246:	69bb      	ldr	r3, [r7, #24]
	}
 8004248:	4618      	mov	r0, r3
 800424a:	3720      	adds	r7, #32
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800425e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004268:	3b01      	subs	r3, #1
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	f023 0307 	bic.w	r3, r3, #7
 8004276:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00b      	beq.n	800429a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	617b      	str	r3, [r7, #20]
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	e7fd      	b.n	8004296 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	e012      	b.n	80042c6 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	7819      	ldrb	r1, [r3, #0]
 80042a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	4413      	add	r3, r2
 80042ae:	3334      	adds	r3, #52	@ 0x34
 80042b0:	460a      	mov	r2, r1
 80042b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	4413      	add	r3, r2
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d006      	beq.n	80042ce <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	3301      	adds	r3, #1
 80042c4:	61fb      	str	r3, [r7, #28]
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	2b0f      	cmp	r3, #15
 80042ca:	d9e9      	bls.n	80042a0 <prvInitialiseNewTask+0x50>
 80042cc:	e000      	b.n	80042d0 <prvInitialiseNewTask+0x80>
		{
			break;
 80042ce:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042da:	2b06      	cmp	r3, #6
 80042dc:	d901      	bls.n	80042e2 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042de:	2306      	movs	r3, #6
 80042e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042ec:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f0:	2200      	movs	r2, #0
 80042f2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f6:	3304      	adds	r3, #4
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff fb36 	bl	800396a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004300:	3318      	adds	r3, #24
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fb31 	bl	800396a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800430c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800430e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004310:	f1c3 0207 	rsb	r2, r3, #7
 8004314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004316:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800431c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800431e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004320:	2200      	movs	r2, #0
 8004322:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	68f9      	ldr	r1, [r7, #12]
 8004330:	69b8      	ldr	r0, [r7, #24]
 8004332:	f000 fef9 	bl	8005128 <pxPortInitialiseStack>
 8004336:	4602      	mov	r2, r0
 8004338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800433c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004346:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004348:	bf00      	nop
 800434a:	3720      	adds	r7, #32
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004358:	f000 ffd8 	bl	800530c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800435c:	4b2a      	ldr	r3, [pc, #168]	@ (8004408 <prvAddNewTaskToReadyList+0xb8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3301      	adds	r3, #1
 8004362:	4a29      	ldr	r2, [pc, #164]	@ (8004408 <prvAddNewTaskToReadyList+0xb8>)
 8004364:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004366:	4b29      	ldr	r3, [pc, #164]	@ (800440c <prvAddNewTaskToReadyList+0xbc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800436e:	4a27      	ldr	r2, [pc, #156]	@ (800440c <prvAddNewTaskToReadyList+0xbc>)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004374:	4b24      	ldr	r3, [pc, #144]	@ (8004408 <prvAddNewTaskToReadyList+0xb8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d110      	bne.n	800439e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800437c:	f000 fd06 	bl	8004d8c <prvInitialiseTaskLists>
 8004380:	e00d      	b.n	800439e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004382:	4b23      	ldr	r3, [pc, #140]	@ (8004410 <prvAddNewTaskToReadyList+0xc0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800438a:	4b20      	ldr	r3, [pc, #128]	@ (800440c <prvAddNewTaskToReadyList+0xbc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004394:	429a      	cmp	r2, r3
 8004396:	d802      	bhi.n	800439e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004398:	4a1c      	ldr	r2, [pc, #112]	@ (800440c <prvAddNewTaskToReadyList+0xbc>)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800439e:	4b1d      	ldr	r3, [pc, #116]	@ (8004414 <prvAddNewTaskToReadyList+0xc4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3301      	adds	r3, #1
 80043a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004414 <prvAddNewTaskToReadyList+0xc4>)
 80043a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	2201      	movs	r2, #1
 80043ae:	409a      	lsls	r2, r3
 80043b0:	4b19      	ldr	r3, [pc, #100]	@ (8004418 <prvAddNewTaskToReadyList+0xc8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	4a18      	ldr	r2, [pc, #96]	@ (8004418 <prvAddNewTaskToReadyList+0xc8>)
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4a15      	ldr	r2, [pc, #84]	@ (800441c <prvAddNewTaskToReadyList+0xcc>)
 80043c8:	441a      	add	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3304      	adds	r3, #4
 80043ce:	4619      	mov	r1, r3
 80043d0:	4610      	mov	r0, r2
 80043d2:	f7ff fad6 	bl	8003982 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043d6:	f000 ffc9 	bl	800536c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043da:	4b0d      	ldr	r3, [pc, #52]	@ (8004410 <prvAddNewTaskToReadyList+0xc0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00e      	beq.n	8004400 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043e2:	4b0a      	ldr	r3, [pc, #40]	@ (800440c <prvAddNewTaskToReadyList+0xbc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d207      	bcs.n	8004400 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004420 <prvAddNewTaskToReadyList+0xd0>)
 80043f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	2000047c 	.word	0x2000047c
 800440c:	2000037c 	.word	0x2000037c
 8004410:	20000488 	.word	0x20000488
 8004414:	20000498 	.word	0x20000498
 8004418:	20000484 	.word	0x20000484
 800441c:	20000380 	.word	0x20000380
 8004420:	e000ed04 	.word	0xe000ed04

08004424 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d018      	beq.n	8004468 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004436:	4b14      	ldr	r3, [pc, #80]	@ (8004488 <vTaskDelay+0x64>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <vTaskDelay+0x32>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	60bb      	str	r3, [r7, #8]
}
 8004450:	bf00      	nop
 8004452:	bf00      	nop
 8004454:	e7fd      	b.n	8004452 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004456:	f000 f9ab 	bl	80047b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800445a:	2100      	movs	r1, #0
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fdfd 	bl	800505c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004462:	f000 f9b3 	bl	80047cc <xTaskResumeAll>
 8004466:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d107      	bne.n	800447e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800446e:	4b07      	ldr	r3, [pc, #28]	@ (800448c <vTaskDelay+0x68>)
 8004470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	200004a4 	.word	0x200004a4
 800448c:	e000ed04 	.word	0xe000ed04

08004490 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004498:	f000 ff38 	bl	800530c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <vTaskSuspend+0x18>
 80044a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004598 <vTaskSuspend+0x108>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	e000      	b.n	80044aa <vTaskSuspend+0x1a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff fac1 	bl	8003a38 <uxListRemove>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d115      	bne.n	80044e8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c0:	4936      	ldr	r1, [pc, #216]	@ (800459c <vTaskSuspend+0x10c>)
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <vTaskSuspend+0x58>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d6:	2201      	movs	r2, #1
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	43da      	mvns	r2, r3
 80044de:	4b30      	ldr	r3, [pc, #192]	@ (80045a0 <vTaskSuspend+0x110>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4013      	ands	r3, r2
 80044e4:	4a2e      	ldr	r2, [pc, #184]	@ (80045a0 <vTaskSuspend+0x110>)
 80044e6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d004      	beq.n	80044fa <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3318      	adds	r3, #24
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff fa9f 	bl	8003a38 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3304      	adds	r3, #4
 80044fe:	4619      	mov	r1, r3
 8004500:	4828      	ldr	r0, [pc, #160]	@ (80045a4 <vTaskSuspend+0x114>)
 8004502:	f7ff fa3e 	bl	8003982 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b01      	cmp	r3, #1
 8004510:	d103      	bne.n	800451a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800451a:	f000 ff27 	bl	800536c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800451e:	4b22      	ldr	r3, [pc, #136]	@ (80045a8 <vTaskSuspend+0x118>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004526:	f000 fef1 	bl	800530c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800452a:	f000 fccd 	bl	8004ec8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800452e:	f000 ff1d 	bl	800536c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004532:	4b19      	ldr	r3, [pc, #100]	@ (8004598 <vTaskSuspend+0x108>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	429a      	cmp	r2, r3
 800453a:	d128      	bne.n	800458e <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 800453c:	4b1a      	ldr	r3, [pc, #104]	@ (80045a8 <vTaskSuspend+0x118>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d018      	beq.n	8004576 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004544:	4b19      	ldr	r3, [pc, #100]	@ (80045ac <vTaskSuspend+0x11c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00b      	beq.n	8004564 <vTaskSuspend+0xd4>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	60bb      	str	r3, [r7, #8]
}
 800455e:	bf00      	nop
 8004560:	bf00      	nop
 8004562:	e7fd      	b.n	8004560 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8004564:	4b12      	ldr	r3, [pc, #72]	@ (80045b0 <vTaskSuspend+0x120>)
 8004566:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004574:	e00b      	b.n	800458e <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8004576:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <vTaskSuspend+0x114>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4b0e      	ldr	r3, [pc, #56]	@ (80045b4 <vTaskSuspend+0x124>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d103      	bne.n	800458a <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8004582:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <vTaskSuspend+0x108>)
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
	}
 8004588:	e001      	b.n	800458e <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 800458a:	f000 fa7b 	bl	8004a84 <vTaskSwitchContext>
	}
 800458e:	bf00      	nop
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	2000037c 	.word	0x2000037c
 800459c:	20000380 	.word	0x20000380
 80045a0:	20000484 	.word	0x20000484
 80045a4:	20000468 	.word	0x20000468
 80045a8:	20000488 	.word	0x20000488
 80045ac:	200004a4 	.word	0x200004a4
 80045b0:	e000ed04 	.word	0xe000ed04
 80045b4:	2000047c 	.word	0x2000047c

080045b8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10b      	bne.n	80045e6 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	60fb      	str	r3, [r7, #12]
}
 80045e0:	bf00      	nop
 80045e2:	bf00      	nop
 80045e4:	e7fd      	b.n	80045e2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004628 <prvTaskIsTaskSuspended+0x70>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d101      	bne.n	80045f4 <prvTaskIsTaskSuspended+0x3c>
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <prvTaskIsTaskSuspended+0x3e>
 80045f4:	2300      	movs	r3, #0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00f      	beq.n	800461a <prvTaskIsTaskSuspended+0x62>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fe:	4a0b      	ldr	r2, [pc, #44]	@ (800462c <prvTaskIsTaskSuspended+0x74>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00a      	beq.n	800461a <prvTaskIsTaskSuspended+0x62>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <prvTaskIsTaskSuspended+0x58>
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <prvTaskIsTaskSuspended+0x5a>
 8004610:	2300      	movs	r3, #0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <prvTaskIsTaskSuspended+0x62>
				{
					xReturn = pdTRUE;
 8004616:	2301      	movs	r3, #1
 8004618:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800461a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800461c:	4618      	mov	r0, r3
 800461e:	371c      	adds	r7, #28
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20000468 	.word	0x20000468
 800462c:	2000043c 	.word	0x2000043c

08004630 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10b      	bne.n	800465a <vTaskResume+0x2a>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	60bb      	str	r3, [r7, #8]
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	e7fd      	b.n	8004656 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d039      	beq.n	80046d4 <vTaskResume+0xa4>
 8004660:	4b1e      	ldr	r3, [pc, #120]	@ (80046dc <vTaskResume+0xac>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	429a      	cmp	r2, r3
 8004668:	d034      	beq.n	80046d4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800466a:	f000 fe4f 	bl	800530c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7ff ffa2 	bl	80045b8 <prvTaskIsTaskSuspended>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d02a      	beq.n	80046d0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3304      	adds	r3, #4
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff f9da 	bl	8003a38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004688:	2201      	movs	r2, #1
 800468a:	409a      	lsls	r2, r3
 800468c:	4b14      	ldr	r3, [pc, #80]	@ (80046e0 <vTaskResume+0xb0>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4313      	orrs	r3, r2
 8004692:	4a13      	ldr	r2, [pc, #76]	@ (80046e0 <vTaskResume+0xb0>)
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4a10      	ldr	r2, [pc, #64]	@ (80046e4 <vTaskResume+0xb4>)
 80046a4:	441a      	add	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3304      	adds	r3, #4
 80046aa:	4619      	mov	r1, r3
 80046ac:	4610      	mov	r0, r2
 80046ae:	f7ff f968 	bl	8003982 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b6:	4b09      	ldr	r3, [pc, #36]	@ (80046dc <vTaskResume+0xac>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046bc:	429a      	cmp	r2, r3
 80046be:	d307      	bcc.n	80046d0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80046c0:	4b09      	ldr	r3, [pc, #36]	@ (80046e8 <vTaskResume+0xb8>)
 80046c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80046d0:	f000 fe4c 	bl	800536c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	2000037c 	.word	0x2000037c
 80046e0:	20000484 	.word	0x20000484
 80046e4:	20000380 	.word	0x20000380
 80046e8:	e000ed04 	.word	0xe000ed04

080046ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	@ 0x28
 80046f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046fa:	463a      	mov	r2, r7
 80046fc:	1d39      	adds	r1, r7, #4
 80046fe:	f107 0308 	add.w	r3, r7, #8
 8004702:	4618      	mov	r0, r3
 8004704:	f7fb fd24 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004708:	6839      	ldr	r1, [r7, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	9202      	str	r2, [sp, #8]
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	2300      	movs	r3, #0
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	2300      	movs	r3, #0
 8004718:	460a      	mov	r2, r1
 800471a:	491f      	ldr	r1, [pc, #124]	@ (8004798 <vTaskStartScheduler+0xac>)
 800471c:	481f      	ldr	r0, [pc, #124]	@ (800479c <vTaskStartScheduler+0xb0>)
 800471e:	f7ff fcf3 	bl	8004108 <xTaskCreateStatic>
 8004722:	4603      	mov	r3, r0
 8004724:	4a1e      	ldr	r2, [pc, #120]	@ (80047a0 <vTaskStartScheduler+0xb4>)
 8004726:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004728:	4b1d      	ldr	r3, [pc, #116]	@ (80047a0 <vTaskStartScheduler+0xb4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004730:	2301      	movs	r3, #1
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	e001      	b.n	800473a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d116      	bne.n	800476e <vTaskStartScheduler+0x82>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	613b      	str	r3, [r7, #16]
}
 8004752:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004754:	4b13      	ldr	r3, [pc, #76]	@ (80047a4 <vTaskStartScheduler+0xb8>)
 8004756:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800475a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800475c:	4b12      	ldr	r3, [pc, #72]	@ (80047a8 <vTaskStartScheduler+0xbc>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004762:	4b12      	ldr	r3, [pc, #72]	@ (80047ac <vTaskStartScheduler+0xc0>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004768:	f000 fd5e 	bl	8005228 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800476c:	e00f      	b.n	800478e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004774:	d10b      	bne.n	800478e <vTaskStartScheduler+0xa2>
	__asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	60fb      	str	r3, [r7, #12]
}
 8004788:	bf00      	nop
 800478a:	bf00      	nop
 800478c:	e7fd      	b.n	800478a <vTaskStartScheduler+0x9e>
}
 800478e:	bf00      	nop
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	08005964 	.word	0x08005964
 800479c:	08004d5d 	.word	0x08004d5d
 80047a0:	200004a0 	.word	0x200004a0
 80047a4:	2000049c 	.word	0x2000049c
 80047a8:	20000488 	.word	0x20000488
 80047ac:	20000480 	.word	0x20000480

080047b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80047b4:	4b04      	ldr	r3, [pc, #16]	@ (80047c8 <vTaskSuspendAll+0x18>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3301      	adds	r3, #1
 80047ba:	4a03      	ldr	r2, [pc, #12]	@ (80047c8 <vTaskSuspendAll+0x18>)
 80047bc:	6013      	str	r3, [r2, #0]
}
 80047be:	bf00      	nop
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	200004a4 	.word	0x200004a4

080047cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047da:	4b42      	ldr	r3, [pc, #264]	@ (80048e4 <xTaskResumeAll+0x118>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10b      	bne.n	80047fa <xTaskResumeAll+0x2e>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	603b      	str	r3, [r7, #0]
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	e7fd      	b.n	80047f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047fa:	f000 fd87 	bl	800530c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047fe:	4b39      	ldr	r3, [pc, #228]	@ (80048e4 <xTaskResumeAll+0x118>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3b01      	subs	r3, #1
 8004804:	4a37      	ldr	r2, [pc, #220]	@ (80048e4 <xTaskResumeAll+0x118>)
 8004806:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004808:	4b36      	ldr	r3, [pc, #216]	@ (80048e4 <xTaskResumeAll+0x118>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d161      	bne.n	80048d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004810:	4b35      	ldr	r3, [pc, #212]	@ (80048e8 <xTaskResumeAll+0x11c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d05d      	beq.n	80048d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004818:	e02e      	b.n	8004878 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800481a:	4b34      	ldr	r3, [pc, #208]	@ (80048ec <xTaskResumeAll+0x120>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3318      	adds	r3, #24
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff f906 	bl	8003a38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3304      	adds	r3, #4
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff f901 	bl	8003a38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483a:	2201      	movs	r2, #1
 800483c:	409a      	lsls	r2, r3
 800483e:	4b2c      	ldr	r3, [pc, #176]	@ (80048f0 <xTaskResumeAll+0x124>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4313      	orrs	r3, r2
 8004844:	4a2a      	ldr	r2, [pc, #168]	@ (80048f0 <xTaskResumeAll+0x124>)
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4a27      	ldr	r2, [pc, #156]	@ (80048f4 <xTaskResumeAll+0x128>)
 8004856:	441a      	add	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3304      	adds	r3, #4
 800485c:	4619      	mov	r1, r3
 800485e:	4610      	mov	r0, r2
 8004860:	f7ff f88f 	bl	8003982 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004868:	4b23      	ldr	r3, [pc, #140]	@ (80048f8 <xTaskResumeAll+0x12c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486e:	429a      	cmp	r2, r3
 8004870:	d302      	bcc.n	8004878 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004872:	4b22      	ldr	r3, [pc, #136]	@ (80048fc <xTaskResumeAll+0x130>)
 8004874:	2201      	movs	r2, #1
 8004876:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004878:	4b1c      	ldr	r3, [pc, #112]	@ (80048ec <xTaskResumeAll+0x120>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1cc      	bne.n	800481a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004886:	f000 fb1f 	bl	8004ec8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800488a:	4b1d      	ldr	r3, [pc, #116]	@ (8004900 <xTaskResumeAll+0x134>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d010      	beq.n	80048b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004896:	f000 f837 	bl	8004908 <xTaskIncrementTick>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80048a0:	4b16      	ldr	r3, [pc, #88]	@ (80048fc <xTaskResumeAll+0x130>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f1      	bne.n	8004896 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80048b2:	4b13      	ldr	r3, [pc, #76]	@ (8004900 <xTaskResumeAll+0x134>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048b8:	4b10      	ldr	r3, [pc, #64]	@ (80048fc <xTaskResumeAll+0x130>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d009      	beq.n	80048d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048c0:	2301      	movs	r3, #1
 80048c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004904 <xTaskResumeAll+0x138>)
 80048c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048d4:	f000 fd4a 	bl	800536c <vPortExitCritical>

	return xAlreadyYielded;
 80048d8:	68bb      	ldr	r3, [r7, #8]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	200004a4 	.word	0x200004a4
 80048e8:	2000047c 	.word	0x2000047c
 80048ec:	2000043c 	.word	0x2000043c
 80048f0:	20000484 	.word	0x20000484
 80048f4:	20000380 	.word	0x20000380
 80048f8:	2000037c 	.word	0x2000037c
 80048fc:	20000490 	.word	0x20000490
 8004900:	2000048c 	.word	0x2000048c
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004912:	4b51      	ldr	r3, [pc, #324]	@ (8004a58 <xTaskIncrementTick+0x150>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f040 808e 	bne.w	8004a38 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800491c:	4b4f      	ldr	r3, [pc, #316]	@ (8004a5c <xTaskIncrementTick+0x154>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3301      	adds	r3, #1
 8004922:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004924:	4a4d      	ldr	r2, [pc, #308]	@ (8004a5c <xTaskIncrementTick+0x154>)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d121      	bne.n	8004974 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004930:	4b4b      	ldr	r3, [pc, #300]	@ (8004a60 <xTaskIncrementTick+0x158>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00b      	beq.n	8004952 <xTaskIncrementTick+0x4a>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	603b      	str	r3, [r7, #0]
}
 800494c:	bf00      	nop
 800494e:	bf00      	nop
 8004950:	e7fd      	b.n	800494e <xTaskIncrementTick+0x46>
 8004952:	4b43      	ldr	r3, [pc, #268]	@ (8004a60 <xTaskIncrementTick+0x158>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	4b42      	ldr	r3, [pc, #264]	@ (8004a64 <xTaskIncrementTick+0x15c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a40      	ldr	r2, [pc, #256]	@ (8004a60 <xTaskIncrementTick+0x158>)
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	4a40      	ldr	r2, [pc, #256]	@ (8004a64 <xTaskIncrementTick+0x15c>)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	4b40      	ldr	r3, [pc, #256]	@ (8004a68 <xTaskIncrementTick+0x160>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3301      	adds	r3, #1
 800496c:	4a3e      	ldr	r2, [pc, #248]	@ (8004a68 <xTaskIncrementTick+0x160>)
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	f000 faaa 	bl	8004ec8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004974:	4b3d      	ldr	r3, [pc, #244]	@ (8004a6c <xTaskIncrementTick+0x164>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	d34d      	bcc.n	8004a1a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800497e:	4b38      	ldr	r3, [pc, #224]	@ (8004a60 <xTaskIncrementTick+0x158>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <xTaskIncrementTick+0x84>
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <xTaskIncrementTick+0x86>
 800498c:	2300      	movs	r3, #0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d004      	beq.n	800499c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004992:	4b36      	ldr	r3, [pc, #216]	@ (8004a6c <xTaskIncrementTick+0x164>)
 8004994:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004998:	601a      	str	r2, [r3, #0]
					break;
 800499a:	e03e      	b.n	8004a1a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800499c:	4b30      	ldr	r3, [pc, #192]	@ (8004a60 <xTaskIncrementTick+0x158>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d203      	bcs.n	80049bc <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049b4:	4a2d      	ldr	r2, [pc, #180]	@ (8004a6c <xTaskIncrementTick+0x164>)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6013      	str	r3, [r2, #0]
						break;
 80049ba:	e02e      	b.n	8004a1a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	3304      	adds	r3, #4
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff f839 	bl	8003a38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d004      	beq.n	80049d8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	3318      	adds	r3, #24
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff f830 	bl	8003a38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049dc:	2201      	movs	r2, #1
 80049de:	409a      	lsls	r2, r3
 80049e0:	4b23      	ldr	r3, [pc, #140]	@ (8004a70 <xTaskIncrementTick+0x168>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	4a22      	ldr	r2, [pc, #136]	@ (8004a70 <xTaskIncrementTick+0x168>)
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a74 <xTaskIncrementTick+0x16c>)
 80049f8:	441a      	add	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	3304      	adds	r3, #4
 80049fe:	4619      	mov	r1, r3
 8004a00:	4610      	mov	r0, r2
 8004a02:	f7fe ffbe 	bl	8003982 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004a78 <xTaskIncrementTick+0x170>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d3b4      	bcc.n	800497e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004a14:	2301      	movs	r3, #1
 8004a16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a18:	e7b1      	b.n	800497e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a1a:	4b17      	ldr	r3, [pc, #92]	@ (8004a78 <xTaskIncrementTick+0x170>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a20:	4914      	ldr	r1, [pc, #80]	@ (8004a74 <xTaskIncrementTick+0x16c>)
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d907      	bls.n	8004a42 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004a32:	2301      	movs	r3, #1
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	e004      	b.n	8004a42 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a38:	4b10      	ldr	r3, [pc, #64]	@ (8004a7c <xTaskIncrementTick+0x174>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8004a7c <xTaskIncrementTick+0x174>)
 8004a40:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a42:	4b0f      	ldr	r3, [pc, #60]	@ (8004a80 <xTaskIncrementTick+0x178>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a4e:	697b      	ldr	r3, [r7, #20]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	200004a4 	.word	0x200004a4
 8004a5c:	20000480 	.word	0x20000480
 8004a60:	20000434 	.word	0x20000434
 8004a64:	20000438 	.word	0x20000438
 8004a68:	20000494 	.word	0x20000494
 8004a6c:	2000049c 	.word	0x2000049c
 8004a70:	20000484 	.word	0x20000484
 8004a74:	20000380 	.word	0x20000380
 8004a78:	2000037c 	.word	0x2000037c
 8004a7c:	2000048c 	.word	0x2000048c
 8004a80:	20000490 	.word	0x20000490

08004a84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a8a:	4b27      	ldr	r3, [pc, #156]	@ (8004b28 <vTaskSwitchContext+0xa4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a92:	4b26      	ldr	r3, [pc, #152]	@ (8004b2c <vTaskSwitchContext+0xa8>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a98:	e040      	b.n	8004b1c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004a9a:	4b24      	ldr	r3, [pc, #144]	@ (8004b2c <vTaskSwitchContext+0xa8>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004aa0:	4b23      	ldr	r3, [pc, #140]	@ (8004b30 <vTaskSwitchContext+0xac>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	fab3 f383 	clz	r3, r3
 8004aac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004aae:	7afb      	ldrb	r3, [r7, #11]
 8004ab0:	f1c3 031f 	rsb	r3, r3, #31
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	491f      	ldr	r1, [pc, #124]	@ (8004b34 <vTaskSwitchContext+0xb0>)
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4613      	mov	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10b      	bne.n	8004ae2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	607b      	str	r3, [r7, #4]
}
 8004adc:	bf00      	nop
 8004ade:	bf00      	nop
 8004ae0:	e7fd      	b.n	8004ade <vTaskSwitchContext+0x5a>
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4a11      	ldr	r2, [pc, #68]	@ (8004b34 <vTaskSwitchContext+0xb0>)
 8004aee:	4413      	add	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	605a      	str	r2, [r3, #4]
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	3308      	adds	r3, #8
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d104      	bne.n	8004b12 <vTaskSwitchContext+0x8e>
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	605a      	str	r2, [r3, #4]
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	4a07      	ldr	r2, [pc, #28]	@ (8004b38 <vTaskSwitchContext+0xb4>)
 8004b1a:	6013      	str	r3, [r2, #0]
}
 8004b1c:	bf00      	nop
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bc80      	pop	{r7}
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	200004a4 	.word	0x200004a4
 8004b2c:	20000490 	.word	0x20000490
 8004b30:	20000484 	.word	0x20000484
 8004b34:	20000380 	.word	0x20000380
 8004b38:	2000037c 	.word	0x2000037c

08004b3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10b      	bne.n	8004b64 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	60fb      	str	r3, [r7, #12]
}
 8004b5e:	bf00      	nop
 8004b60:	bf00      	nop
 8004b62:	e7fd      	b.n	8004b60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b64:	4b07      	ldr	r3, [pc, #28]	@ (8004b84 <vTaskPlaceOnEventList+0x48>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3318      	adds	r3, #24
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7fe ff2b 	bl	80039c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b72:	2101      	movs	r1, #1
 8004b74:	6838      	ldr	r0, [r7, #0]
 8004b76:	f000 fa71 	bl	800505c <prvAddCurrentTaskToDelayedList>
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	2000037c 	.word	0x2000037c

08004b88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10b      	bne.n	8004bb6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	60fb      	str	r3, [r7, #12]
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	e7fd      	b.n	8004bb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	3318      	adds	r3, #24
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe ff3c 	bl	8003a38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c38 <xTaskRemoveFromEventList+0xb0>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d11c      	bne.n	8004c02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fe ff33 	bl	8003a38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	409a      	lsls	r2, r3
 8004bda:	4b18      	ldr	r3, [pc, #96]	@ (8004c3c <xTaskRemoveFromEventList+0xb4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	4a16      	ldr	r2, [pc, #88]	@ (8004c3c <xTaskRemoveFromEventList+0xb4>)
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4a13      	ldr	r2, [pc, #76]	@ (8004c40 <xTaskRemoveFromEventList+0xb8>)
 8004bf2:	441a      	add	r2, r3
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	f7fe fec1 	bl	8003982 <vListInsertEnd>
 8004c00:	e005      	b.n	8004c0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	3318      	adds	r3, #24
 8004c06:	4619      	mov	r1, r3
 8004c08:	480e      	ldr	r0, [pc, #56]	@ (8004c44 <xTaskRemoveFromEventList+0xbc>)
 8004c0a:	f7fe feba 	bl	8003982 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c12:	4b0d      	ldr	r3, [pc, #52]	@ (8004c48 <xTaskRemoveFromEventList+0xc0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d905      	bls.n	8004c28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c20:	4b0a      	ldr	r3, [pc, #40]	@ (8004c4c <xTaskRemoveFromEventList+0xc4>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	e001      	b.n	8004c2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004c2c:	697b      	ldr	r3, [r7, #20]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	200004a4 	.word	0x200004a4
 8004c3c:	20000484 	.word	0x20000484
 8004c40:	20000380 	.word	0x20000380
 8004c44:	2000043c 	.word	0x2000043c
 8004c48:	2000037c 	.word	0x2000037c
 8004c4c:	20000490 	.word	0x20000490

08004c50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c58:	4b06      	ldr	r3, [pc, #24]	@ (8004c74 <vTaskInternalSetTimeOutState+0x24>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c60:	4b05      	ldr	r3, [pc, #20]	@ (8004c78 <vTaskInternalSetTimeOutState+0x28>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	605a      	str	r2, [r3, #4]
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20000494 	.word	0x20000494
 8004c78:	20000480 	.word	0x20000480

08004c7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10b      	bne.n	8004ca4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	613b      	str	r3, [r7, #16]
}
 8004c9e:	bf00      	nop
 8004ca0:	bf00      	nop
 8004ca2:	e7fd      	b.n	8004ca0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10b      	bne.n	8004cc2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	60fb      	str	r3, [r7, #12]
}
 8004cbc:	bf00      	nop
 8004cbe:	bf00      	nop
 8004cc0:	e7fd      	b.n	8004cbe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004cc2:	f000 fb23 	bl	800530c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8004d3c <xTaskCheckForTimeOut+0xc0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cde:	d102      	bne.n	8004ce6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	e023      	b.n	8004d2e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4b15      	ldr	r3, [pc, #84]	@ (8004d40 <xTaskCheckForTimeOut+0xc4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d007      	beq.n	8004d02 <xTaskCheckForTimeOut+0x86>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d302      	bcc.n	8004d02 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	e015      	b.n	8004d2e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d20b      	bcs.n	8004d24 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	1ad2      	subs	r2, r2, r3
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff ff99 	bl	8004c50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	e004      	b.n	8004d2e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d2e:	f000 fb1d 	bl	800536c <vPortExitCritical>

	return xReturn;
 8004d32:	69fb      	ldr	r3, [r7, #28]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3720      	adds	r7, #32
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20000480 	.word	0x20000480
 8004d40:	20000494 	.word	0x20000494

08004d44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d48:	4b03      	ldr	r3, [pc, #12]	@ (8004d58 <vTaskMissedYield+0x14>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
}
 8004d4e:	bf00      	nop
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bc80      	pop	{r7}
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000490 	.word	0x20000490

08004d5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d64:	f000 f852 	bl	8004e0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d68:	4b06      	ldr	r3, [pc, #24]	@ (8004d84 <prvIdleTask+0x28>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d9f9      	bls.n	8004d64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d70:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <prvIdleTask+0x2c>)
 8004d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d80:	e7f0      	b.n	8004d64 <prvIdleTask+0x8>
 8004d82:	bf00      	nop
 8004d84:	20000380 	.word	0x20000380
 8004d88:	e000ed04 	.word	0xe000ed04

08004d8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d92:	2300      	movs	r3, #0
 8004d94:	607b      	str	r3, [r7, #4]
 8004d96:	e00c      	b.n	8004db2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4a12      	ldr	r2, [pc, #72]	@ (8004dec <prvInitialiseTaskLists+0x60>)
 8004da4:	4413      	add	r3, r2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe fdc0 	bl	800392c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3301      	adds	r3, #1
 8004db0:	607b      	str	r3, [r7, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b06      	cmp	r3, #6
 8004db6:	d9ef      	bls.n	8004d98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004db8:	480d      	ldr	r0, [pc, #52]	@ (8004df0 <prvInitialiseTaskLists+0x64>)
 8004dba:	f7fe fdb7 	bl	800392c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dbe:	480d      	ldr	r0, [pc, #52]	@ (8004df4 <prvInitialiseTaskLists+0x68>)
 8004dc0:	f7fe fdb4 	bl	800392c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004dc4:	480c      	ldr	r0, [pc, #48]	@ (8004df8 <prvInitialiseTaskLists+0x6c>)
 8004dc6:	f7fe fdb1 	bl	800392c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004dca:	480c      	ldr	r0, [pc, #48]	@ (8004dfc <prvInitialiseTaskLists+0x70>)
 8004dcc:	f7fe fdae 	bl	800392c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004dd0:	480b      	ldr	r0, [pc, #44]	@ (8004e00 <prvInitialiseTaskLists+0x74>)
 8004dd2:	f7fe fdab 	bl	800392c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e04 <prvInitialiseTaskLists+0x78>)
 8004dd8:	4a05      	ldr	r2, [pc, #20]	@ (8004df0 <prvInitialiseTaskLists+0x64>)
 8004dda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8004e08 <prvInitialiseTaskLists+0x7c>)
 8004dde:	4a05      	ldr	r2, [pc, #20]	@ (8004df4 <prvInitialiseTaskLists+0x68>)
 8004de0:	601a      	str	r2, [r3, #0]
}
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000380 	.word	0x20000380
 8004df0:	2000040c 	.word	0x2000040c
 8004df4:	20000420 	.word	0x20000420
 8004df8:	2000043c 	.word	0x2000043c
 8004dfc:	20000450 	.word	0x20000450
 8004e00:	20000468 	.word	0x20000468
 8004e04:	20000434 	.word	0x20000434
 8004e08:	20000438 	.word	0x20000438

08004e0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e12:	e019      	b.n	8004e48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e14:	f000 fa7a 	bl	800530c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004e18:	4b10      	ldr	r3, [pc, #64]	@ (8004e5c <prvCheckTasksWaitingTermination+0x50>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3304      	adds	r3, #4
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fe fe07 	bl	8003a38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e60 <prvCheckTasksWaitingTermination+0x54>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	4a0b      	ldr	r2, [pc, #44]	@ (8004e60 <prvCheckTasksWaitingTermination+0x54>)
 8004e32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e34:	4b0b      	ldr	r3, [pc, #44]	@ (8004e64 <prvCheckTasksWaitingTermination+0x58>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e64 <prvCheckTasksWaitingTermination+0x58>)
 8004e3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e3e:	f000 fa95 	bl	800536c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f810 	bl	8004e68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e48:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <prvCheckTasksWaitingTermination+0x58>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e1      	bne.n	8004e14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e50:	bf00      	nop
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000450 	.word	0x20000450
 8004e60:	2000047c 	.word	0x2000047c
 8004e64:	20000464 	.word	0x20000464

08004e68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d108      	bne.n	8004e8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fc0e 	bl	80056a0 <vPortFree>
				vPortFree( pxTCB );
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fc0b 	bl	80056a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e8a:	e019      	b.n	8004ec0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d103      	bne.n	8004e9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fc02 	bl	80056a0 <vPortFree>
	}
 8004e9c:	e010      	b.n	8004ec0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d00b      	beq.n	8004ec0 <prvDeleteTCB+0x58>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	60fb      	str	r3, [r7, #12]
}
 8004eba:	bf00      	nop
 8004ebc:	bf00      	nop
 8004ebe:	e7fd      	b.n	8004ebc <prvDeleteTCB+0x54>
	}
 8004ec0:	bf00      	nop
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ece:	4b0e      	ldr	r3, [pc, #56]	@ (8004f08 <prvResetNextTaskUnblockTime+0x40>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <prvResetNextTaskUnblockTime+0x14>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <prvResetNextTaskUnblockTime+0x16>
 8004edc:	2300      	movs	r3, #0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d004      	beq.n	8004eec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8004f0c <prvResetNextTaskUnblockTime+0x44>)
 8004ee4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ee8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004eea:	e008      	b.n	8004efe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004eec:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <prvResetNextTaskUnblockTime+0x40>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4a04      	ldr	r2, [pc, #16]	@ (8004f0c <prvResetNextTaskUnblockTime+0x44>)
 8004efc:	6013      	str	r3, [r2, #0]
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr
 8004f08:	20000434 	.word	0x20000434
 8004f0c:	2000049c 	.word	0x2000049c

08004f10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f16:	4b0b      	ldr	r3, [pc, #44]	@ (8004f44 <xTaskGetSchedulerState+0x34>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d102      	bne.n	8004f24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	607b      	str	r3, [r7, #4]
 8004f22:	e008      	b.n	8004f36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f24:	4b08      	ldr	r3, [pc, #32]	@ (8004f48 <xTaskGetSchedulerState+0x38>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	607b      	str	r3, [r7, #4]
 8004f30:	e001      	b.n	8004f36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f32:	2300      	movs	r3, #0
 8004f34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f36:	687b      	ldr	r3, [r7, #4]
	}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	20000488 	.word	0x20000488
 8004f48:	200004a4 	.word	0x200004a4

08004f4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d070      	beq.n	8005044 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f62:	4b3b      	ldr	r3, [pc, #236]	@ (8005050 <xTaskPriorityDisinherit+0x104>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d00b      	beq.n	8004f84 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	60fb      	str	r3, [r7, #12]
}
 8004f7e:	bf00      	nop
 8004f80:	bf00      	nop
 8004f82:	e7fd      	b.n	8004f80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10b      	bne.n	8004fa4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	60bb      	str	r3, [r7, #8]
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	e7fd      	b.n	8004fa0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa8:	1e5a      	subs	r2, r3, #1
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d044      	beq.n	8005044 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d140      	bne.n	8005044 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fe fd36 	bl	8003a38 <uxListRemove>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d115      	bne.n	8004ffe <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd6:	491f      	ldr	r1, [pc, #124]	@ (8005054 <xTaskPriorityDisinherit+0x108>)
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <xTaskPriorityDisinherit+0xb2>
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fec:	2201      	movs	r2, #1
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43da      	mvns	r2, r3
 8004ff4:	4b18      	ldr	r3, [pc, #96]	@ (8005058 <xTaskPriorityDisinherit+0x10c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	4a17      	ldr	r2, [pc, #92]	@ (8005058 <xTaskPriorityDisinherit+0x10c>)
 8004ffc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500a:	f1c3 0207 	rsb	r2, r3, #7
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005016:	2201      	movs	r2, #1
 8005018:	409a      	lsls	r2, r3
 800501a:	4b0f      	ldr	r3, [pc, #60]	@ (8005058 <xTaskPriorityDisinherit+0x10c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4313      	orrs	r3, r2
 8005020:	4a0d      	ldr	r2, [pc, #52]	@ (8005058 <xTaskPriorityDisinherit+0x10c>)
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4a08      	ldr	r2, [pc, #32]	@ (8005054 <xTaskPriorityDisinherit+0x108>)
 8005032:	441a      	add	r2, r3
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	3304      	adds	r3, #4
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f7fe fca1 	bl	8003982 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005040:	2301      	movs	r3, #1
 8005042:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005044:	697b      	ldr	r3, [r7, #20]
	}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	2000037c 	.word	0x2000037c
 8005054:	20000380 	.word	0x20000380
 8005058:	20000484 	.word	0x20000484

0800505c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005066:	4b29      	ldr	r3, [pc, #164]	@ (800510c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800506c:	4b28      	ldr	r3, [pc, #160]	@ (8005110 <prvAddCurrentTaskToDelayedList+0xb4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3304      	adds	r3, #4
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe fce0 	bl	8003a38 <uxListRemove>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10b      	bne.n	8005096 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800507e:	4b24      	ldr	r3, [pc, #144]	@ (8005110 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	2201      	movs	r2, #1
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43da      	mvns	r2, r3
 800508c:	4b21      	ldr	r3, [pc, #132]	@ (8005114 <prvAddCurrentTaskToDelayedList+0xb8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4013      	ands	r3, r2
 8005092:	4a20      	ldr	r2, [pc, #128]	@ (8005114 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005094:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800509c:	d10a      	bne.n	80050b4 <prvAddCurrentTaskToDelayedList+0x58>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005110 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3304      	adds	r3, #4
 80050aa:	4619      	mov	r1, r3
 80050ac:	481a      	ldr	r0, [pc, #104]	@ (8005118 <prvAddCurrentTaskToDelayedList+0xbc>)
 80050ae:	f7fe fc68 	bl	8003982 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050b2:	e026      	b.n	8005102 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4413      	add	r3, r2
 80050ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050bc:	4b14      	ldr	r3, [pc, #80]	@ (8005110 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d209      	bcs.n	80050e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050cc:	4b13      	ldr	r3, [pc, #76]	@ (800511c <prvAddCurrentTaskToDelayedList+0xc0>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005110 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3304      	adds	r3, #4
 80050d6:	4619      	mov	r1, r3
 80050d8:	4610      	mov	r0, r2
 80050da:	f7fe fc75 	bl	80039c8 <vListInsert>
}
 80050de:	e010      	b.n	8005102 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005120 <prvAddCurrentTaskToDelayedList+0xc4>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005110 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3304      	adds	r3, #4
 80050ea:	4619      	mov	r1, r3
 80050ec:	4610      	mov	r0, r2
 80050ee:	f7fe fc6b 	bl	80039c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005124 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d202      	bcs.n	8005102 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80050fc:	4a09      	ldr	r2, [pc, #36]	@ (8005124 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	6013      	str	r3, [r2, #0]
}
 8005102:	bf00      	nop
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	20000480 	.word	0x20000480
 8005110:	2000037c 	.word	0x2000037c
 8005114:	20000484 	.word	0x20000484
 8005118:	20000468 	.word	0x20000468
 800511c:	20000438 	.word	0x20000438
 8005120:	20000434 	.word	0x20000434
 8005124:	2000049c 	.word	0x2000049c

08005128 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3b04      	subs	r3, #4
 8005138:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005140:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3b04      	subs	r3, #4
 8005146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f023 0201 	bic.w	r2, r3, #1
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3b04      	subs	r3, #4
 8005156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005158:	4a08      	ldr	r2, [pc, #32]	@ (800517c <pxPortInitialiseStack+0x54>)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3b14      	subs	r3, #20
 8005162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3b20      	subs	r3, #32
 800516e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005170:	68fb      	ldr	r3, [r7, #12]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr
 800517c:	08005181 	.word	0x08005181

08005180 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005186:	2300      	movs	r3, #0
 8005188:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800518a:	4b12      	ldr	r3, [pc, #72]	@ (80051d4 <prvTaskExitError+0x54>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005192:	d00b      	beq.n	80051ac <prvTaskExitError+0x2c>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	60fb      	str	r3, [r7, #12]
}
 80051a6:	bf00      	nop
 80051a8:	bf00      	nop
 80051aa:	e7fd      	b.n	80051a8 <prvTaskExitError+0x28>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	60bb      	str	r3, [r7, #8]
}
 80051be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051c0:	bf00      	nop
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0fc      	beq.n	80051c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051c8:	bf00      	nop
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr
 80051d4:	20000010 	.word	0x20000010
	...

080051e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051e0:	4b07      	ldr	r3, [pc, #28]	@ (8005200 <pxCurrentTCBConst2>)
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	6808      	ldr	r0, [r1, #0]
 80051e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051ea:	f380 8809 	msr	PSP, r0
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f04f 0000 	mov.w	r0, #0
 80051f6:	f380 8811 	msr	BASEPRI, r0
 80051fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80051fe:	4770      	bx	lr

08005200 <pxCurrentTCBConst2>:
 8005200:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop

08005208 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005208:	4806      	ldr	r0, [pc, #24]	@ (8005224 <prvPortStartFirstTask+0x1c>)
 800520a:	6800      	ldr	r0, [r0, #0]
 800520c:	6800      	ldr	r0, [r0, #0]
 800520e:	f380 8808 	msr	MSP, r0
 8005212:	b662      	cpsie	i
 8005214:	b661      	cpsie	f
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	df00      	svc	0
 8005220:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005222:	bf00      	nop
 8005224:	e000ed08 	.word	0xe000ed08

08005228 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800522e:	4b32      	ldr	r3, [pc, #200]	@ (80052f8 <xPortStartScheduler+0xd0>)
 8005230:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	22ff      	movs	r2, #255	@ 0xff
 800523e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	b2db      	uxtb	r3, r3
 800524c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005250:	b2da      	uxtb	r2, r3
 8005252:	4b2a      	ldr	r3, [pc, #168]	@ (80052fc <xPortStartScheduler+0xd4>)
 8005254:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005256:	4b2a      	ldr	r3, [pc, #168]	@ (8005300 <xPortStartScheduler+0xd8>)
 8005258:	2207      	movs	r2, #7
 800525a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800525c:	e009      	b.n	8005272 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800525e:	4b28      	ldr	r3, [pc, #160]	@ (8005300 <xPortStartScheduler+0xd8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3b01      	subs	r3, #1
 8005264:	4a26      	ldr	r2, [pc, #152]	@ (8005300 <xPortStartScheduler+0xd8>)
 8005266:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005268:	78fb      	ldrb	r3, [r7, #3]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	b2db      	uxtb	r3, r3
 8005270:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800527a:	2b80      	cmp	r3, #128	@ 0x80
 800527c:	d0ef      	beq.n	800525e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800527e:	4b20      	ldr	r3, [pc, #128]	@ (8005300 <xPortStartScheduler+0xd8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f1c3 0307 	rsb	r3, r3, #7
 8005286:	2b04      	cmp	r3, #4
 8005288:	d00b      	beq.n	80052a2 <xPortStartScheduler+0x7a>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	60bb      	str	r3, [r7, #8]
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	e7fd      	b.n	800529e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052a2:	4b17      	ldr	r3, [pc, #92]	@ (8005300 <xPortStartScheduler+0xd8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	4a15      	ldr	r2, [pc, #84]	@ (8005300 <xPortStartScheduler+0xd8>)
 80052aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052ac:	4b14      	ldr	r3, [pc, #80]	@ (8005300 <xPortStartScheduler+0xd8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052b4:	4a12      	ldr	r2, [pc, #72]	@ (8005300 <xPortStartScheduler+0xd8>)
 80052b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052c0:	4b10      	ldr	r3, [pc, #64]	@ (8005304 <xPortStartScheduler+0xdc>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a0f      	ldr	r2, [pc, #60]	@ (8005304 <xPortStartScheduler+0xdc>)
 80052c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005304 <xPortStartScheduler+0xdc>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005304 <xPortStartScheduler+0xdc>)
 80052d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80052d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052d8:	f000 f8b8 	bl	800544c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005308 <xPortStartScheduler+0xe0>)
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052e2:	f7ff ff91 	bl	8005208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80052e6:	f7ff fbcd 	bl	8004a84 <vTaskSwitchContext>
	prvTaskExitError();
 80052ea:	f7ff ff49 	bl	8005180 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	e000e400 	.word	0xe000e400
 80052fc:	200004a8 	.word	0x200004a8
 8005300:	200004ac 	.word	0x200004ac
 8005304:	e000ed20 	.word	0xe000ed20
 8005308:	20000010 	.word	0x20000010

0800530c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	607b      	str	r3, [r7, #4]
}
 8005324:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005326:	4b0f      	ldr	r3, [pc, #60]	@ (8005364 <vPortEnterCritical+0x58>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3301      	adds	r3, #1
 800532c:	4a0d      	ldr	r2, [pc, #52]	@ (8005364 <vPortEnterCritical+0x58>)
 800532e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005330:	4b0c      	ldr	r3, [pc, #48]	@ (8005364 <vPortEnterCritical+0x58>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d110      	bne.n	800535a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005338:	4b0b      	ldr	r3, [pc, #44]	@ (8005368 <vPortEnterCritical+0x5c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <vPortEnterCritical+0x4e>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	603b      	str	r3, [r7, #0]
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	e7fd      	b.n	8005356 <vPortEnterCritical+0x4a>
	}
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr
 8005364:	20000010 	.word	0x20000010
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005372:	4b12      	ldr	r3, [pc, #72]	@ (80053bc <vPortExitCritical+0x50>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10b      	bne.n	8005392 <vPortExitCritical+0x26>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	607b      	str	r3, [r7, #4]
}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	e7fd      	b.n	800538e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005392:	4b0a      	ldr	r3, [pc, #40]	@ (80053bc <vPortExitCritical+0x50>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3b01      	subs	r3, #1
 8005398:	4a08      	ldr	r2, [pc, #32]	@ (80053bc <vPortExitCritical+0x50>)
 800539a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800539c:	4b07      	ldr	r3, [pc, #28]	@ (80053bc <vPortExitCritical+0x50>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d105      	bne.n	80053b0 <vPortExitCritical+0x44>
 80053a4:	2300      	movs	r3, #0
 80053a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	f383 8811 	msr	BASEPRI, r3
}
 80053ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	20000010 	.word	0x20000010

080053c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053c0:	f3ef 8009 	mrs	r0, PSP
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005400 <pxCurrentTCBConst>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053d0:	6010      	str	r0, [r2, #0]
 80053d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80053d6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80053da:	f380 8811 	msr	BASEPRI, r0
 80053de:	f7ff fb51 	bl	8004a84 <vTaskSwitchContext>
 80053e2:	f04f 0000 	mov.w	r0, #0
 80053e6:	f380 8811 	msr	BASEPRI, r0
 80053ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80053ee:	6819      	ldr	r1, [r3, #0]
 80053f0:	6808      	ldr	r0, [r1, #0]
 80053f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053f6:	f380 8809 	msr	PSP, r0
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	4770      	bx	lr

08005400 <pxCurrentTCBConst>:
 8005400:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop

08005408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	607b      	str	r3, [r7, #4]
}
 8005420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005422:	f7ff fa71 	bl	8004908 <xTaskIncrementTick>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800542c:	4b06      	ldr	r3, [pc, #24]	@ (8005448 <SysTick_Handler+0x40>)
 800542e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	2300      	movs	r3, #0
 8005436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	f383 8811 	msr	BASEPRI, r3
}
 800543e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005440:	bf00      	nop
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	e000ed04 	.word	0xe000ed04

0800544c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005450:	4b0a      	ldr	r3, [pc, #40]	@ (800547c <vPortSetupTimerInterrupt+0x30>)
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005456:	4b0a      	ldr	r3, [pc, #40]	@ (8005480 <vPortSetupTimerInterrupt+0x34>)
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800545c:	4b09      	ldr	r3, [pc, #36]	@ (8005484 <vPortSetupTimerInterrupt+0x38>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a09      	ldr	r2, [pc, #36]	@ (8005488 <vPortSetupTimerInterrupt+0x3c>)
 8005462:	fba2 2303 	umull	r2, r3, r2, r3
 8005466:	099b      	lsrs	r3, r3, #6
 8005468:	4a08      	ldr	r2, [pc, #32]	@ (800548c <vPortSetupTimerInterrupt+0x40>)
 800546a:	3b01      	subs	r3, #1
 800546c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800546e:	4b03      	ldr	r3, [pc, #12]	@ (800547c <vPortSetupTimerInterrupt+0x30>)
 8005470:	2207      	movs	r2, #7
 8005472:	601a      	str	r2, [r3, #0]
}
 8005474:	bf00      	nop
 8005476:	46bd      	mov	sp, r7
 8005478:	bc80      	pop	{r7}
 800547a:	4770      	bx	lr
 800547c:	e000e010 	.word	0xe000e010
 8005480:	e000e018 	.word	0xe000e018
 8005484:	20000004 	.word	0x20000004
 8005488:	10624dd3 	.word	0x10624dd3
 800548c:	e000e014 	.word	0xe000e014

08005490 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005496:	f3ef 8305 	mrs	r3, IPSR
 800549a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b0f      	cmp	r3, #15
 80054a0:	d915      	bls.n	80054ce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054a2:	4a17      	ldr	r2, [pc, #92]	@ (8005500 <vPortValidateInterruptPriority+0x70>)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054ac:	4b15      	ldr	r3, [pc, #84]	@ (8005504 <vPortValidateInterruptPriority+0x74>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	7afa      	ldrb	r2, [r7, #11]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d20b      	bcs.n	80054ce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	607b      	str	r3, [r7, #4]
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	e7fd      	b.n	80054ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005508 <vPortValidateInterruptPriority+0x78>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80054d6:	4b0d      	ldr	r3, [pc, #52]	@ (800550c <vPortValidateInterruptPriority+0x7c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d90b      	bls.n	80054f6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	603b      	str	r3, [r7, #0]
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	e7fd      	b.n	80054f2 <vPortValidateInterruptPriority+0x62>
	}
 80054f6:	bf00      	nop
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr
 8005500:	e000e3f0 	.word	0xe000e3f0
 8005504:	200004a8 	.word	0x200004a8
 8005508:	e000ed0c 	.word	0xe000ed0c
 800550c:	200004ac 	.word	0x200004ac

08005510 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	@ 0x28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005518:	2300      	movs	r3, #0
 800551a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800551c:	f7ff f948 	bl	80047b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005520:	4b5a      	ldr	r3, [pc, #360]	@ (800568c <pvPortMalloc+0x17c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005528:	f000 f916 	bl	8005758 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800552c:	4b58      	ldr	r3, [pc, #352]	@ (8005690 <pvPortMalloc+0x180>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	f040 8090 	bne.w	800565a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01e      	beq.n	800557e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005540:	2208      	movs	r2, #8
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4413      	add	r3, r2
 8005546:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	2b00      	cmp	r3, #0
 8005550:	d015      	beq.n	800557e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f023 0307 	bic.w	r3, r3, #7
 8005558:	3308      	adds	r3, #8
 800555a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00b      	beq.n	800557e <pvPortMalloc+0x6e>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	617b      	str	r3, [r7, #20]
}
 8005578:	bf00      	nop
 800557a:	bf00      	nop
 800557c:	e7fd      	b.n	800557a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d06a      	beq.n	800565a <pvPortMalloc+0x14a>
 8005584:	4b43      	ldr	r3, [pc, #268]	@ (8005694 <pvPortMalloc+0x184>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	429a      	cmp	r2, r3
 800558c:	d865      	bhi.n	800565a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800558e:	4b42      	ldr	r3, [pc, #264]	@ (8005698 <pvPortMalloc+0x188>)
 8005590:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005592:	4b41      	ldr	r3, [pc, #260]	@ (8005698 <pvPortMalloc+0x188>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005598:	e004      	b.n	80055a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d903      	bls.n	80055b6 <pvPortMalloc+0xa6>
 80055ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f1      	bne.n	800559a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055b6:	4b35      	ldr	r3, [pc, #212]	@ (800568c <pvPortMalloc+0x17c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055bc:	429a      	cmp	r2, r3
 80055be:	d04c      	beq.n	800565a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2208      	movs	r2, #8
 80055c6:	4413      	add	r3, r2
 80055c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	1ad2      	subs	r2, r2, r3
 80055da:	2308      	movs	r3, #8
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	429a      	cmp	r2, r3
 80055e0:	d920      	bls.n	8005624 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4413      	add	r3, r2
 80055e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00b      	beq.n	800560c <pvPortMalloc+0xfc>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	613b      	str	r3, [r7, #16]
}
 8005606:	bf00      	nop
 8005608:	bf00      	nop
 800560a:	e7fd      	b.n	8005608 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800560c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	1ad2      	subs	r2, r2, r3
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800561e:	69b8      	ldr	r0, [r7, #24]
 8005620:	f000 f8fc 	bl	800581c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005624:	4b1b      	ldr	r3, [pc, #108]	@ (8005694 <pvPortMalloc+0x184>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	4a19      	ldr	r2, [pc, #100]	@ (8005694 <pvPortMalloc+0x184>)
 8005630:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005632:	4b18      	ldr	r3, [pc, #96]	@ (8005694 <pvPortMalloc+0x184>)
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	4b19      	ldr	r3, [pc, #100]	@ (800569c <pvPortMalloc+0x18c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d203      	bcs.n	8005646 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800563e:	4b15      	ldr	r3, [pc, #84]	@ (8005694 <pvPortMalloc+0x184>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a16      	ldr	r2, [pc, #88]	@ (800569c <pvPortMalloc+0x18c>)
 8005644:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	4b11      	ldr	r3, [pc, #68]	@ (8005690 <pvPortMalloc+0x180>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	431a      	orrs	r2, r3
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800565a:	f7ff f8b7 	bl	80047cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00b      	beq.n	8005680 <pvPortMalloc+0x170>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	60fb      	str	r3, [r7, #12]
}
 800567a:	bf00      	nop
 800567c:	bf00      	nop
 800567e:	e7fd      	b.n	800567c <pvPortMalloc+0x16c>
	return pvReturn;
 8005680:	69fb      	ldr	r3, [r7, #28]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3728      	adds	r7, #40	@ 0x28
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	200010b8 	.word	0x200010b8
 8005690:	200010c4 	.word	0x200010c4
 8005694:	200010bc 	.word	0x200010bc
 8005698:	200010b0 	.word	0x200010b0
 800569c:	200010c0 	.word	0x200010c0

080056a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d04a      	beq.n	8005748 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056b2:	2308      	movs	r3, #8
 80056b4:	425b      	negs	r3, r3
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4413      	add	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	4b22      	ldr	r3, [pc, #136]	@ (8005750 <vPortFree+0xb0>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4013      	ands	r3, r2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10b      	bne.n	80056e6 <vPortFree+0x46>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	60fb      	str	r3, [r7, #12]
}
 80056e0:	bf00      	nop
 80056e2:	bf00      	nop
 80056e4:	e7fd      	b.n	80056e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <vPortFree+0x66>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	60bb      	str	r3, [r7, #8]
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	e7fd      	b.n	8005702 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	4b11      	ldr	r3, [pc, #68]	@ (8005750 <vPortFree+0xb0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4013      	ands	r3, r2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d019      	beq.n	8005748 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d115      	bne.n	8005748 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	4b0b      	ldr	r3, [pc, #44]	@ (8005750 <vPortFree+0xb0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	43db      	mvns	r3, r3
 8005726:	401a      	ands	r2, r3
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800572c:	f7ff f840 	bl	80047b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	4b07      	ldr	r3, [pc, #28]	@ (8005754 <vPortFree+0xb4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4413      	add	r3, r2
 800573a:	4a06      	ldr	r2, [pc, #24]	@ (8005754 <vPortFree+0xb4>)
 800573c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800573e:	6938      	ldr	r0, [r7, #16]
 8005740:	f000 f86c 	bl	800581c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005744:	f7ff f842 	bl	80047cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005748:	bf00      	nop
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	200010c4 	.word	0x200010c4
 8005754:	200010bc 	.word	0x200010bc

08005758 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800575e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005762:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005764:	4b27      	ldr	r3, [pc, #156]	@ (8005804 <prvHeapInit+0xac>)
 8005766:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00c      	beq.n	800578c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3307      	adds	r3, #7
 8005776:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0307 	bic.w	r3, r3, #7
 800577e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	4a1f      	ldr	r2, [pc, #124]	@ (8005804 <prvHeapInit+0xac>)
 8005788:	4413      	add	r3, r2
 800578a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005790:	4a1d      	ldr	r2, [pc, #116]	@ (8005808 <prvHeapInit+0xb0>)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005796:	4b1c      	ldr	r3, [pc, #112]	@ (8005808 <prvHeapInit+0xb0>)
 8005798:	2200      	movs	r2, #0
 800579a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	4413      	add	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057a4:	2208      	movs	r2, #8
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	1a9b      	subs	r3, r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0307 	bic.w	r3, r3, #7
 80057b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4a15      	ldr	r2, [pc, #84]	@ (800580c <prvHeapInit+0xb4>)
 80057b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057ba:	4b14      	ldr	r3, [pc, #80]	@ (800580c <prvHeapInit+0xb4>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2200      	movs	r2, #0
 80057c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057c2:	4b12      	ldr	r3, [pc, #72]	@ (800580c <prvHeapInit+0xb4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	1ad2      	subs	r2, r2, r3
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057d8:	4b0c      	ldr	r3, [pc, #48]	@ (800580c <prvHeapInit+0xb4>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005810 <prvHeapInit+0xb8>)
 80057e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	4a09      	ldr	r2, [pc, #36]	@ (8005814 <prvHeapInit+0xbc>)
 80057ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057f0:	4b09      	ldr	r3, [pc, #36]	@ (8005818 <prvHeapInit+0xc0>)
 80057f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80057f6:	601a      	str	r2, [r3, #0]
}
 80057f8:	bf00      	nop
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc80      	pop	{r7}
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	200004b0 	.word	0x200004b0
 8005808:	200010b0 	.word	0x200010b0
 800580c:	200010b8 	.word	0x200010b8
 8005810:	200010c0 	.word	0x200010c0
 8005814:	200010bc 	.word	0x200010bc
 8005818:	200010c4 	.word	0x200010c4

0800581c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005824:	4b27      	ldr	r3, [pc, #156]	@ (80058c4 <prvInsertBlockIntoFreeList+0xa8>)
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	e002      	b.n	8005830 <prvInsertBlockIntoFreeList+0x14>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	429a      	cmp	r2, r3
 8005838:	d8f7      	bhi.n	800582a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	4413      	add	r3, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	429a      	cmp	r2, r3
 800584a:	d108      	bne.n	800585e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	441a      	add	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	441a      	add	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d118      	bne.n	80058a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4b14      	ldr	r3, [pc, #80]	@ (80058c8 <prvInsertBlockIntoFreeList+0xac>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d00d      	beq.n	800589a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	441a      	add	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	e008      	b.n	80058ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800589a:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <prvInsertBlockIntoFreeList+0xac>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	e003      	b.n	80058ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d002      	beq.n	80058ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058ba:	bf00      	nop
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	bc80      	pop	{r7}
 80058c2:	4770      	bx	lr
 80058c4:	200010b0 	.word	0x200010b0
 80058c8:	200010b8 	.word	0x200010b8

080058cc <memset>:
 80058cc:	4603      	mov	r3, r0
 80058ce:	4402      	add	r2, r0
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d100      	bne.n	80058d6 <memset+0xa>
 80058d4:	4770      	bx	lr
 80058d6:	f803 1b01 	strb.w	r1, [r3], #1
 80058da:	e7f9      	b.n	80058d0 <memset+0x4>

080058dc <__libc_init_array>:
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	2600      	movs	r6, #0
 80058e0:	4d0c      	ldr	r5, [pc, #48]	@ (8005914 <__libc_init_array+0x38>)
 80058e2:	4c0d      	ldr	r4, [pc, #52]	@ (8005918 <__libc_init_array+0x3c>)
 80058e4:	1b64      	subs	r4, r4, r5
 80058e6:	10a4      	asrs	r4, r4, #2
 80058e8:	42a6      	cmp	r6, r4
 80058ea:	d109      	bne.n	8005900 <__libc_init_array+0x24>
 80058ec:	f000 f828 	bl	8005940 <_init>
 80058f0:	2600      	movs	r6, #0
 80058f2:	4d0a      	ldr	r5, [pc, #40]	@ (800591c <__libc_init_array+0x40>)
 80058f4:	4c0a      	ldr	r4, [pc, #40]	@ (8005920 <__libc_init_array+0x44>)
 80058f6:	1b64      	subs	r4, r4, r5
 80058f8:	10a4      	asrs	r4, r4, #2
 80058fa:	42a6      	cmp	r6, r4
 80058fc:	d105      	bne.n	800590a <__libc_init_array+0x2e>
 80058fe:	bd70      	pop	{r4, r5, r6, pc}
 8005900:	f855 3b04 	ldr.w	r3, [r5], #4
 8005904:	4798      	blx	r3
 8005906:	3601      	adds	r6, #1
 8005908:	e7ee      	b.n	80058e8 <__libc_init_array+0xc>
 800590a:	f855 3b04 	ldr.w	r3, [r5], #4
 800590e:	4798      	blx	r3
 8005910:	3601      	adds	r6, #1
 8005912:	e7f2      	b.n	80058fa <__libc_init_array+0x1e>
 8005914:	08005998 	.word	0x08005998
 8005918:	08005998 	.word	0x08005998
 800591c:	08005998 	.word	0x08005998
 8005920:	0800599c 	.word	0x0800599c

08005924 <memcpy>:
 8005924:	440a      	add	r2, r1
 8005926:	4291      	cmp	r1, r2
 8005928:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800592c:	d100      	bne.n	8005930 <memcpy+0xc>
 800592e:	4770      	bx	lr
 8005930:	b510      	push	{r4, lr}
 8005932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005936:	4291      	cmp	r1, r2
 8005938:	f803 4f01 	strb.w	r4, [r3, #1]!
 800593c:	d1f9      	bne.n	8005932 <memcpy+0xe>
 800593e:	bd10      	pop	{r4, pc}

08005940 <_init>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	bf00      	nop
 8005944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005946:	bc08      	pop	{r3}
 8005948:	469e      	mov	lr, r3
 800594a:	4770      	bx	lr

0800594c <_fini>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	bf00      	nop
 8005950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005952:	bc08      	pop	{r3}
 8005954:	469e      	mov	lr, r3
 8005956:	4770      	bx	lr
