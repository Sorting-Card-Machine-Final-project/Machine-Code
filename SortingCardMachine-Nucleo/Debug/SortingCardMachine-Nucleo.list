
SortingCardMachine-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031ec  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003380  08003380  00004380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003398  08003398  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003398  08003398  00004398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033a0  080033a0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a0  080033a0  000043a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033a4  080033a4  000043a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080033a8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  080033b4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080033b4  00005128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcce  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001917  00000000  00000000  00010d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00012628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094d  00000000  00000000  000131f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e33  00000000  00000000  00013b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c951  00000000  00000000  00029978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ced5  00000000  00000000  000362c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c319e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003234  00000000  00000000  000c31e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000c6418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003368 	.word	0x08003368

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003368 	.word	0x08003368

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fdee 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f88e 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 fa12 	bl	80008f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f9e6 	bl	80008a4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80004d8:	f000 f8f4 	bl	80006c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004dc:	f000 f96a 	bl	80007b4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2120      	movs	r1, #32
 80004e4:	483b      	ldr	r0, [pc, #236]	@ (80005d4 <main+0x110>)
 80004e6:	f001 f8f7 	bl	80016d8 <HAL_GPIO_WritePin>
  //Two ways to change DutyCycle
  TIM3->CCR1 = 512; //1st way
 80004ea:	4b3b      	ldr	r3, [pc, #236]	@ (80005d8 <main+0x114>)
 80004ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004f0:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 256); //2nd way
 80004f2:	4b3a      	ldr	r3, [pc, #232]	@ (80005dc <main+0x118>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004fa:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004fc:	2100      	movs	r1, #0
 80004fe:	4838      	ldr	r0, [pc, #224]	@ (80005e0 <main+0x11c>)
 8000500:	f001 fe5e 	bl	80021c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000504:	2100      	movs	r1, #0
 8000506:	4835      	ldr	r0, [pc, #212]	@ (80005dc <main+0x118>)
 8000508:	f001 fe5a 	bl	80021c0 <HAL_TIM_PWM_Start>
  HAL_Delay(1000);
 800050c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000510:	f000 fe3c 	bl	800118c <HAL_Delay>
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000514:	2100      	movs	r1, #0
 8000516:	4832      	ldr	r0, [pc, #200]	@ (80005e0 <main+0x11c>)
 8000518:	f001 ff02 	bl	8002320 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800051c:	2100      	movs	r1, #0
 800051e:	482f      	ldr	r0, [pc, #188]	@ (80005dc <main+0x118>)
 8000520:	f001 fefe 	bl	8002320 <HAL_TIM_PWM_Stop>

  /*                             Section 2                                    */

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2120      	movs	r1, #32
 8000528:	482a      	ldr	r0, [pc, #168]	@ (80005d4 <main+0x110>)
 800052a:	f001 f8d5 	bl	80016d8 <HAL_GPIO_WritePin>
  calibration();
 800052e:	f000 fa75 	bl	8000a1c <calibration>

  do{ // To wait for the Start Command
	  getMessegeInterpret(rxBuffer);
 8000532:	482c      	ldr	r0, [pc, #176]	@ (80005e4 <main+0x120>)
 8000534:	f000 fbb6 	bl	8000ca4 <getMessegeInterpret>
	  HAL_Delay(500);
 8000538:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800053c:	f000 fe26 	bl	800118c <HAL_Delay>
  }while(!theMessege.flag_start);
 8000540:	4b29      	ldr	r3, [pc, #164]	@ (80005e8 <main+0x124>)
 8000542:	78db      	ldrb	r3, [r3, #3]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d0f4      	beq.n	8000532 <main+0x6e>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(theMessege.flag_moreCards && theMessege.flag_start){ //start and more cards
 8000548:	4b27      	ldr	r3, [pc, #156]	@ (80005e8 <main+0x124>)
 800054a:	785b      	ldrb	r3, [r3, #1]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d01f      	beq.n	8000590 <main+0xcc>
 8000550:	4b25      	ldr	r3, [pc, #148]	@ (80005e8 <main+0x124>)
 8000552:	78db      	ldrb	r3, [r3, #3]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d01b      	beq.n	8000590 <main+0xcc>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2120      	movs	r1, #32
 800055c:	481d      	ldr	r0, [pc, #116]	@ (80005d4 <main+0x110>)
 800055e:	f001 f8bb 	bl	80016d8 <HAL_GPIO_WritePin>
		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//Starting the PWM of the roller motor
 8000562:	2100      	movs	r1, #0
 8000564:	481e      	ldr	r0, [pc, #120]	@ (80005e0 <main+0x11c>)
 8000566:	f001 fe2b 	bl	80021c0 <HAL_TIM_PWM_Start>

		  StepperMove(calculateStepsToLevel(theMessege.tray));//move Sorting Tray to position
 800056a:	4b1f      	ldr	r3, [pc, #124]	@ (80005e8 <main+0x124>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fab0 	bl	8000ad4 <calculateStepsToLevel>
 8000574:	4603      	mov	r3, r0
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fae2 	bl	8000b40 <StepperMove>
		  cardPushSpin();//starting one loop of the PWM of the pushing DC motor
 800057c:	f000 fb64 	bl	8000c48 <cardPushSpin>

		  HAL_Delay(1000); // To make sure the card at the place
 8000580:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000584:	f000 fe02 	bl	800118c <HAL_Delay>

		  getMessegeInterpret(rxBuffer); // Get the next messege
 8000588:	4816      	ldr	r0, [pc, #88]	@ (80005e4 <main+0x120>)
 800058a:	f000 fb8b 	bl	8000ca4 <getMessegeInterpret>
 800058e:	e01d      	b.n	80005cc <main+0x108>
  	  }
	  else if(!theMessege.flag_moreCards && theMessege.flag_start){ // no more cards and start
 8000590:	4b15      	ldr	r3, [pc, #84]	@ (80005e8 <main+0x124>)
 8000592:	785b      	ldrb	r3, [r3, #1]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d10d      	bne.n	80005b4 <main+0xf0>
 8000598:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <main+0x124>)
 800059a:	78db      	ldrb	r3, [r3, #3]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d009      	beq.n	80005b4 <main+0xf0>
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);// Stop PWM of the DC motor of the roller
 80005a0:	2100      	movs	r1, #0
 80005a2:	480f      	ldr	r0, [pc, #60]	@ (80005e0 <main+0x11c>)
 80005a4:	f001 febc 	bl	8002320 <HAL_TIM_PWM_Stop>
		  retrivigCards();//pulling back cards to the Feeding tray
 80005a8:	f000 fa76 	bl	8000a98 <retrivigCards>
		  getMessegeInterpret(rxBuffer); // Get the next messege
 80005ac:	480d      	ldr	r0, [pc, #52]	@ (80005e4 <main+0x120>)
 80005ae:	f000 fb79 	bl	8000ca4 <getMessegeInterpret>
 80005b2:	e00b      	b.n	80005cc <main+0x108>
	  }
	  else if(!theMessege.flag_start){ // Not start = end
 80005b4:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <main+0x124>)
 80005b6:	78db      	ldrb	r3, [r3, #3]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d107      	bne.n	80005cc <main+0x108>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);//Turn on end indicator light
 80005bc:	2120      	movs	r1, #32
 80005be:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <main+0x110>)
 80005c0:	f001 f8a3 	bl	800170a <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80005c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005c8:	f000 fde0 	bl	800118c <HAL_Delay>
		  // add pin for restart - 1 restart, 0, don't restart.
		  //Add if when restart to do calibration and read message to start again.
	  }

	  HAL_Delay(100);
 80005cc:	2064      	movs	r0, #100	@ 0x64
 80005ce:	f000 fddd 	bl	800118c <HAL_Delay>
	  if(theMessege.flag_moreCards && theMessege.flag_start){ //start and more cards
 80005d2:	e7b9      	b.n	8000548 <main+0x84>
 80005d4:	40020000 	.word	0x40020000
 80005d8:	40000400 	.word	0x40000400
 80005dc:	20000070 	.word	0x20000070
 80005e0:	20000028 	.word	0x20000028
 80005e4:	20000100 	.word	0x20000100
 80005e8:	20000118 	.word	0x20000118

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	@ 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fe88 	bl	8003310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b29      	ldr	r3, [pc, #164]	@ (80006bc <SystemClock_Config+0xd0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	4a28      	ldr	r2, [pc, #160]	@ (80006bc <SystemClock_Config+0xd0>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000620:	4b26      	ldr	r3, [pc, #152]	@ (80006bc <SystemClock_Config+0xd0>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b23      	ldr	r3, [pc, #140]	@ (80006c0 <SystemClock_Config+0xd4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000638:	4a21      	ldr	r2, [pc, #132]	@ (80006c0 <SystemClock_Config+0xd4>)
 800063a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <SystemClock_Config+0xd4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000660:	2310      	movs	r3, #16
 8000662:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000664:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000668:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066a:	2304      	movs	r3, #4
 800066c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066e:	2307      	movs	r3, #7
 8000670:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	4618      	mov	r0, r3
 8000678:	f001 f862 	bl	8001740 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000682:	f000 fb95 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2102      	movs	r1, #2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fac4 	bl	8001c30 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ae:	f000 fb7f 	bl	8000db0 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	@ 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08e      	sub	sp, #56	@ 0x38
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
 80006f0:	615a      	str	r2, [r3, #20]
 80006f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006f4:	4b2d      	ldr	r3, [pc, #180]	@ (80007ac <MX_TIM3_Init+0xe8>)
 80006f6:	4a2e      	ldr	r2, [pc, #184]	@ (80007b0 <MX_TIM3_Init+0xec>)
 80006f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006fa:	4b2c      	ldr	r3, [pc, #176]	@ (80007ac <MX_TIM3_Init+0xe8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000700:	4b2a      	ldr	r3, [pc, #168]	@ (80007ac <MX_TIM3_Init+0xe8>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 8000706:	4b29      	ldr	r3, [pc, #164]	@ (80007ac <MX_TIM3_Init+0xe8>)
 8000708:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800070c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070e:	4b27      	ldr	r3, [pc, #156]	@ (80007ac <MX_TIM3_Init+0xe8>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000714:	4b25      	ldr	r3, [pc, #148]	@ (80007ac <MX_TIM3_Init+0xe8>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800071a:	4824      	ldr	r0, [pc, #144]	@ (80007ac <MX_TIM3_Init+0xe8>)
 800071c:	f001 fca8 	bl	8002070 <HAL_TIM_Base_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000726:	f000 fb43 	bl	8000db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000730:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000734:	4619      	mov	r1, r3
 8000736:	481d      	ldr	r0, [pc, #116]	@ (80007ac <MX_TIM3_Init+0xe8>)
 8000738:	f001 ff18 	bl	800256c <HAL_TIM_ConfigClockSource>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000742:	f000 fb35 	bl	8000db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000746:	4819      	ldr	r0, [pc, #100]	@ (80007ac <MX_TIM3_Init+0xe8>)
 8000748:	f001 fce1 	bl	800210e <HAL_TIM_PWM_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000752:	f000 fb2d 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	4619      	mov	r1, r3
 8000764:	4811      	ldr	r0, [pc, #68]	@ (80007ac <MX_TIM3_Init+0xe8>)
 8000766:	f002 faa1 	bl	8002cac <HAL_TIMEx_MasterConfigSynchronization>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000770:	f000 fb1e 	bl	8000db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000774:	2360      	movs	r3, #96	@ 0x60
 8000776:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 256;
 8000778:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800077c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	4619      	mov	r1, r3
 800078c:	4807      	ldr	r0, [pc, #28]	@ (80007ac <MX_TIM3_Init+0xe8>)
 800078e:	f001 fe2b 	bl	80023e8 <HAL_TIM_PWM_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000798:	f000 fb0a 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800079c:	4803      	ldr	r0, [pc, #12]	@ (80007ac <MX_TIM3_Init+0xe8>)
 800079e:	f000 fb6d 	bl	8000e7c <HAL_TIM_MspPostInit>

}
 80007a2:	bf00      	nop
 80007a4:	3738      	adds	r7, #56	@ 0x38
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000028 	.word	0x20000028
 80007b0:	40000400 	.word	0x40000400

080007b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08e      	sub	sp, #56	@ 0x38
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
 80007e0:	615a      	str	r2, [r3, #20]
 80007e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007e4:	4b2d      	ldr	r3, [pc, #180]	@ (800089c <MX_TIM4_Init+0xe8>)
 80007e6:	4a2e      	ldr	r2, [pc, #184]	@ (80008a0 <MX_TIM4_Init+0xec>)
 80007e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80007ea:	4b2c      	ldr	r3, [pc, #176]	@ (800089c <MX_TIM4_Init+0xe8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	4b2a      	ldr	r3, [pc, #168]	@ (800089c <MX_TIM4_Init+0xe8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1023;
 80007f6:	4b29      	ldr	r3, [pc, #164]	@ (800089c <MX_TIM4_Init+0xe8>)
 80007f8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80007fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fe:	4b27      	ldr	r3, [pc, #156]	@ (800089c <MX_TIM4_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b25      	ldr	r3, [pc, #148]	@ (800089c <MX_TIM4_Init+0xe8>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800080a:	4824      	ldr	r0, [pc, #144]	@ (800089c <MX_TIM4_Init+0xe8>)
 800080c:	f001 fc30 	bl	8002070 <HAL_TIM_Base_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000816:	f000 facb 	bl	8000db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000820:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000824:	4619      	mov	r1, r3
 8000826:	481d      	ldr	r0, [pc, #116]	@ (800089c <MX_TIM4_Init+0xe8>)
 8000828:	f001 fea0 	bl	800256c <HAL_TIM_ConfigClockSource>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000832:	f000 fabd 	bl	8000db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000836:	4819      	ldr	r0, [pc, #100]	@ (800089c <MX_TIM4_Init+0xe8>)
 8000838:	f001 fc69 	bl	800210e <HAL_TIM_PWM_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000842:	f000 fab5 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	4619      	mov	r1, r3
 8000854:	4811      	ldr	r0, [pc, #68]	@ (800089c <MX_TIM4_Init+0xe8>)
 8000856:	f002 fa29 	bl	8002cac <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000860:	f000 faa6 	bl	8000db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000864:	2360      	movs	r3, #96	@ 0x60
 8000866:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 256;
 8000868:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800086c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2200      	movs	r2, #0
 800087a:	4619      	mov	r1, r3
 800087c:	4807      	ldr	r0, [pc, #28]	@ (800089c <MX_TIM4_Init+0xe8>)
 800087e:	f001 fdb3 	bl	80023e8 <HAL_TIM_PWM_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000888:	f000 fa92 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800088c:	4803      	ldr	r0, [pc, #12]	@ (800089c <MX_TIM4_Init+0xe8>)
 800088e:	f000 faf5 	bl	8000e7c <HAL_TIM_MspPostInit>

}
 8000892:	bf00      	nop
 8000894:	3738      	adds	r7, #56	@ 0x38
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000070 	.word	0x20000070
 80008a0:	40000800 	.word	0x40000800

080008a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <MX_USART2_UART_Init+0x50>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008dc:	f002 fa54 	bl	8002d88 <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008e6:	f000 fa63 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200000b8 	.word	0x200000b8
 80008f4:	40004400 	.word	0x40004400

080008f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	@ 0x28
 80008fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b3e      	ldr	r3, [pc, #248]	@ (8000a0c <MX_GPIO_Init+0x114>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a3d      	ldr	r2, [pc, #244]	@ (8000a0c <MX_GPIO_Init+0x114>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a0c <MX_GPIO_Init+0x114>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b37      	ldr	r3, [pc, #220]	@ (8000a0c <MX_GPIO_Init+0x114>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a36      	ldr	r2, [pc, #216]	@ (8000a0c <MX_GPIO_Init+0x114>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b34      	ldr	r3, [pc, #208]	@ (8000a0c <MX_GPIO_Init+0x114>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b30      	ldr	r3, [pc, #192]	@ (8000a0c <MX_GPIO_Init+0x114>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a0c <MX_GPIO_Init+0x114>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b2d      	ldr	r3, [pc, #180]	@ (8000a0c <MX_GPIO_Init+0x114>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b29      	ldr	r3, [pc, #164]	@ (8000a0c <MX_GPIO_Init+0x114>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a28      	ldr	r2, [pc, #160]	@ (8000a0c <MX_GPIO_Init+0x114>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b26      	ldr	r3, [pc, #152]	@ (8000a0c <MX_GPIO_Init+0x114>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEPPER2_DIR_Pin|STEPPER2_STEP_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 8000984:	4822      	ldr	r0, [pc, #136]	@ (8000a10 <MX_GPIO_Init+0x118>)
 8000986:	f000 fea7 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER1_STEP_Pin|STEPPER1_DIR_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2106      	movs	r1, #6
 800098e:	4821      	ldr	r0, [pc, #132]	@ (8000a14 <MX_GPIO_Init+0x11c>)
 8000990:	f000 fea2 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000994:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800099a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	481b      	ldr	r0, [pc, #108]	@ (8000a18 <MX_GPIO_Init+0x120>)
 80009ac:	f000 fcf8 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin STEPPER2_DIR_Pin STEPPER2_STEP_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|STEPPER2_DIR_Pin|STEPPER2_STEP_Pin;
 80009b0:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4811      	ldr	r0, [pc, #68]	@ (8000a10 <MX_GPIO_Init+0x118>)
 80009ca:	f000 fce9 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER1_STEP_Pin STEPPER1_DIR_Pin */
  GPIO_InitStruct.Pin = STEPPER1_STEP_Pin|STEPPER1_DIR_Pin;
 80009ce:	2306      	movs	r3, #6
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <MX_GPIO_Init+0x11c>)
 80009e6:	f000 fcdb 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin;
 80009ea:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_GPIO_Init+0x11c>)
 8000a00:	f000 fcce 	bl	80013a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	@ 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020000 	.word	0x40020000
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40020800 	.word	0x40020800

08000a1c <calibration>:
/**
  *@brief function moves the Sorting tray until the switch is close
  *@note the function changes the trayPosition global variable
  *@retval int status: 1 OK, 0 Error
*/
void calibration(){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0

  int switchFlag = HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin);
 8000a22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a26:	481a      	ldr	r0, [pc, #104]	@ (8000a90 <calibration+0x74>)
 8000a28:	f000 fe3e 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(STEPPER1_DIR_GPIO_Port, STEPPER1_DIR_Pin, BACKWARDS); // UP to the top position
 8000a30:	2200      	movs	r2, #0
 8000a32:	2104      	movs	r1, #4
 8000a34:	4816      	ldr	r0, [pc, #88]	@ (8000a90 <calibration+0x74>)
 8000a36:	f000 fe4f 	bl	80016d8 <HAL_GPIO_WritePin>

  for (uint16_t i = 0; i < MAX_STEPS && switchFlag; i++)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	807b      	strh	r3, [r7, #2]
 8000a3e:	e019      	b.n	8000a74 <calibration+0x58>
  {
    HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2102      	movs	r1, #2
 8000a44:	4812      	ldr	r0, [pc, #72]	@ (8000a90 <calibration+0x74>)
 8000a46:	f000 fe47 	bl	80016d8 <HAL_GPIO_WritePin>
    HAL_Delay(STEP_DELAY_MS); // Delay to allow stepper driver to register step
 8000a4a:	200a      	movs	r0, #10
 8000a4c:	f000 fb9e 	bl	800118c <HAL_Delay>
    HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2102      	movs	r1, #2
 8000a54:	480e      	ldr	r0, [pc, #56]	@ (8000a90 <calibration+0x74>)
 8000a56:	f000 fe3f 	bl	80016d8 <HAL_GPIO_WritePin>
    HAL_Delay(STEP_DELAY_MS); // Delay between steps
 8000a5a:	200a      	movs	r0, #10
 8000a5c:	f000 fb96 	bl	800118c <HAL_Delay>
    switchFlag = HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin);
 8000a60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a64:	480a      	ldr	r0, [pc, #40]	@ (8000a90 <calibration+0x74>)
 8000a66:	f000 fe1f 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	607b      	str	r3, [r7, #4]
  for (uint16_t i = 0; i < MAX_STEPS && switchFlag; i++)
 8000a6e:	887b      	ldrh	r3, [r7, #2]
 8000a70:	3301      	adds	r3, #1
 8000a72:	807b      	strh	r3, [r7, #2]
 8000a74:	887b      	ldrh	r3, [r7, #2]
 8000a76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a7a:	d202      	bcs.n	8000a82 <calibration+0x66>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d1de      	bne.n	8000a40 <calibration+0x24>
  }

  trayPosition = 0;
 8000a82:	4b04      	ldr	r3, [pc, #16]	@ (8000a94 <calibration+0x78>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	801a      	strh	r2, [r3, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40020400 	.word	0x40020400
 8000a94:	20000114 	.word	0x20000114

08000a98 <retrivigCards>:
/**
  *@brief The functuin  retriving the cards from the Sorting Tray back to the Feeding Tray
  *@note The function calls calibration function
  *@retval None
*/
void retrivigCards(){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  calibration();
 8000a9e:	f7ff ffbd 	bl	8000a1c <calibration>

  for (uint8_t i = 1; i <= 4; i++)
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	71fb      	strb	r3, [r7, #7]
 8000aa6:	e00c      	b.n	8000ac2 <retrivigCards+0x2a>
  {
	StepperMove(calculateStepsToLevel(i));
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f812 	bl	8000ad4 <calculateStepsToLevel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f844 	bl	8000b40 <StepperMove>
    pullingHandlePush();
 8000ab8:	f000 f88c 	bl	8000bd4 <pullingHandlePush>
  for (uint8_t i = 1; i <= 4; i++)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	71fb      	strb	r3, [r7, #7]
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d9ef      	bls.n	8000aa8 <retrivigCards+0x10>
  }

}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <calculateStepsToLevel>:
  *@brief calculate the steps to the next level
  *@param level_to_go: The level to go to
  *@note the current level is the global trayPosition
  *@retval steps to go. positive is down, negative is up // Can be changed.
*/
int calculateStepsToLevel(int level_to_go){
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  switch (level_to_go)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	2b03      	cmp	r3, #3
 8000ae2:	d823      	bhi.n	8000b2c <calculateStepsToLevel+0x58>
 8000ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8000aec <calculateStepsToLevel+0x18>)
 8000ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aea:	bf00      	nop
 8000aec:	08000afd 	.word	0x08000afd
 8000af0:	08000b09 	.word	0x08000b09
 8000af4:	08000b15 	.word	0x08000b15
 8000af8:	08000b21 	.word	0x08000b21
  {
  case 1:
    return FIRST_LEVEL_POS - trayPosition;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <calculateStepsToLevel+0x68>)
 8000afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b02:	f1c3 0301 	rsb	r3, r3, #1
 8000b06:	e012      	b.n	8000b2e <calculateStepsToLevel+0x5a>
    break;
  case 2:
    return SECOND_LEVEL_POS - trayPosition;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <calculateStepsToLevel+0x68>)
 8000b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b0e:	f1c3 0302 	rsb	r3, r3, #2
 8000b12:	e00c      	b.n	8000b2e <calculateStepsToLevel+0x5a>
    break;
  case 3:
    return THIRD_LEVEL_POS - trayPosition;
 8000b14:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <calculateStepsToLevel+0x68>)
 8000b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b1a:	f1c3 0303 	rsb	r3, r3, #3
 8000b1e:	e006      	b.n	8000b2e <calculateStepsToLevel+0x5a>
    break;
  case 4:
    return FOURTH_LEVEL_POS - trayPosition;
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <calculateStepsToLevel+0x68>)
 8000b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b26:	f1c3 0304 	rsb	r3, r3, #4
 8000b2a:	e000      	b.n	8000b2e <calculateStepsToLevel+0x5a>
    break;

  default:
    return 0;
 8000b2c:	2300      	movs	r3, #0
    break;
  }
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000114 	.word	0x20000114

08000b40 <StepperMove>:
/**
  *@brief moving the Sorting Tray to position
  *@param stepsToDir: the number of steps to the next position.
  *@retval  None
*/
void StepperMove (int stepsToDir){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t steps;
  uint8_t direction;
  if(stepsToDir > 0){
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	dd04      	ble.n	8000b58 <StepperMove+0x18>
    direction = GPIO_PIN_SET;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	74fb      	strb	r3, [r7, #19]
    steps = stepsToDir;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	e004      	b.n	8000b62 <StepperMove+0x22>
  } else {
    direction = GPIO_PIN_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	74fb      	strb	r3, [r7, #19]
    steps = stepsToDir * -1;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	425b      	negs	r3, r3
 8000b60:	617b      	str	r3, [r7, #20]
  }

  HAL_GPIO_WritePin(STEPPER1_DIR_GPIO_Port, STEPPER1_DIR_Pin, direction); // (direction ? GPIO_PIN_SET : GPIO_PIN_RESET)
 8000b62:	7cfb      	ldrb	r3, [r7, #19]
 8000b64:	461a      	mov	r2, r3
 8000b66:	2104      	movs	r1, #4
 8000b68:	4818      	ldr	r0, [pc, #96]	@ (8000bcc <StepperMove+0x8c>)
 8000b6a:	f000 fdb5 	bl	80016d8 <HAL_GPIO_WritePin>

  for (uint32_t i = 0; i < steps; i++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	e022      	b.n	8000bba <StepperMove+0x7a>
  {
    HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2102      	movs	r1, #2
 8000b78:	4814      	ldr	r0, [pc, #80]	@ (8000bcc <StepperMove+0x8c>)
 8000b7a:	f000 fdad 	bl	80016d8 <HAL_GPIO_WritePin>
    HAL_Delay(STEP_DELAY_MS); // Delay to allow stepper driver to register step
 8000b7e:	200a      	movs	r0, #10
 8000b80:	f000 fb04 	bl	800118c <HAL_Delay>
    HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2102      	movs	r1, #2
 8000b88:	4810      	ldr	r0, [pc, #64]	@ (8000bcc <StepperMove+0x8c>)
 8000b8a:	f000 fda5 	bl	80016d8 <HAL_GPIO_WritePin>
    HAL_Delay(STEP_DELAY_MS); // Delay between steps
 8000b8e:	200a      	movs	r0, #10
 8000b90:	f000 fafc 	bl	800118c <HAL_Delay>

    trayPosition += direction ? 1 : (-1) ;
 8000b94:	7cfb      	ldrb	r3, [r7, #19]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <StepperMove+0x5e>
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	e001      	b.n	8000ba2 <StepperMove+0x62>
 8000b9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <StepperMove+0x90>)
 8000ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	4413      	add	r3, r2
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	b21a      	sxth	r2, r3
 8000bb0:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <StepperMove+0x90>)
 8000bb2:	801a      	strh	r2, [r3, #0]
  for (uint32_t i = 0; i < steps; i++)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d3d8      	bcc.n	8000b74 <StepperMove+0x34>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40020400 	.word	0x40020400
 8000bd0:	20000114 	.word	0x20000114

08000bd4 <pullingHandlePush>:
/***** Pulling Handle Push Function ########################################*/
/**
  *@brief Pushing the cards back to the Feeding Tray
  *@retval  None
*/
void pullingHandlePush(){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
  int steps = 100; //! edit to the right steps number
 8000bda:	2364      	movs	r3, #100	@ 0x64
 8000bdc:	607b      	str	r3, [r7, #4]
  for (int8_t dir = 1; dir >= 0 ; dir--)
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
 8000be2:	e025      	b.n	8000c30 <pullingHandlePush+0x5c>
  {
    HAL_GPIO_WritePin(STEPPER1_DIR_GPIO_Port, STEPPER1_DIR_Pin, dir);
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	461a      	mov	r2, r3
 8000be8:	2104      	movs	r1, #4
 8000bea:	4816      	ldr	r0, [pc, #88]	@ (8000c44 <pullingHandlePush+0x70>)
 8000bec:	f000 fd74 	bl	80016d8 <HAL_GPIO_WritePin>
    for (uint32_t i = 0; i < steps; i++)
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	e012      	b.n	8000c1c <pullingHandlePush+0x48>
    {
      HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	4812      	ldr	r0, [pc, #72]	@ (8000c44 <pullingHandlePush+0x70>)
 8000bfc:	f000 fd6c 	bl	80016d8 <HAL_GPIO_WritePin>
      HAL_Delay(STEP_DELAY_MS); // Delay to allow stepper driver to register step
 8000c00:	200a      	movs	r0, #10
 8000c02:	f000 fac3 	bl	800118c <HAL_Delay>
      HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2102      	movs	r1, #2
 8000c0a:	480e      	ldr	r0, [pc, #56]	@ (8000c44 <pullingHandlePush+0x70>)
 8000c0c:	f000 fd64 	bl	80016d8 <HAL_GPIO_WritePin>
      HAL_Delay(STEP_DELAY_MS); // Delay between steps
 8000c10:	200a      	movs	r0, #10
 8000c12:	f000 fabb 	bl	800118c <HAL_Delay>
    for (uint32_t i = 0; i < steps; i++)
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d3e8      	bcc.n	8000bf6 <pullingHandlePush+0x22>
  for (int8_t dir = 1; dir >= 0 ; dir--)
 8000c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	73fb      	strb	r3, [r7, #15]
 8000c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	dad5      	bge.n	8000be4 <pullingHandlePush+0x10>
    }
  }

}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40020400 	.word	0x40020400

08000c48 <cardPushSpin>:

/**
  *@brief Pushing one card from the main deck
  *@retval  None
*/
void cardPushSpin(){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  int switchFlag = HAL_GPIO_ReadPin(SWITCH2_GPIO_Port, SWITCH1_Pin); // switch is open
 8000c4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c52:	4812      	ldr	r0, [pc, #72]	@ (8000c9c <cardPushSpin+0x54>)
 8000c54:	f000 fd28 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	607b      	str	r3, [r7, #4]

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4810      	ldr	r0, [pc, #64]	@ (8000ca0 <cardPushSpin+0x58>)
 8000c60:	f001 faae 	bl	80021c0 <HAL_TIM_PWM_Start>

  for (uint8_t i = 0; i <= 255 && !switchFlag; i++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	70fb      	strb	r3, [r7, #3]
 8000c68:	e00c      	b.n	8000c84 <cardPushSpin+0x3c>
  {
    HAL_Delay(10);
 8000c6a:	200a      	movs	r0, #10
 8000c6c:	f000 fa8e 	bl	800118c <HAL_Delay>
    switchFlag = HAL_GPIO_ReadPin(SWITCH2_GPIO_Port, SWITCH1_Pin);
 8000c70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c74:	4809      	ldr	r0, [pc, #36]	@ (8000c9c <cardPushSpin+0x54>)
 8000c76:	f000 fd17 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i <= 255 && !switchFlag; i++)
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	3301      	adds	r3, #1
 8000c82:	70fb      	strb	r3, [r7, #3]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0ef      	beq.n	8000c6a <cardPushSpin+0x22>
  }

  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <cardPushSpin+0x58>)
 8000c8e:	f001 fb47 	bl	8002320 <HAL_TIM_PWM_Stop>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40020400 	.word	0x40020400
 8000ca0:	20000070 	.word	0x20000070

08000ca4 <getMessegeInterpret>:
	if (bufferIndexMain >= RX_BUFFER_SIZE) bufferIndexMain = 0;

	return 1;
}

int getMessegeInterpret(uint8_t* buffer){
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	uint8_t msg8_t;
	switch (j) {
 8000cac:	4b3d      	ldr	r3, [pc, #244]	@ (8000da4 <getMessegeInterpret+0x100>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b0a      	cmp	r3, #10
 8000cb2:	d83a      	bhi.n	8000d2a <getMessegeInterpret+0x86>
 8000cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8000cbc <getMessegeInterpret+0x18>)
 8000cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cba:	bf00      	nop
 8000cbc:	08000ce9 	.word	0x08000ce9
 8000cc0:	08000cef 	.word	0x08000cef
 8000cc4:	08000cf5 	.word	0x08000cf5
 8000cc8:	08000cfb 	.word	0x08000cfb
 8000ccc:	08000d01 	.word	0x08000d01
 8000cd0:	08000d07 	.word	0x08000d07
 8000cd4:	08000d0d 	.word	0x08000d0d
 8000cd8:	08000d13 	.word	0x08000d13
 8000cdc:	08000d19 	.word	0x08000d19
 8000ce0:	08000d1f 	.word	0x08000d1f
 8000ce4:	08000d25 	.word	0x08000d25
		case 0:
			msg8_t = 0x14; // start
 8000ce8:	2314      	movs	r3, #20
 8000cea:	73fb      	strb	r3, [r7, #15]
			break;
 8000cec:	e01e      	b.n	8000d2c <getMessegeInterpret+0x88>
		case 1:
			msg8_t = 0x14;
 8000cee:	2314      	movs	r3, #20
 8000cf0:	73fb      	strb	r3, [r7, #15]
			break;
 8000cf2:	e01b      	b.n	8000d2c <getMessegeInterpret+0x88>
		case 2:
			msg8_t = 0x15;
 8000cf4:	2315      	movs	r3, #21
 8000cf6:	73fb      	strb	r3, [r7, #15]
				break;
 8000cf8:	e018      	b.n	8000d2c <getMessegeInterpret+0x88>
		case 3:
			msg8_t = 0x16;
 8000cfa:	2316      	movs	r3, #22
 8000cfc:	73fb      	strb	r3, [r7, #15]
				break;
 8000cfe:	e015      	b.n	8000d2c <getMessegeInterpret+0x88>
		case 4:
			msg8_t = 0x15;
 8000d00:	2315      	movs	r3, #21
 8000d02:	73fb      	strb	r3, [r7, #15]
				break;
 8000d04:	e012      	b.n	8000d2c <getMessegeInterpret+0x88>
		case 5:
			msg8_t = 0x17;
 8000d06:	2317      	movs	r3, #23
 8000d08:	73fb      	strb	r3, [r7, #15]
				break;
 8000d0a:	e00f      	b.n	8000d2c <getMessegeInterpret+0x88>
		case 6:
			msg8_t = 0x14;
 8000d0c:	2314      	movs	r3, #20
 8000d0e:	73fb      	strb	r3, [r7, #15]
				break;
 8000d10:	e00c      	b.n	8000d2c <getMessegeInterpret+0x88>
		case 7:
			msg8_t = 0x14;
 8000d12:	2314      	movs	r3, #20
 8000d14:	73fb      	strb	r3, [r7, #15]
				break;
 8000d16:	e009      	b.n	8000d2c <getMessegeInterpret+0x88>
		case 8:
			msg8_t = 0x15;
 8000d18:	2315      	movs	r3, #21
 8000d1a:	73fb      	strb	r3, [r7, #15]
				break;
 8000d1c:	e006      	b.n	8000d2c <getMessegeInterpret+0x88>
		case 9:
			msg8_t = 0x12;
 8000d1e:	2312      	movs	r3, #18
 8000d20:	73fb      	strb	r3, [r7, #15]
				break;
 8000d22:	e003      	b.n	8000d2c <getMessegeInterpret+0x88>
		case 10:
			msg8_t = 0x01;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
				break;
 8000d28:	e000      	b.n	8000d2c <getMessegeInterpret+0x88>
		default:
			break;
 8000d2a:	bf00      	nop
	}
	j++;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000da4 <getMessegeInterpret+0x100>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a1c      	ldr	r2, [pc, #112]	@ (8000da4 <getMessegeInterpret+0x100>)
 8000d34:	6013      	str	r3, [r2, #0]

	theMessege.tray = msg8_t & 0x03;  // 1st and 2nd bits
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000da8 <getMessegeInterpret+0x104>)
 8000d40:	701a      	strb	r2, [r3, #0]
	theMessege.flag_moreCards = (msg8_t >> 2) & 0x01; // 3rd bit
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	089b      	lsrs	r3, r3, #2
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b16      	ldr	r3, [pc, #88]	@ (8000da8 <getMessegeInterpret+0x104>)
 8000d50:	705a      	strb	r2, [r3, #1]
	theMessege.flag_notEnd = (msg8_t >> 3) & 0x01; // 4th bit
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	08db      	lsrs	r3, r3, #3
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <getMessegeInterpret+0x104>)
 8000d60:	709a      	strb	r2, [r3, #2]
	theMessege.flag_start = (msg8_t >> 4) & 0x01; // 5th bit
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	091b      	lsrs	r3, r3, #4
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <getMessegeInterpret+0x104>)
 8000d70:	70da      	strb	r2, [r3, #3]
	theMessege.Error = (msg8_t >> 5) & 0x07; // 6th to 8th bits
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	095b      	lsrs	r3, r3, #5
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <getMessegeInterpret+0x104>)
 8000d7a:	711a      	strb	r2, [r3, #4]

	bufferIndexMain += RX_DATA_SIZE;
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <getMessegeInterpret+0x108>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <getMessegeInterpret+0x108>)
 8000d86:	701a      	strb	r2, [r3, #0]
	if (bufferIndexMain >= RX_BUFFER_SIZE) bufferIndexMain = 0;
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <getMessegeInterpret+0x108>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b13      	cmp	r3, #19
 8000d8e:	d902      	bls.n	8000d96 <getMessegeInterpret+0xf2>
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <getMessegeInterpret+0x108>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]

	return 1;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	20000120 	.word	0x20000120
 8000da8:	20000118 	.word	0x20000118
 8000dac:	2000011d 	.word	0x2000011d

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <Error_Handler+0x8>

08000dbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	4a0f      	ldr	r2, [pc, #60]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	4a08      	ldr	r2, [pc, #32]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dfa:	2007      	movs	r0, #7
 8000dfc:	f000 fa9c 	bl	8001338 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023800 	.word	0x40023800

08000e0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a15      	ldr	r2, [pc, #84]	@ (8000e70 <HAL_TIM_Base_MspInit+0x64>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d10e      	bne.n	8000e3c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <HAL_TIM_Base_MspInit+0x68>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e26:	4a13      	ldr	r2, [pc, #76]	@ (8000e74 <HAL_TIM_Base_MspInit+0x68>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e2e:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <HAL_TIM_Base_MspInit+0x68>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e3a:	e012      	b.n	8000e62 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0d      	ldr	r2, [pc, #52]	@ (8000e78 <HAL_TIM_Base_MspInit+0x6c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d10d      	bne.n	8000e62 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <HAL_TIM_Base_MspInit+0x68>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	4a09      	ldr	r2, [pc, #36]	@ (8000e74 <HAL_TIM_Base_MspInit+0x68>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <HAL_TIM_Base_MspInit+0x68>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40000400 	.word	0x40000400
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40000800 	.word	0x40000800

08000e7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	@ 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a24      	ldr	r2, [pc, #144]	@ (8000f2c <HAL_TIM_MspPostInit+0xb0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d11e      	bne.n	8000edc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b23      	ldr	r3, [pc, #140]	@ (8000f30 <HAL_TIM_MspPostInit+0xb4>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a22      	ldr	r2, [pc, #136]	@ (8000f30 <HAL_TIM_MspPostInit+0xb4>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b20      	ldr	r3, [pc, #128]	@ (8000f30 <HAL_TIM_MspPostInit+0xb4>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin;
 8000eba:	2340      	movs	r3, #64	@ 0x40
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4817      	ldr	r0, [pc, #92]	@ (8000f34 <HAL_TIM_MspPostInit+0xb8>)
 8000ed6:	f000 fa63 	bl	80013a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000eda:	e022      	b.n	8000f22 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a15      	ldr	r2, [pc, #84]	@ (8000f38 <HAL_TIM_MspPostInit+0xbc>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d11d      	bne.n	8000f22 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <HAL_TIM_MspPostInit+0xb4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a10      	ldr	r2, [pc, #64]	@ (8000f30 <HAL_TIM_MspPostInit+0xb4>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <HAL_TIM_MspPostInit+0xb4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM2_Pin;
 8000f02:	2340      	movs	r3, #64	@ 0x40
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f12:	2302      	movs	r3, #2
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4807      	ldr	r0, [pc, #28]	@ (8000f3c <HAL_TIM_MspPostInit+0xc0>)
 8000f1e:	f000 fa3f 	bl	80013a0 <HAL_GPIO_Init>
}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	@ 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40000400 	.word	0x40000400
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40000800 	.word	0x40000800
 8000f3c:	40020400 	.word	0x40020400

08000f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	@ 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a19      	ldr	r2, [pc, #100]	@ (8000fc4 <HAL_UART_MspInit+0x84>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d12b      	bne.n	8000fba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <HAL_UART_MspInit+0x88>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	4a17      	ldr	r2, [pc, #92]	@ (8000fc8 <HAL_UART_MspInit+0x88>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f72:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <HAL_UART_MspInit+0x88>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <HAL_UART_MspInit+0x88>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a10      	ldr	r2, [pc, #64]	@ (8000fc8 <HAL_UART_MspInit+0x88>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <HAL_UART_MspInit+0x88>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = PI_TX_Pin|PI_RX_Pin;
 8000f9a:	230c      	movs	r3, #12
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000faa:	2307      	movs	r3, #7
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <HAL_UART_MspInit+0x8c>)
 8000fb6:	f000 f9f3 	bl	80013a0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	@ 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40004400 	.word	0x40004400
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001026:	f000 f891 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <SystemInit+0x20>)
 8001036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800103a:	4a05      	ldr	r2, [pc, #20]	@ (8001050 <SystemInit+0x20>)
 800103c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001040:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800108c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001058:	f7ff ffea 	bl	8001030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800105c:	480c      	ldr	r0, [pc, #48]	@ (8001090 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800105e:	490d      	ldr	r1, [pc, #52]	@ (8001094 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001060:	4a0d      	ldr	r2, [pc, #52]	@ (8001098 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001074:	4c0a      	ldr	r4, [pc, #40]	@ (80010a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001082:	f002 f94d 	bl	8003320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001086:	f7ff fa1d 	bl	80004c4 <main>
  bx  lr    
 800108a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800108c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001098:	080033a8 	.word	0x080033a8
  ldr r2, =_sbss
 800109c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010a0:	20000128 	.word	0x20000128

080010a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010ac:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0d      	ldr	r2, [pc, #52]	@ (80010e8 <HAL_Init+0x40>)
 80010b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b8:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <HAL_Init+0x40>)
 80010be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	@ (80010e8 <HAL_Init+0x40>)
 80010ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 f931 	bl	8001338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f808 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff fe6e 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023c00 	.word	0x40023c00

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <HAL_InitTick+0x54>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <HAL_InitTick+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f93b 	bl	8001386 <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001128:	f000 f911 	bl	800134e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	@ (8001148 <HAL_InitTick+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000000 	.word	0x20000000
 8001144:	20000008 	.word	0x20000008
 8001148:	20000004 	.word	0x20000004

0800114c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <HAL_IncTick+0x20>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_IncTick+0x24>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	@ (8001170 <HAL_IncTick+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008
 8001170:	20000124 	.word	0x20000124

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b03      	ldr	r3, [pc, #12]	@ (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000124 	.word	0x20000124

0800118c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001194:	f7ff ffee 	bl	8001174 <HAL_GetTick>
 8001198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011a4:	d005      	beq.n	80011b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a6:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <HAL_Delay+0x44>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b2:	bf00      	nop
 80011b4:	f7ff ffde 	bl	8001174 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d8f7      	bhi.n	80011b4 <HAL_Delay+0x28>
  {
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000008 	.word	0x20000008

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	@ (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	490c      	ldr	r1, [pc, #48]	@ (8001284 <__NVIC_SetPriority+0x4c>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	440b      	add	r3, r1
 800125c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001260:	e00a      	b.n	8001278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4908      	ldr	r1, [pc, #32]	@ (8001288 <__NVIC_SetPriority+0x50>)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	3b04      	subs	r3, #4
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	440b      	add	r3, r1
 8001276:	761a      	strb	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	@ 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	bf28      	it	cs
 80012aa:	2304      	movcs	r3, #4
 80012ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3304      	adds	r3, #4
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d902      	bls.n	80012bc <NVIC_EncodePriority+0x30>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3b03      	subs	r3, #3
 80012ba:	e000      	b.n	80012be <NVIC_EncodePriority+0x32>
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43d9      	mvns	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	4313      	orrs	r3, r2
         );
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	@ 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001304:	d301      	bcc.n	800130a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001306:	2301      	movs	r3, #1
 8001308:	e00f      	b.n	800132a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130a:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <SysTick_Config+0x40>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001312:	210f      	movs	r1, #15
 8001314:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001318:	f7ff ff8e 	bl	8001238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800131c:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <SysTick_Config+0x40>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001322:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <SysTick_Config+0x40>)
 8001324:	2207      	movs	r2, #7
 8001326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	e000e010 	.word	0xe000e010

08001338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ff47 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134e:	b580      	push	{r7, lr}
 8001350:	b086      	sub	sp, #24
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
 800135a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001360:	f7ff ff5c 	bl	800121c <__NVIC_GetPriorityGrouping>
 8001364:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	68b9      	ldr	r1, [r7, #8]
 800136a:	6978      	ldr	r0, [r7, #20]
 800136c:	f7ff ff8e 	bl	800128c <NVIC_EncodePriority>
 8001370:	4602      	mov	r2, r0
 8001372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff5d 	bl	8001238 <__NVIC_SetPriority>
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffb0 	bl	80012f4 <SysTick_Config>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	@ 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	e159      	b.n	8001670 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013bc:	2201      	movs	r2, #1
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 8148 	bne.w	800166a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d005      	beq.n	80013f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d130      	bne.n	8001454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 0201 	and.w	r2, r3, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b03      	cmp	r3, #3
 800145e:	d017      	beq.n	8001490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d123      	bne.n	80014e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	69b9      	ldr	r1, [r7, #24]
 80014e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80a2 	beq.w	800166a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b57      	ldr	r3, [pc, #348]	@ (8001688 <HAL_GPIO_Init+0x2e8>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	4a56      	ldr	r2, [pc, #344]	@ (8001688 <HAL_GPIO_Init+0x2e8>)
 8001530:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001534:	6453      	str	r3, [r2, #68]	@ 0x44
 8001536:	4b54      	ldr	r3, [pc, #336]	@ (8001688 <HAL_GPIO_Init+0x2e8>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001542:	4a52      	ldr	r2, [pc, #328]	@ (800168c <HAL_GPIO_Init+0x2ec>)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a49      	ldr	r2, [pc, #292]	@ (8001690 <HAL_GPIO_Init+0x2f0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d019      	beq.n	80015a2 <HAL_GPIO_Init+0x202>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a48      	ldr	r2, [pc, #288]	@ (8001694 <HAL_GPIO_Init+0x2f4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0x1fe>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a47      	ldr	r2, [pc, #284]	@ (8001698 <HAL_GPIO_Init+0x2f8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00d      	beq.n	800159a <HAL_GPIO_Init+0x1fa>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a46      	ldr	r2, [pc, #280]	@ (800169c <HAL_GPIO_Init+0x2fc>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d007      	beq.n	8001596 <HAL_GPIO_Init+0x1f6>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a45      	ldr	r2, [pc, #276]	@ (80016a0 <HAL_GPIO_Init+0x300>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d101      	bne.n	8001592 <HAL_GPIO_Init+0x1f2>
 800158e:	2304      	movs	r3, #4
 8001590:	e008      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 8001592:	2307      	movs	r3, #7
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 8001596:	2303      	movs	r3, #3
 8001598:	e004      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 800159a:	2302      	movs	r3, #2
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 80015a2:	2300      	movs	r3, #0
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	f002 0203 	and.w	r2, r2, #3
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	4093      	lsls	r3, r2
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b4:	4935      	ldr	r1, [pc, #212]	@ (800168c <HAL_GPIO_Init+0x2ec>)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c2:	4b38      	ldr	r3, [pc, #224]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015e6:	4a2f      	ldr	r2, [pc, #188]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ec:	4b2d      	ldr	r3, [pc, #180]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001610:	4a24      	ldr	r2, [pc, #144]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001616:	4b23      	ldr	r3, [pc, #140]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800163a:	4a1a      	ldr	r2, [pc, #104]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001640:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001664:	4a0f      	ldr	r2, [pc, #60]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3301      	adds	r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b0f      	cmp	r3, #15
 8001674:	f67f aea2 	bls.w	80013bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3724      	adds	r7, #36	@ 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40013800 	.word	0x40013800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40013c00 	.word	0x40013c00

080016a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e001      	b.n	80016ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
 80016e4:	4613      	mov	r3, r2
 80016e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ee:	887a      	ldrh	r2, [r7, #2]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f4:	e003      	b.n	80016fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	619a      	str	r2, [r3, #24]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800170a:	b480      	push	{r7}
 800170c:	b085      	sub	sp, #20
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	460b      	mov	r3, r1
 8001714:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800171c:	887a      	ldrh	r2, [r7, #2]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4013      	ands	r3, r2
 8001722:	041a      	lsls	r2, r3, #16
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43d9      	mvns	r1, r3
 8001728:	887b      	ldrh	r3, [r7, #2]
 800172a:	400b      	ands	r3, r1
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	619a      	str	r2, [r3, #24]
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e267      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d075      	beq.n	800184a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800175e:	4b88      	ldr	r3, [pc, #544]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b04      	cmp	r3, #4
 8001768:	d00c      	beq.n	8001784 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800176a:	4b85      	ldr	r3, [pc, #532]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001772:	2b08      	cmp	r3, #8
 8001774:	d112      	bne.n	800179c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001776:	4b82      	ldr	r3, [pc, #520]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800177e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001782:	d10b      	bne.n	800179c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001784:	4b7e      	ldr	r3, [pc, #504]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d05b      	beq.n	8001848 <HAL_RCC_OscConfig+0x108>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d157      	bne.n	8001848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e242      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a4:	d106      	bne.n	80017b4 <HAL_RCC_OscConfig+0x74>
 80017a6:	4b76      	ldr	r3, [pc, #472]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a75      	ldr	r2, [pc, #468]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e01d      	b.n	80017f0 <HAL_RCC_OscConfig+0xb0>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x98>
 80017be:	4b70      	ldr	r3, [pc, #448]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a6f      	ldr	r2, [pc, #444]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a6c      	ldr	r2, [pc, #432]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0xb0>
 80017d8:	4b69      	ldr	r3, [pc, #420]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a68      	ldr	r2, [pc, #416]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b66      	ldr	r3, [pc, #408]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a65      	ldr	r2, [pc, #404]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d013      	beq.n	8001820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fcbc 	bl	8001174 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fcb8 	bl	8001174 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	@ 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e207      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b5b      	ldr	r3, [pc, #364]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0xc0>
 800181e:	e014      	b.n	800184a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fca8 	bl	8001174 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fca4 	bl	8001174 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	@ 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e1f3      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183a:	4b51      	ldr	r3, [pc, #324]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0xe8>
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d063      	beq.n	800191e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001856:	4b4a      	ldr	r3, [pc, #296]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00b      	beq.n	800187a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001862:	4b47      	ldr	r3, [pc, #284]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800186a:	2b08      	cmp	r3, #8
 800186c:	d11c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186e:	4b44      	ldr	r3, [pc, #272]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d116      	bne.n	80018a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187a:	4b41      	ldr	r3, [pc, #260]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d005      	beq.n	8001892 <HAL_RCC_OscConfig+0x152>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d001      	beq.n	8001892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e1c7      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001892:	4b3b      	ldr	r3, [pc, #236]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4937      	ldr	r1, [pc, #220]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a6:	e03a      	b.n	800191e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d020      	beq.n	80018f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b0:	4b34      	ldr	r3, [pc, #208]	@ (8001984 <HAL_RCC_OscConfig+0x244>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7ff fc5d 	bl	8001174 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018be:	f7ff fc59 	bl	8001174 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e1a8      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018dc:	4b28      	ldr	r3, [pc, #160]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4925      	ldr	r1, [pc, #148]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]
 80018f0:	e015      	b.n	800191e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f2:	4b24      	ldr	r3, [pc, #144]	@ (8001984 <HAL_RCC_OscConfig+0x244>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fc3c 	bl	8001174 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001900:	f7ff fc38 	bl	8001174 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e187      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001912:	4b1b      	ldr	r3, [pc, #108]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d036      	beq.n	8001998 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d016      	beq.n	8001960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001932:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <HAL_RCC_OscConfig+0x248>)
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff fc1c 	bl	8001174 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001940:	f7ff fc18 	bl	8001174 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e167      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001952:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x200>
 800195e:	e01b      	b.n	8001998 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001960:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <HAL_RCC_OscConfig+0x248>)
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001966:	f7ff fc05 	bl	8001174 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	e00e      	b.n	800198c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196e:	f7ff fc01 	bl	8001174 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d907      	bls.n	800198c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e150      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
 8001980:	40023800 	.word	0x40023800
 8001984:	42470000 	.word	0x42470000
 8001988:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198c:	4b88      	ldr	r3, [pc, #544]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 800198e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1ea      	bne.n	800196e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 8097 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019aa:	4b81      	ldr	r3, [pc, #516]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10f      	bne.n	80019d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b7d      	ldr	r3, [pc, #500]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	4a7c      	ldr	r2, [pc, #496]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c6:	4b7a      	ldr	r3, [pc, #488]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d2:	2301      	movs	r3, #1
 80019d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d6:	4b77      	ldr	r3, [pc, #476]	@ (8001bb4 <HAL_RCC_OscConfig+0x474>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d118      	bne.n	8001a14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e2:	4b74      	ldr	r3, [pc, #464]	@ (8001bb4 <HAL_RCC_OscConfig+0x474>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a73      	ldr	r2, [pc, #460]	@ (8001bb4 <HAL_RCC_OscConfig+0x474>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ee:	f7ff fbc1 	bl	8001174 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f6:	f7ff fbbd 	bl	8001174 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e10c      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb4 <HAL_RCC_OscConfig+0x474>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x2ea>
 8001a1c:	4b64      	ldr	r3, [pc, #400]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a20:	4a63      	ldr	r2, [pc, #396]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a28:	e01c      	b.n	8001a64 <HAL_RCC_OscConfig+0x324>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x30c>
 8001a32:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a36:	4a5e      	ldr	r2, [pc, #376]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a42:	4a5b      	ldr	r2, [pc, #364]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a4a:	e00b      	b.n	8001a64 <HAL_RCC_OscConfig+0x324>
 8001a4c:	4b58      	ldr	r3, [pc, #352]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a50:	4a57      	ldr	r2, [pc, #348]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a58:	4b55      	ldr	r3, [pc, #340]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5c:	4a54      	ldr	r2, [pc, #336]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a5e:	f023 0304 	bic.w	r3, r3, #4
 8001a62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d015      	beq.n	8001a98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6c:	f7ff fb82 	bl	8001174 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a72:	e00a      	b.n	8001a8a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a74:	f7ff fb7e 	bl	8001174 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e0cb      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8a:	4b49      	ldr	r3, [pc, #292]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0ee      	beq.n	8001a74 <HAL_RCC_OscConfig+0x334>
 8001a96:	e014      	b.n	8001ac2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a98:	f7ff fb6c 	bl	8001174 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa0:	f7ff fb68 	bl	8001174 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e0b5      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1ee      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d105      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac8:	4b39      	ldr	r3, [pc, #228]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	4a38      	ldr	r2, [pc, #224]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ad2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 80a1 	beq.w	8001c20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ade:	4b34      	ldr	r3, [pc, #208]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d05c      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d141      	bne.n	8001b76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af2:	4b31      	ldr	r3, [pc, #196]	@ (8001bb8 <HAL_RCC_OscConfig+0x478>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff fb3c 	bl	8001174 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff fb38 	bl	8001174 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e087      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b12:	4b27      	ldr	r3, [pc, #156]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69da      	ldr	r2, [r3, #28]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2c:	019b      	lsls	r3, r3, #6
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b34:	085b      	lsrs	r3, r3, #1
 8001b36:	3b01      	subs	r3, #1
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b40:	061b      	lsls	r3, r3, #24
 8001b42:	491b      	ldr	r1, [pc, #108]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b48:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <HAL_RCC_OscConfig+0x478>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fb11 	bl	8001174 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff fb0d 	bl	8001174 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e05c      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b68:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x416>
 8001b74:	e054      	b.n	8001c20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <HAL_RCC_OscConfig+0x478>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fafa 	bl	8001174 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff faf6 	bl	8001174 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e045      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x444>
 8001ba2:	e03d      	b.n	8001c20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e038      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <HAL_RCC_OscConfig+0x4ec>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d028      	beq.n	8001c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d121      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d11a      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bec:	4013      	ands	r3, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d111      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c02:	085b      	lsrs	r3, r3, #1
 8001c04:	3b01      	subs	r3, #1
 8001c06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d107      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800

08001c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0cc      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c44:	4b68      	ldr	r3, [pc, #416]	@ (8001de8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d90c      	bls.n	8001c6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c52:	4b65      	ldr	r3, [pc, #404]	@ (8001de8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b63      	ldr	r3, [pc, #396]	@ (8001de8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0b8      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d020      	beq.n	8001cba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c84:	4b59      	ldr	r3, [pc, #356]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4a58      	ldr	r2, [pc, #352]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c9c:	4b53      	ldr	r3, [pc, #332]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a52      	ldr	r2, [pc, #328]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca8:	4b50      	ldr	r3, [pc, #320]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	494d      	ldr	r1, [pc, #308]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d044      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	4b47      	ldr	r3, [pc, #284]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d119      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e07f      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d003      	beq.n	8001cee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cee:	4b3f      	ldr	r3, [pc, #252]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e06f      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e067      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d0e:	4b37      	ldr	r3, [pc, #220]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f023 0203 	bic.w	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4934      	ldr	r1, [pc, #208]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d20:	f7ff fa28 	bl	8001174 <HAL_GetTick>
 8001d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	e00a      	b.n	8001d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d28:	f7ff fa24 	bl	8001174 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e04f      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 020c 	and.w	r2, r3, #12
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d1eb      	bne.n	8001d28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d50:	4b25      	ldr	r3, [pc, #148]	@ (8001de8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d20c      	bcs.n	8001d78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b22      	ldr	r3, [pc, #136]	@ (8001de8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d66:	4b20      	ldr	r3, [pc, #128]	@ (8001de8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e032      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d84:	4b19      	ldr	r3, [pc, #100]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	4916      	ldr	r1, [pc, #88]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d009      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001da2:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	490e      	ldr	r1, [pc, #56]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001db6:	f000 f821 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	490a      	ldr	r1, [pc, #40]	@ (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	5ccb      	ldrb	r3, [r1, r3]
 8001dca:	fa22 f303 	lsr.w	r3, r2, r3
 8001dce:	4a09      	ldr	r2, [pc, #36]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dd2:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f988 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023c00 	.word	0x40023c00
 8001dec:	40023800 	.word	0x40023800
 8001df0:	08003380 	.word	0x08003380
 8001df4:	20000000 	.word	0x20000000
 8001df8:	20000004 	.word	0x20000004

08001dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e00:	b094      	sub	sp, #80	@ 0x50
 8001e02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e14:	4b79      	ldr	r3, [pc, #484]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d00d      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x40>
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	f200 80e1 	bhi.w	8001fe8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x34>
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d003      	beq.n	8001e36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e2e:	e0db      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e30:	4b73      	ldr	r3, [pc, #460]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e34:	e0db      	b.n	8001fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e36:	4b73      	ldr	r3, [pc, #460]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e3a:	e0d8      	b.n	8001fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e3c:	4b6f      	ldr	r3, [pc, #444]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e44:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e46:	4b6d      	ldr	r3, [pc, #436]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d063      	beq.n	8001f1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e52:	4b6a      	ldr	r3, [pc, #424]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	099b      	lsrs	r3, r3, #6
 8001e58:	2200      	movs	r2, #0
 8001e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e66:	2300      	movs	r3, #0
 8001e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e6e:	4622      	mov	r2, r4
 8001e70:	462b      	mov	r3, r5
 8001e72:	f04f 0000 	mov.w	r0, #0
 8001e76:	f04f 0100 	mov.w	r1, #0
 8001e7a:	0159      	lsls	r1, r3, #5
 8001e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e80:	0150      	lsls	r0, r2, #5
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4621      	mov	r1, r4
 8001e88:	1a51      	subs	r1, r2, r1
 8001e8a:	6139      	str	r1, [r7, #16]
 8001e8c:	4629      	mov	r1, r5
 8001e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ea0:	4659      	mov	r1, fp
 8001ea2:	018b      	lsls	r3, r1, #6
 8001ea4:	4651      	mov	r1, sl
 8001ea6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eaa:	4651      	mov	r1, sl
 8001eac:	018a      	lsls	r2, r1, #6
 8001eae:	4651      	mov	r1, sl
 8001eb0:	ebb2 0801 	subs.w	r8, r2, r1
 8001eb4:	4659      	mov	r1, fp
 8001eb6:	eb63 0901 	sbc.w	r9, r3, r1
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ece:	4690      	mov	r8, r2
 8001ed0:	4699      	mov	r9, r3
 8001ed2:	4623      	mov	r3, r4
 8001ed4:	eb18 0303 	adds.w	r3, r8, r3
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	462b      	mov	r3, r5
 8001edc:	eb49 0303 	adc.w	r3, r9, r3
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eee:	4629      	mov	r1, r5
 8001ef0:	024b      	lsls	r3, r1, #9
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ef8:	4621      	mov	r1, r4
 8001efa:	024a      	lsls	r2, r1, #9
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f02:	2200      	movs	r2, #0
 8001f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f0c:	f7fe f962 	bl	80001d4 <__aeabi_uldivmod>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4613      	mov	r3, r2
 8001f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f18:	e058      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1a:	4b38      	ldr	r3, [pc, #224]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	099b      	lsrs	r3, r3, #6
 8001f20:	2200      	movs	r2, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	4611      	mov	r1, r2
 8001f26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f2a:	623b      	str	r3, [r7, #32]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f34:	4642      	mov	r2, r8
 8001f36:	464b      	mov	r3, r9
 8001f38:	f04f 0000 	mov.w	r0, #0
 8001f3c:	f04f 0100 	mov.w	r1, #0
 8001f40:	0159      	lsls	r1, r3, #5
 8001f42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f46:	0150      	lsls	r0, r2, #5
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4641      	mov	r1, r8
 8001f4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f52:	4649      	mov	r1, r9
 8001f54:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f6c:	ebb2 040a 	subs.w	r4, r2, sl
 8001f70:	eb63 050b 	sbc.w	r5, r3, fp
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	00eb      	lsls	r3, r5, #3
 8001f7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f82:	00e2      	lsls	r2, r4, #3
 8001f84:	4614      	mov	r4, r2
 8001f86:	461d      	mov	r5, r3
 8001f88:	4643      	mov	r3, r8
 8001f8a:	18e3      	adds	r3, r4, r3
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	464b      	mov	r3, r9
 8001f90:	eb45 0303 	adc.w	r3, r5, r3
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fa2:	4629      	mov	r1, r5
 8001fa4:	028b      	lsls	r3, r1, #10
 8001fa6:	4621      	mov	r1, r4
 8001fa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fac:	4621      	mov	r1, r4
 8001fae:	028a      	lsls	r2, r1, #10
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
 8001fba:	61fa      	str	r2, [r7, #28]
 8001fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fc0:	f7fe f908 	bl	80001d4 <__aeabi_uldivmod>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4613      	mov	r3, r2
 8001fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	0c1b      	lsrs	r3, r3, #16
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001fdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fe6:	e002      	b.n	8001fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fe8:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3750      	adds	r7, #80	@ 0x50
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800
 8002000:	00f42400 	.word	0x00f42400
 8002004:	007a1200 	.word	0x007a1200

08002008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800200c:	4b03      	ldr	r3, [pc, #12]	@ (800201c <HAL_RCC_GetHCLKFreq+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000000 	.word	0x20000000

08002020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002024:	f7ff fff0 	bl	8002008 <HAL_RCC_GetHCLKFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b05      	ldr	r3, [pc, #20]	@ (8002040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	0a9b      	lsrs	r3, r3, #10
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	4903      	ldr	r1, [pc, #12]	@ (8002044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40023800 	.word	0x40023800
 8002044:	08003390 	.word	0x08003390

08002048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800204c:	f7ff ffdc 	bl	8002008 <HAL_RCC_GetHCLKFreq>
 8002050:	4602      	mov	r2, r0
 8002052:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	0b5b      	lsrs	r3, r3, #13
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	4903      	ldr	r1, [pc, #12]	@ (800206c <HAL_RCC_GetPCLK2Freq+0x24>)
 800205e:	5ccb      	ldrb	r3, [r1, r3]
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002064:	4618      	mov	r0, r3
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40023800 	.word	0x40023800
 800206c:	08003390 	.word	0x08003390

08002070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e041      	b.n	8002106 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d106      	bne.n	800209c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe feb8 	bl	8000e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3304      	adds	r3, #4
 80020ac:	4619      	mov	r1, r3
 80020ae:	4610      	mov	r0, r2
 80020b0:	f000 fb24 	bl	80026fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e041      	b.n	80021a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d106      	bne.n	800213a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f839 	bl	80021ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2202      	movs	r2, #2
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3304      	adds	r3, #4
 800214a:	4619      	mov	r1, r3
 800214c:	4610      	mov	r0, r2
 800214e:	f000 fad5 	bl	80026fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d109      	bne.n	80021e4 <HAL_TIM_PWM_Start+0x24>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b01      	cmp	r3, #1
 80021da:	bf14      	ite	ne
 80021dc:	2301      	movne	r3, #1
 80021de:	2300      	moveq	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	e022      	b.n	800222a <HAL_TIM_PWM_Start+0x6a>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d109      	bne.n	80021fe <HAL_TIM_PWM_Start+0x3e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	bf14      	ite	ne
 80021f6:	2301      	movne	r3, #1
 80021f8:	2300      	moveq	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	e015      	b.n	800222a <HAL_TIM_PWM_Start+0x6a>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b08      	cmp	r3, #8
 8002202:	d109      	bne.n	8002218 <HAL_TIM_PWM_Start+0x58>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	bf14      	ite	ne
 8002210:	2301      	movne	r3, #1
 8002212:	2300      	moveq	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	e008      	b.n	800222a <HAL_TIM_PWM_Start+0x6a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b01      	cmp	r3, #1
 8002222:	bf14      	ite	ne
 8002224:	2301      	movne	r3, #1
 8002226:	2300      	moveq	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e068      	b.n	8002304 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d104      	bne.n	8002242 <HAL_TIM_PWM_Start+0x82>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002240:	e013      	b.n	800226a <HAL_TIM_PWM_Start+0xaa>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b04      	cmp	r3, #4
 8002246:	d104      	bne.n	8002252 <HAL_TIM_PWM_Start+0x92>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002250:	e00b      	b.n	800226a <HAL_TIM_PWM_Start+0xaa>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2b08      	cmp	r3, #8
 8002256:	d104      	bne.n	8002262 <HAL_TIM_PWM_Start+0xa2>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002260:	e003      	b.n	800226a <HAL_TIM_PWM_Start+0xaa>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2202      	movs	r2, #2
 8002266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2201      	movs	r2, #1
 8002270:	6839      	ldr	r1, [r7, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fcf4 	bl	8002c60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a23      	ldr	r2, [pc, #140]	@ (800230c <HAL_TIM_PWM_Start+0x14c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d107      	bne.n	8002292 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002290:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1d      	ldr	r2, [pc, #116]	@ (800230c <HAL_TIM_PWM_Start+0x14c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d018      	beq.n	80022ce <HAL_TIM_PWM_Start+0x10e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022a4:	d013      	beq.n	80022ce <HAL_TIM_PWM_Start+0x10e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a19      	ldr	r2, [pc, #100]	@ (8002310 <HAL_TIM_PWM_Start+0x150>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d00e      	beq.n	80022ce <HAL_TIM_PWM_Start+0x10e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a17      	ldr	r2, [pc, #92]	@ (8002314 <HAL_TIM_PWM_Start+0x154>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d009      	beq.n	80022ce <HAL_TIM_PWM_Start+0x10e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a16      	ldr	r2, [pc, #88]	@ (8002318 <HAL_TIM_PWM_Start+0x158>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d004      	beq.n	80022ce <HAL_TIM_PWM_Start+0x10e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a14      	ldr	r2, [pc, #80]	@ (800231c <HAL_TIM_PWM_Start+0x15c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d111      	bne.n	80022f2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b06      	cmp	r3, #6
 80022de:	d010      	beq.n	8002302 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f0:	e007      	b.n	8002302 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40010000 	.word	0x40010000
 8002310:	40000400 	.word	0x40000400
 8002314:	40000800 	.word	0x40000800
 8002318:	40000c00 	.word	0x40000c00
 800231c:	40014000 	.word	0x40014000

08002320 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2200      	movs	r2, #0
 8002330:	6839      	ldr	r1, [r7, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fc94 	bl	8002c60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a29      	ldr	r2, [pc, #164]	@ (80023e4 <HAL_TIM_PWM_Stop+0xc4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d117      	bne.n	8002372 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6a1a      	ldr	r2, [r3, #32]
 8002348:	f241 1311 	movw	r3, #4369	@ 0x1111
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10f      	bne.n	8002372 <HAL_TIM_PWM_Stop+0x52>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6a1a      	ldr	r2, [r3, #32]
 8002358:	f240 4344 	movw	r3, #1092	@ 0x444
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d107      	bne.n	8002372 <HAL_TIM_PWM_Stop+0x52>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002370:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6a1a      	ldr	r2, [r3, #32]
 8002378:	f241 1311 	movw	r3, #4369	@ 0x1111
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10f      	bne.n	80023a2 <HAL_TIM_PWM_Stop+0x82>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6a1a      	ldr	r2, [r3, #32]
 8002388:	f240 4344 	movw	r3, #1092	@ 0x444
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d107      	bne.n	80023a2 <HAL_TIM_PWM_Stop+0x82>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0201 	bic.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d104      	bne.n	80023b2 <HAL_TIM_PWM_Stop+0x92>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023b0:	e013      	b.n	80023da <HAL_TIM_PWM_Stop+0xba>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d104      	bne.n	80023c2 <HAL_TIM_PWM_Stop+0xa2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023c0:	e00b      	b.n	80023da <HAL_TIM_PWM_Stop+0xba>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d104      	bne.n	80023d2 <HAL_TIM_PWM_Stop+0xb2>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023d0:	e003      	b.n	80023da <HAL_TIM_PWM_Stop+0xba>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40010000 	.word	0x40010000

080023e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002402:	2302      	movs	r3, #2
 8002404:	e0ae      	b.n	8002564 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b0c      	cmp	r3, #12
 8002412:	f200 809f 	bhi.w	8002554 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002416:	a201      	add	r2, pc, #4	@ (adr r2, 800241c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241c:	08002451 	.word	0x08002451
 8002420:	08002555 	.word	0x08002555
 8002424:	08002555 	.word	0x08002555
 8002428:	08002555 	.word	0x08002555
 800242c:	08002491 	.word	0x08002491
 8002430:	08002555 	.word	0x08002555
 8002434:	08002555 	.word	0x08002555
 8002438:	08002555 	.word	0x08002555
 800243c:	080024d3 	.word	0x080024d3
 8002440:	08002555 	.word	0x08002555
 8002444:	08002555 	.word	0x08002555
 8002448:	08002555 	.word	0x08002555
 800244c:	08002513 	.word	0x08002513
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f9dc 	bl	8002814 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0208 	orr.w	r2, r2, #8
 800246a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0204 	bic.w	r2, r2, #4
 800247a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6999      	ldr	r1, [r3, #24]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	619a      	str	r2, [r3, #24]
      break;
 800248e:	e064      	b.n	800255a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fa22 	bl	80028e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6999      	ldr	r1, [r3, #24]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	021a      	lsls	r2, r3, #8
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	619a      	str	r2, [r3, #24]
      break;
 80024d0:	e043      	b.n	800255a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fa6d 	bl	80029b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69da      	ldr	r2, [r3, #28]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0208 	orr.w	r2, r2, #8
 80024ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0204 	bic.w	r2, r2, #4
 80024fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	69d9      	ldr	r1, [r3, #28]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	61da      	str	r2, [r3, #28]
      break;
 8002510:	e023      	b.n	800255a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fab7 	bl	8002a8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69da      	ldr	r2, [r3, #28]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800252c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	69da      	ldr	r2, [r3, #28]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800253c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69d9      	ldr	r1, [r3, #28]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	021a      	lsls	r2, r3, #8
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	61da      	str	r2, [r3, #28]
      break;
 8002552:	e002      	b.n	800255a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	75fb      	strb	r3, [r7, #23]
      break;
 8002558:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002562:	7dfb      	ldrb	r3, [r7, #23]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_TIM_ConfigClockSource+0x1c>
 8002584:	2302      	movs	r3, #2
 8002586:	e0b4      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x186>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80025a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025c0:	d03e      	beq.n	8002640 <HAL_TIM_ConfigClockSource+0xd4>
 80025c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025c6:	f200 8087 	bhi.w	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025ce:	f000 8086 	beq.w	80026de <HAL_TIM_ConfigClockSource+0x172>
 80025d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025d6:	d87f      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025d8:	2b70      	cmp	r3, #112	@ 0x70
 80025da:	d01a      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0xa6>
 80025dc:	2b70      	cmp	r3, #112	@ 0x70
 80025de:	d87b      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025e0:	2b60      	cmp	r3, #96	@ 0x60
 80025e2:	d050      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x11a>
 80025e4:	2b60      	cmp	r3, #96	@ 0x60
 80025e6:	d877      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025e8:	2b50      	cmp	r3, #80	@ 0x50
 80025ea:	d03c      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0xfa>
 80025ec:	2b50      	cmp	r3, #80	@ 0x50
 80025ee:	d873      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025f0:	2b40      	cmp	r3, #64	@ 0x40
 80025f2:	d058      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0x13a>
 80025f4:	2b40      	cmp	r3, #64	@ 0x40
 80025f6:	d86f      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025f8:	2b30      	cmp	r3, #48	@ 0x30
 80025fa:	d064      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x15a>
 80025fc:	2b30      	cmp	r3, #48	@ 0x30
 80025fe:	d86b      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002600:	2b20      	cmp	r3, #32
 8002602:	d060      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002604:	2b20      	cmp	r3, #32
 8002606:	d867      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002608:	2b00      	cmp	r3, #0
 800260a:	d05c      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x15a>
 800260c:	2b10      	cmp	r3, #16
 800260e:	d05a      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002610:	e062      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002622:	f000 fafd 	bl	8002c20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002634:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	609a      	str	r2, [r3, #8]
      break;
 800263e:	e04f      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002650:	f000 fae6 	bl	8002c20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002662:	609a      	str	r2, [r3, #8]
      break;
 8002664:	e03c      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002672:	461a      	mov	r2, r3
 8002674:	f000 fa5a 	bl	8002b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2150      	movs	r1, #80	@ 0x50
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fab3 	bl	8002bea <TIM_ITRx_SetConfig>
      break;
 8002684:	e02c      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002692:	461a      	mov	r2, r3
 8002694:	f000 fa79 	bl	8002b8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2160      	movs	r1, #96	@ 0x60
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 faa3 	bl	8002bea <TIM_ITRx_SetConfig>
      break;
 80026a4:	e01c      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b2:	461a      	mov	r2, r3
 80026b4:	f000 fa3a 	bl	8002b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2140      	movs	r1, #64	@ 0x40
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fa93 	bl	8002bea <TIM_ITRx_SetConfig>
      break;
 80026c4:	e00c      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4619      	mov	r1, r3
 80026d0:	4610      	mov	r0, r2
 80026d2:	f000 fa8a 	bl	8002bea <TIM_ITRx_SetConfig>
      break;
 80026d6:	e003      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
      break;
 80026dc:	e000      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a3a      	ldr	r2, [pc, #232]	@ (80027f8 <TIM_Base_SetConfig+0xfc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00f      	beq.n	8002734 <TIM_Base_SetConfig+0x38>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800271a:	d00b      	beq.n	8002734 <TIM_Base_SetConfig+0x38>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a37      	ldr	r2, [pc, #220]	@ (80027fc <TIM_Base_SetConfig+0x100>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d007      	beq.n	8002734 <TIM_Base_SetConfig+0x38>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a36      	ldr	r2, [pc, #216]	@ (8002800 <TIM_Base_SetConfig+0x104>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d003      	beq.n	8002734 <TIM_Base_SetConfig+0x38>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a35      	ldr	r2, [pc, #212]	@ (8002804 <TIM_Base_SetConfig+0x108>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d108      	bne.n	8002746 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800273a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a2b      	ldr	r2, [pc, #172]	@ (80027f8 <TIM_Base_SetConfig+0xfc>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01b      	beq.n	8002786 <TIM_Base_SetConfig+0x8a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002754:	d017      	beq.n	8002786 <TIM_Base_SetConfig+0x8a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a28      	ldr	r2, [pc, #160]	@ (80027fc <TIM_Base_SetConfig+0x100>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <TIM_Base_SetConfig+0x8a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a27      	ldr	r2, [pc, #156]	@ (8002800 <TIM_Base_SetConfig+0x104>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00f      	beq.n	8002786 <TIM_Base_SetConfig+0x8a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a26      	ldr	r2, [pc, #152]	@ (8002804 <TIM_Base_SetConfig+0x108>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00b      	beq.n	8002786 <TIM_Base_SetConfig+0x8a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a25      	ldr	r2, [pc, #148]	@ (8002808 <TIM_Base_SetConfig+0x10c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d007      	beq.n	8002786 <TIM_Base_SetConfig+0x8a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a24      	ldr	r2, [pc, #144]	@ (800280c <TIM_Base_SetConfig+0x110>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d003      	beq.n	8002786 <TIM_Base_SetConfig+0x8a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a23      	ldr	r2, [pc, #140]	@ (8002810 <TIM_Base_SetConfig+0x114>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d108      	bne.n	8002798 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800278c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4313      	orrs	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a0e      	ldr	r2, [pc, #56]	@ (80027f8 <TIM_Base_SetConfig+0xfc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d103      	bne.n	80027cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d105      	bne.n	80027ea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f023 0201 	bic.w	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	611a      	str	r2, [r3, #16]
  }
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40010000 	.word	0x40010000
 80027fc:	40000400 	.word	0x40000400
 8002800:	40000800 	.word	0x40000800
 8002804:	40000c00 	.word	0x40000c00
 8002808:	40014000 	.word	0x40014000
 800280c:	40014400 	.word	0x40014400
 8002810:	40014800 	.word	0x40014800

08002814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	f023 0201 	bic.w	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0303 	bic.w	r3, r3, #3
 800284a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f023 0302 	bic.w	r3, r3, #2
 800285c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a1c      	ldr	r2, [pc, #112]	@ (80028dc <TIM_OC1_SetConfig+0xc8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d10c      	bne.n	800288a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f023 0308 	bic.w	r3, r3, #8
 8002876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 0304 	bic.w	r3, r3, #4
 8002888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a13      	ldr	r2, [pc, #76]	@ (80028dc <TIM_OC1_SetConfig+0xc8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d111      	bne.n	80028b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	621a      	str	r2, [r3, #32]
}
 80028d0:	bf00      	nop
 80028d2:	371c      	adds	r7, #28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	40010000 	.word	0x40010000

080028e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f023 0210 	bic.w	r2, r3, #16
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800290e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4313      	orrs	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f023 0320 	bic.w	r3, r3, #32
 800292a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a1e      	ldr	r2, [pc, #120]	@ (80029b4 <TIM_OC2_SetConfig+0xd4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d10d      	bne.n	800295c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800295a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a15      	ldr	r2, [pc, #84]	@ (80029b4 <TIM_OC2_SetConfig+0xd4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d113      	bne.n	800298c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800296a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002972:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	621a      	str	r2, [r3, #32]
}
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40010000 	.word	0x40010000

080029b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f023 0303 	bic.w	r3, r3, #3
 80029ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a1d      	ldr	r2, [pc, #116]	@ (8002a88 <TIM_OC3_SetConfig+0xd0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d10d      	bne.n	8002a32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a14      	ldr	r2, [pc, #80]	@ (8002a88 <TIM_OC3_SetConfig+0xd0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d113      	bne.n	8002a62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	621a      	str	r2, [r3, #32]
}
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40010000 	.word	0x40010000

08002a8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	031b      	lsls	r3, r3, #12
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a10      	ldr	r2, [pc, #64]	@ (8002b28 <TIM_OC4_SetConfig+0x9c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d109      	bne.n	8002b00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002af2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	019b      	lsls	r3, r3, #6
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	621a      	str	r2, [r3, #32]
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40010000 	.word	0x40010000

08002b2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f023 0201 	bic.w	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f023 030a 	bic.w	r3, r3, #10
 8002b68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	621a      	str	r2, [r3, #32]
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b087      	sub	sp, #28
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f023 0210 	bic.w	r2, r3, #16
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	031b      	lsls	r3, r3, #12
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002bc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	621a      	str	r2, [r3, #32]
}
 8002bde:	bf00      	nop
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f043 0307 	orr.w	r3, r3, #7
 8002c0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	609a      	str	r2, [r3, #8]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	021a      	lsls	r2, r3, #8
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	609a      	str	r2, [r3, #8]
}
 8002c54:	bf00      	nop
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2201      	movs	r2, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a1a      	ldr	r2, [r3, #32]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	401a      	ands	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a1a      	ldr	r2, [r3, #32]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	fa01 f303 	lsl.w	r3, r1, r3
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	621a      	str	r2, [r3, #32]
}
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e050      	b.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1c      	ldr	r2, [pc, #112]	@ (8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d018      	beq.n	8002d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d10:	d013      	beq.n	8002d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a18      	ldr	r2, [pc, #96]	@ (8002d78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00e      	beq.n	8002d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a16      	ldr	r2, [pc, #88]	@ (8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d009      	beq.n	8002d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a15      	ldr	r2, [pc, #84]	@ (8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d004      	beq.n	8002d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a13      	ldr	r2, [pc, #76]	@ (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d10c      	bne.n	8002d54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40010000 	.word	0x40010000
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40000800 	.word	0x40000800
 8002d80:	40000c00 	.word	0x40000c00
 8002d84:	40014000 	.word	0x40014000

08002d88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e042      	b.n	8002e20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe f8c6 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2224      	movs	r2, #36	@ 0x24
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f82b 	bl	8002e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002de0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002df0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e2c:	b0c0      	sub	sp, #256	@ 0x100
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e44:	68d9      	ldr	r1, [r3, #12]
 8002e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	ea40 0301 	orr.w	r3, r0, r1
 8002e50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e80:	f021 010c 	bic.w	r1, r1, #12
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea2:	6999      	ldr	r1, [r3, #24]
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	ea40 0301 	orr.w	r3, r0, r1
 8002eae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4b8f      	ldr	r3, [pc, #572]	@ (80030f4 <UART_SetConfig+0x2cc>)
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d005      	beq.n	8002ec8 <UART_SetConfig+0xa0>
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4b8d      	ldr	r3, [pc, #564]	@ (80030f8 <UART_SetConfig+0x2d0>)
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d104      	bne.n	8002ed2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ec8:	f7ff f8be 	bl	8002048 <HAL_RCC_GetPCLK2Freq>
 8002ecc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ed0:	e003      	b.n	8002eda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ed2:	f7ff f8a5 	bl	8002020 <HAL_RCC_GetPCLK1Freq>
 8002ed6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ee4:	f040 810c 	bne.w	8003100 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eec:	2200      	movs	r2, #0
 8002eee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ef2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ef6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002efa:	4622      	mov	r2, r4
 8002efc:	462b      	mov	r3, r5
 8002efe:	1891      	adds	r1, r2, r2
 8002f00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f02:	415b      	adcs	r3, r3
 8002f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	eb12 0801 	adds.w	r8, r2, r1
 8002f10:	4629      	mov	r1, r5
 8002f12:	eb43 0901 	adc.w	r9, r3, r1
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f2a:	4690      	mov	r8, r2
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	4623      	mov	r3, r4
 8002f30:	eb18 0303 	adds.w	r3, r8, r3
 8002f34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f38:	462b      	mov	r3, r5
 8002f3a:	eb49 0303 	adc.w	r3, r9, r3
 8002f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f56:	460b      	mov	r3, r1
 8002f58:	18db      	adds	r3, r3, r3
 8002f5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	eb42 0303 	adc.w	r3, r2, r3
 8002f62:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f6c:	f7fd f932 	bl	80001d4 <__aeabi_uldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4b61      	ldr	r3, [pc, #388]	@ (80030fc <UART_SetConfig+0x2d4>)
 8002f76:	fba3 2302 	umull	r2, r3, r3, r2
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	011c      	lsls	r4, r3, #4
 8002f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f82:	2200      	movs	r2, #0
 8002f84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f90:	4642      	mov	r2, r8
 8002f92:	464b      	mov	r3, r9
 8002f94:	1891      	adds	r1, r2, r2
 8002f96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f98:	415b      	adcs	r3, r3
 8002f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002fa0:	4641      	mov	r1, r8
 8002fa2:	eb12 0a01 	adds.w	sl, r2, r1
 8002fa6:	4649      	mov	r1, r9
 8002fa8:	eb43 0b01 	adc.w	fp, r3, r1
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fc0:	4692      	mov	sl, r2
 8002fc2:	469b      	mov	fp, r3
 8002fc4:	4643      	mov	r3, r8
 8002fc6:	eb1a 0303 	adds.w	r3, sl, r3
 8002fca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fce:	464b      	mov	r3, r9
 8002fd0:	eb4b 0303 	adc.w	r3, fp, r3
 8002fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fe4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002fe8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fec:	460b      	mov	r3, r1
 8002fee:	18db      	adds	r3, r3, r3
 8002ff0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	eb42 0303 	adc.w	r3, r2, r3
 8002ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ffa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ffe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003002:	f7fd f8e7 	bl	80001d4 <__aeabi_uldivmod>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4611      	mov	r1, r2
 800300c:	4b3b      	ldr	r3, [pc, #236]	@ (80030fc <UART_SetConfig+0x2d4>)
 800300e:	fba3 2301 	umull	r2, r3, r3, r1
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	2264      	movs	r2, #100	@ 0x64
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	1acb      	subs	r3, r1, r3
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003022:	4b36      	ldr	r3, [pc, #216]	@ (80030fc <UART_SetConfig+0x2d4>)
 8003024:	fba3 2302 	umull	r2, r3, r3, r2
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003030:	441c      	add	r4, r3
 8003032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003036:	2200      	movs	r2, #0
 8003038:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800303c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003040:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003044:	4642      	mov	r2, r8
 8003046:	464b      	mov	r3, r9
 8003048:	1891      	adds	r1, r2, r2
 800304a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800304c:	415b      	adcs	r3, r3
 800304e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003050:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003054:	4641      	mov	r1, r8
 8003056:	1851      	adds	r1, r2, r1
 8003058:	6339      	str	r1, [r7, #48]	@ 0x30
 800305a:	4649      	mov	r1, r9
 800305c:	414b      	adcs	r3, r1
 800305e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800306c:	4659      	mov	r1, fp
 800306e:	00cb      	lsls	r3, r1, #3
 8003070:	4651      	mov	r1, sl
 8003072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003076:	4651      	mov	r1, sl
 8003078:	00ca      	lsls	r2, r1, #3
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	4603      	mov	r3, r0
 8003080:	4642      	mov	r2, r8
 8003082:	189b      	adds	r3, r3, r2
 8003084:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003088:	464b      	mov	r3, r9
 800308a:	460a      	mov	r2, r1
 800308c:	eb42 0303 	adc.w	r3, r2, r3
 8003090:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030a8:	460b      	mov	r3, r1
 80030aa:	18db      	adds	r3, r3, r3
 80030ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ae:	4613      	mov	r3, r2
 80030b0:	eb42 0303 	adc.w	r3, r2, r3
 80030b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80030be:	f7fd f889 	bl	80001d4 <__aeabi_uldivmod>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4b0d      	ldr	r3, [pc, #52]	@ (80030fc <UART_SetConfig+0x2d4>)
 80030c8:	fba3 1302 	umull	r1, r3, r3, r2
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	2164      	movs	r1, #100	@ 0x64
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	3332      	adds	r3, #50	@ 0x32
 80030da:	4a08      	ldr	r2, [pc, #32]	@ (80030fc <UART_SetConfig+0x2d4>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	f003 0207 	and.w	r2, r3, #7
 80030e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4422      	add	r2, r4
 80030ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030f0:	e106      	b.n	8003300 <UART_SetConfig+0x4d8>
 80030f2:	bf00      	nop
 80030f4:	40011000 	.word	0x40011000
 80030f8:	40011400 	.word	0x40011400
 80030fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003104:	2200      	movs	r2, #0
 8003106:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800310a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800310e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003112:	4642      	mov	r2, r8
 8003114:	464b      	mov	r3, r9
 8003116:	1891      	adds	r1, r2, r2
 8003118:	6239      	str	r1, [r7, #32]
 800311a:	415b      	adcs	r3, r3
 800311c:	627b      	str	r3, [r7, #36]	@ 0x24
 800311e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003122:	4641      	mov	r1, r8
 8003124:	1854      	adds	r4, r2, r1
 8003126:	4649      	mov	r1, r9
 8003128:	eb43 0501 	adc.w	r5, r3, r1
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	00eb      	lsls	r3, r5, #3
 8003136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800313a:	00e2      	lsls	r2, r4, #3
 800313c:	4614      	mov	r4, r2
 800313e:	461d      	mov	r5, r3
 8003140:	4643      	mov	r3, r8
 8003142:	18e3      	adds	r3, r4, r3
 8003144:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003148:	464b      	mov	r3, r9
 800314a:	eb45 0303 	adc.w	r3, r5, r3
 800314e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800315e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800316e:	4629      	mov	r1, r5
 8003170:	008b      	lsls	r3, r1, #2
 8003172:	4621      	mov	r1, r4
 8003174:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003178:	4621      	mov	r1, r4
 800317a:	008a      	lsls	r2, r1, #2
 800317c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003180:	f7fd f828 	bl	80001d4 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4b60      	ldr	r3, [pc, #384]	@ (800330c <UART_SetConfig+0x4e4>)
 800318a:	fba3 2302 	umull	r2, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	011c      	lsls	r4, r3, #4
 8003192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003196:	2200      	movs	r2, #0
 8003198:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800319c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80031a4:	4642      	mov	r2, r8
 80031a6:	464b      	mov	r3, r9
 80031a8:	1891      	adds	r1, r2, r2
 80031aa:	61b9      	str	r1, [r7, #24]
 80031ac:	415b      	adcs	r3, r3
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031b4:	4641      	mov	r1, r8
 80031b6:	1851      	adds	r1, r2, r1
 80031b8:	6139      	str	r1, [r7, #16]
 80031ba:	4649      	mov	r1, r9
 80031bc:	414b      	adcs	r3, r1
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031cc:	4659      	mov	r1, fp
 80031ce:	00cb      	lsls	r3, r1, #3
 80031d0:	4651      	mov	r1, sl
 80031d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031d6:	4651      	mov	r1, sl
 80031d8:	00ca      	lsls	r2, r1, #3
 80031da:	4610      	mov	r0, r2
 80031dc:	4619      	mov	r1, r3
 80031de:	4603      	mov	r3, r0
 80031e0:	4642      	mov	r2, r8
 80031e2:	189b      	adds	r3, r3, r2
 80031e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031e8:	464b      	mov	r3, r9
 80031ea:	460a      	mov	r2, r1
 80031ec:	eb42 0303 	adc.w	r3, r2, r3
 80031f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800320c:	4649      	mov	r1, r9
 800320e:	008b      	lsls	r3, r1, #2
 8003210:	4641      	mov	r1, r8
 8003212:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003216:	4641      	mov	r1, r8
 8003218:	008a      	lsls	r2, r1, #2
 800321a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800321e:	f7fc ffd9 	bl	80001d4 <__aeabi_uldivmod>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4611      	mov	r1, r2
 8003228:	4b38      	ldr	r3, [pc, #224]	@ (800330c <UART_SetConfig+0x4e4>)
 800322a:	fba3 2301 	umull	r2, r3, r3, r1
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2264      	movs	r2, #100	@ 0x64
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	1acb      	subs	r3, r1, r3
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	3332      	adds	r3, #50	@ 0x32
 800323c:	4a33      	ldr	r2, [pc, #204]	@ (800330c <UART_SetConfig+0x4e4>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003248:	441c      	add	r4, r3
 800324a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800324e:	2200      	movs	r2, #0
 8003250:	673b      	str	r3, [r7, #112]	@ 0x70
 8003252:	677a      	str	r2, [r7, #116]	@ 0x74
 8003254:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003258:	4642      	mov	r2, r8
 800325a:	464b      	mov	r3, r9
 800325c:	1891      	adds	r1, r2, r2
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	415b      	adcs	r3, r3
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003268:	4641      	mov	r1, r8
 800326a:	1851      	adds	r1, r2, r1
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	4649      	mov	r1, r9
 8003270:	414b      	adcs	r3, r1
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003280:	4659      	mov	r1, fp
 8003282:	00cb      	lsls	r3, r1, #3
 8003284:	4651      	mov	r1, sl
 8003286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800328a:	4651      	mov	r1, sl
 800328c:	00ca      	lsls	r2, r1, #3
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	4603      	mov	r3, r0
 8003294:	4642      	mov	r2, r8
 8003296:	189b      	adds	r3, r3, r2
 8003298:	66bb      	str	r3, [r7, #104]	@ 0x68
 800329a:	464b      	mov	r3, r9
 800329c:	460a      	mov	r2, r1
 800329e:	eb42 0303 	adc.w	r3, r2, r3
 80032a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80032ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80032bc:	4649      	mov	r1, r9
 80032be:	008b      	lsls	r3, r1, #2
 80032c0:	4641      	mov	r1, r8
 80032c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032c6:	4641      	mov	r1, r8
 80032c8:	008a      	lsls	r2, r1, #2
 80032ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80032ce:	f7fc ff81 	bl	80001d4 <__aeabi_uldivmod>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4b0d      	ldr	r3, [pc, #52]	@ (800330c <UART_SetConfig+0x4e4>)
 80032d8:	fba3 1302 	umull	r1, r3, r3, r2
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	2164      	movs	r1, #100	@ 0x64
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	3332      	adds	r3, #50	@ 0x32
 80032ea:	4a08      	ldr	r2, [pc, #32]	@ (800330c <UART_SetConfig+0x4e4>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	f003 020f 	and.w	r2, r3, #15
 80032f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4422      	add	r2, r4
 80032fe:	609a      	str	r2, [r3, #8]
}
 8003300:	bf00      	nop
 8003302:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003306:	46bd      	mov	sp, r7
 8003308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800330c:	51eb851f 	.word	0x51eb851f

08003310 <memset>:
 8003310:	4402      	add	r2, r0
 8003312:	4603      	mov	r3, r0
 8003314:	4293      	cmp	r3, r2
 8003316:	d100      	bne.n	800331a <memset+0xa>
 8003318:	4770      	bx	lr
 800331a:	f803 1b01 	strb.w	r1, [r3], #1
 800331e:	e7f9      	b.n	8003314 <memset+0x4>

08003320 <__libc_init_array>:
 8003320:	b570      	push	{r4, r5, r6, lr}
 8003322:	4d0d      	ldr	r5, [pc, #52]	@ (8003358 <__libc_init_array+0x38>)
 8003324:	4c0d      	ldr	r4, [pc, #52]	@ (800335c <__libc_init_array+0x3c>)
 8003326:	1b64      	subs	r4, r4, r5
 8003328:	10a4      	asrs	r4, r4, #2
 800332a:	2600      	movs	r6, #0
 800332c:	42a6      	cmp	r6, r4
 800332e:	d109      	bne.n	8003344 <__libc_init_array+0x24>
 8003330:	4d0b      	ldr	r5, [pc, #44]	@ (8003360 <__libc_init_array+0x40>)
 8003332:	4c0c      	ldr	r4, [pc, #48]	@ (8003364 <__libc_init_array+0x44>)
 8003334:	f000 f818 	bl	8003368 <_init>
 8003338:	1b64      	subs	r4, r4, r5
 800333a:	10a4      	asrs	r4, r4, #2
 800333c:	2600      	movs	r6, #0
 800333e:	42a6      	cmp	r6, r4
 8003340:	d105      	bne.n	800334e <__libc_init_array+0x2e>
 8003342:	bd70      	pop	{r4, r5, r6, pc}
 8003344:	f855 3b04 	ldr.w	r3, [r5], #4
 8003348:	4798      	blx	r3
 800334a:	3601      	adds	r6, #1
 800334c:	e7ee      	b.n	800332c <__libc_init_array+0xc>
 800334e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003352:	4798      	blx	r3
 8003354:	3601      	adds	r6, #1
 8003356:	e7f2      	b.n	800333e <__libc_init_array+0x1e>
 8003358:	080033a0 	.word	0x080033a0
 800335c:	080033a0 	.word	0x080033a0
 8003360:	080033a0 	.word	0x080033a0
 8003364:	080033a4 	.word	0x080033a4

08003368 <_init>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr

08003374 <_fini>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	bf00      	nop
 8003378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337a:	bc08      	pop	{r3}
 800337c:	469e      	mov	lr, r3
 800337e:	4770      	bx	lr
